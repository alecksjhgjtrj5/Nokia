--!native
local DecompilerKonstant = (function(ByteCode)
local l_select_0 = select;
local function v6(v1, v2, ...)
	local v3, v4 = {
		...
	}, l_select_0("#", ...);
	for v5 = v2, v2 + v4 - 1 do
		v1[v5] = v3[v5 - v2 + 1];
	end;
end;
local l_getscriptbytecode_0 = getscriptbytecode;
local l_getscripthash_0 = getscripthash;
local _ = getgenv;
local l_rconsoleprint_0 = rconsoleprint;
local v14 = Vector3 or {
	new = function(v11, v12, v13) --[[ Line: 173 ]] --[[ Name: new ]]
		return {
			X = v11, 
			Y = v12, 
			Z = v13
		};
	end
};
local v15 = nil;
local v16 = nil;
local v17 = {};
local function v21() --[[ Line: 184 ]] --[[ Name: set_opcode_encoder ]]
	-- upvalues: v16 (ref), v15 (ref), v17 (copy)
	if v16 == "vanilla" then
		v15 = function(v18) --[[ Line: 186 ]]
			return v18;
		end;
	elseif v16 == "mul227" then
		v15 = function(v19) --[[ Line: 190 ]]
			return v19 * 227;
		end;
	else
		error("Invalid opcode_encoding_type");
	end;
	for v20 = 0, 255 do
		v17[v15(v20)] = v20;
	end;
end;
local v22 = {
	use_proto_debugnames = true, 
	show_proto_line_defined = true, 
	show_proto_upvalues = true, 
	show_proto_constants = true, 
	inline_table_initialization = true, 
	table_string_key_shortening = true, 
	table_dict_key_semicolons = true, 
	table_array_value_semicolons = false, 
	always_use_table_keys = false, 
	use_compound_assignment = true, 
	exact_argument_names = false, 
	string_quotes_behavior = "single char, single quotes", 
	do_tonumber_nan = true, 
	do_while_1 = false, 
	show_nil_definitions = true, 
	smart_var_level = 3, 
	smart_var_usage_analysis = true, 
	smart_var_extensive_prefixes = false, 
	mark_upvalues = "extra", 
	mark_setglobal = true, 
	mark_reads_and_writes = false, 
	minify_if_statements = true, 
	assume_if_else = true, 
	prefix_error = "KONSTANTERROR", 
	prefix_warning = "KONSTANTWARNING", 
	prefix_information = "KONSTANTINFO"
};
local v23 = if task then task.wait else nil;
local v24 = {
	[0] = "nil", 
	[1] = "boolean", 
	[2] = "number", 
	[3] = "string", 
	[4] = "import", 
	[5] = "table", 
	[6] = "function", 
	[7] = "vector"
};
local l_clock_0 = os.clock;
local v26 = elapsedTime or l_clock_0;
local v27 = v26();
local v28 = game ~= nil;
local v29 = l_rconsoleprint_0 or print;
local function v33(v30, v31, v32) --[[ Line: 271 ]] --[[ Name: anti_freeze ]]
	-- upvalues: v26 (copy), v27 (ref), v29 (copy), v23 (copy), v28 (copy)
	if v26() - v27 >= 0.016666666666666666 then
	--	info("[" .. v30 .. "/" .. v31 .. "] " .. string.format("%.1f", math.floor(v30 / v31 * 1000 + 0.5) / 10) .. "% done with func `" .. (v32 or "<main>") .. "`");
		if v23 and v28 then
			v23();
		end;
		v27 = v26();
	end;
end;
local function v43() --[[ Line: 282 ]] --[[ Name: new_bench ]]
	return {
		start_times = {}, 
		end_times = {}, 
		completed_benchmarks = {}, 
		start_benchmark = function(_, _) --[[ Line: 288 ]] --[[ Name: start_benchmark ]]

		end, 
		end_benchmark = function(_, _) --[[ Line: 296 ]] --[[ Name: end_benchmark ]]

		end, 
		get_benchmark_time = function(_, _) --[[ Line: 305 ]] --[[ Name: get_benchmark_time ]]
			return 0;
		end, 
		print_benchmark_time = function(_, _) --[[ Line: 315 ]] --[[ Name: print_benchmark_time ]]

		end, 
		print_all_times = function(_) --[[ Line: 320 ]] --[[ Name: print_all_times ]]

		end
	};
end;
local v44 = buffer.create(8);
local function _(v45) --[[ Line: 337 ]] --[[ Name: GETARG_A ]]
	return (bit32.band(bit32.rshift(v45, 8), 255));
end;
local function _(v47) --[[ Line: 340 ]] --[[ Name: GETARG_B ]]
	return (bit32.band(bit32.rshift(v47, 16), 255));
end;
local function _(v49) --[[ Line: 343 ]] --[[ Name: GETARG_C ]]
	return (bit32.band(bit32.rshift(v49, 24), 255));
end;
local function _(v51) --[[ Line: 346 ]] --[[ Name: GETARG_Bx ]]
	return (bit32.band(bit32.rshift(v51, 16), 65535));
end;
local function _(v53) --[[ Line: 349 ]] --[[ Name: GETARG_sBx ]]
	-- upvalues: v44 (copy)
	buffer.writeu16(v44, 0, (bit32.band(bit32.rshift(v53, 16), 65535)));
	return (buffer.readi16(v44, 0));
end;
local function _(v55) --[[ Line: 353 ]] --[[ Name: GETARG_Ax ]]
	return (bit32.rshift(v55, 8));
end;
local function _(v57) --[[ Line: 356 ]] --[[ Name: GETARG_sAx ]]
	-- upvalues: v44 (copy)
	buffer.writeu32(v44, 0, (bit32.rshift(v57, 8)));
	return (bit32.rshift(buffer.readi32(v44, 1), 16));
end;
local function _(v59) --[[ Line: 360 ]] --[[ Name: GET_OPCODE ]]
	return (bit32.band(v59, 255));
end;
local v61 = {
	A = true, 
	a = true, 
	E = true, 
	e = true, 
	I = true, 
	i = true, 
	O = true, 
	o = true, 
	U = true, 
	u = true
};
local function _(v62) --[[ Line: 375 ]] --[[ Name: tohex ]]
	return string.format("%X", v62);
end;
local v64 = {};
for v65 = 0, 255 do
	v64[v65] = string.format("%.2X", v65);
end;
local v66 = buffer.create(2);
local v67 = {};
for v68 = 0, 255 do
	buffer.writestring(v66, 0, v64[v68]);
	v67[v68] = buffer.readu16(v66, 0);
end;
local v69 = {};
for v70 = 0, 255 do
	v69[v70] = bit32.bor(bit32.lrotate(v67[v70], 16), 30812);
end;
local function _(v71) --[[ Line: 393 ]] --[[ Name: tohex8 ]]
	-- upvalues: v64 (copy)
	return v64[v71];
end;
local function _(v73) --[[ Line: 396 ]] --[[ Name: tohex16 ]]
	return string.format("%.4X", v73);
end;
local function _(v75) --[[ Line: 399 ]] --[[ Name: tohex32 ]]
	-- upvalues: v64 (copy)
	return v64[bit32.rshift(v75, 24)] .. v64[bit32.band(bit32.rrotate(v75, 16), 255)] .. v64[bit32.band(bit32.rrotate(v75, 8), 255)] .. v64[bit32.band(v75, 255)];
end;
local function _(v77) --[[ Line: 405 ]] --[[ Name: expect ]]
	assert(v77);
	return v77;
end;
local function _(v79, v80) --[[ Line: 410 ]] --[[ Name: table_copykeys ]]
	table.clear(v79);
	for v81, v82 in pairs(v80) do
		v79[v81] = v82;
	end;
end;
local function v89(v84, v85) --[[ Line: 416 ]] --[[ Name: table_create_combined ]]
	if #v85 > 8 then
		return table.move(v85, 1, #v85, 1, table.clone(v84));
	else
		local v86 = table.clone(v84);
		for _, v88 in ipairs(v85) do
			table.insert(v86, v88);
		end;
		return v86;
	end;
end;
local function _(v90, v91) --[[ Line: 427 ]] --[[ Name: table_create_combined_set ]]
	local v92 = table.clone(v90);
	for v93 in pairs(v91) do
		v92[v93] = true;
	end;
	return v92;
end;
local function _(v95, v96, v97) --[[ Line: 434 ]] --[[ Name: table_replace ]]
	local v98 = table.find(v95, v96);
	assert(v98);
	if v97 == nil then
		table.remove(v95, v98);
	else
		v95[v98] = v97;
	end;
	assert(not table.find(v95, v96));
end;
local function _(v100, v101, v102) --[[ Line: 444 ]] --[[ Name: table_replace_reverse ]]
	for v103 = #v100, 1, -1 do
		if v100[v103] == v101 then
			if v102 == nil then
				table.remove(v100, v103);
				return;
			else
				v100[v103] = v102;
				return;
			end;
		end;
	end;
end;
local function v109(v105) --[[ Line: 457 ]] --[[ Name: table_clone2 ]]
	local v106 = table.clone(v105);
	for v107, v108 in pairs(v106) do
		if type(v108) == "table" then
			v106[v107] = table.clone(v108);
		end;
	end;
	return v106;
end;
local function _(v110, v111) --[[ Line: 466 ]] --[[ Name: table_index_safe ]]
	local v112 = v110[v111];
	if v112 then
		return v112;
	else
		local v113 = {};
		v110[v111] = v113;
		return v113;
	end;
end;
local function _(v115) --[[ Line: 476 ]] --[[ Name: table_ensure_array ]]
	assert(#v115 > 0);
end;
local function _(v117, v118) --[[ Line: 479 ]] --[[ Name: table_create0 ]]
	local v119 = table.create(v117, v118);
	if v118 then
		v119[0] = v118;
		return v119;
	else
		v119[0] = nil;
		return v119;
	end;
end;
local v121 = {};
local function _(v122, v123, v124) --[[ Line: 489 ]] --[[ Name: table_read_2d ]]
	local v125 = v122[v123];
	if v125 then
		return v125[v124];
	else
		return nil;
	end;
end;
local function _(v127, v128, v129, v130) --[[ Line: 496 ]] --[[ Name: table_write_2d ]]
	local v131 = v127[v128];
	if v131 then
		v131[v129] = v130;
		return;
	else
		v127[v128] = {
			[v129] = v130
		};
		return;
	end;
end;
local _ = function(v133, v134) --[[ Line: 506 ]] --[[ Name: table_find_common_value ]]
	for _, v136 in ipairs(v133) do
		if table.find(v134, v136) then
			return v136;
		end;
	end;
	return nil;
end;
local function _() --[[ Line: 514 ]] --[[ Name: is_table_in_table_reset_cache ]]
	-- upvalues: v121 (ref)
	v121 = {};
end;
local function v139(v140, v141, v142) --[[ Line: 517 ]] --[[ Name: is_table_in_table ]]
	-- upvalues: v121 (ref), v139 (copy)
	local v143 = v121[v140];
	local v144 = if v143 then v143[v141] else nil;
	if v144 then
		return v144;
	else
		local v145 = v142 or {};
		for v146, v147 in v140 do
			if type(v146) == "table" then
				if not v145[v146] then
					v145[v146] = true;
					if v146 == v141 then
						local l_v121_0 = v121;
						local v149 = l_v121_0[v140];
						if v149 then
							v149[v141] = true;
						else
							l_v121_0[v140] = {
								[v141] = true
							};
						end;
						return true;
					elseif v139(v147, v141, v145) then
						local l_v121_1 = v121;
						local v151 = l_v121_1[v140];
						if v151 then
							v151[v141] = true;
						else
							l_v121_1[v140] = {
								[v141] = true
							};
						end;
						return true;
					end;
				end;
			elseif type(v147) == "table" and not v145[v147] then
				v145[v147] = true;
				if v147 == v141 then
					local l_v121_2 = v121;
					local v153 = l_v121_2[v140];
					if v153 then
						v153[v141] = true;
					else
						l_v121_2[v140] = {
							[v141] = true
						};
					end;
					return true;
				elseif v139(v147, v141, v145) then
					local l_v121_3 = v121;
					local v155 = l_v121_3[v140];
					if v155 then
						v155[v141] = true;
					else
						l_v121_3[v140] = {
							[v141] = true
						};
					end;
					return true;
				end;
			end;
		end;
		v143 = v121;
		local v156 = v143[v140];
		if v156 then
			v156[v141] = false;
		else
			v143[v140] = {
				[v141] = false
			};
		end;
		return false;
	end;
end;
local function _(v157, v158) --[[ Line: 562 ]] --[[ Name: new_range ]]
	if v158 then
		return {
			beginning = v157, 
			ending = v158
		};
	else
		return {
			beginning = v157, 
			ending = v157
		};
	end;
end;
local function _(v160) --[[ Line: 575 ]] --[[ Name: range_length ]]
	return v160.ending - v160.beginning + 1;
end;
local function _(v162, v163) --[[ Line: 578 ]] --[[ Name: range_equal ]]
	local v164 = false;
	if v162.beginning == v163.beginning then
		v164 = v162.ending == v163.ending;
	end;
	return v164;
end;
local function _(v166) --[[ Line: 581 ]] --[[ Name: range_to_string ]]
	return (("range<%*:%*>"):format(v166.beginning, v166.ending));
end;
local function _(v168, v169, v170) --[[ Line: 584 ]] --[[ Name: math_is_clamped ]]
	local v171 = false;
	if v169 <= v168 then
		v171 = v168 <= v170;
	end;
	return v171;
end;
local function _(v173, v174) --[[ Line: 587 ]] --[[ Name: math_is_in_range ]]
	local l_beginning_0 = v174.beginning;
	local l_ending_0 = v174.ending;
	local v177 = false;
	if l_beginning_0 <= v173 then
		v177 = v173 <= l_ending_0;
	end;
	return v177;
end;
local v179 = nil;
local v180 = nil;
local v181 = nil;
local function _(v182) --[[ Line: 603 ]] --[[ Name: get_opinfo_from_opname ]]
	-- upvalues: v180 (ref)
	local v183 = v180[v182];
	if not v183 then
		error((("Unknown opname %*"):format(v182)));
	end;
	return v183;
end;
local function _(v185) --[[ Line: 610 ]] --[[ Name: get_opinfo_from_opcode ]]
	-- upvalues: v181 (ref)
	return v181[v185];
end;
local v187 = {
	"LOADB", 
	"JUMP", 
	"JUMPBACK", 
	"JUMPIF", 
	"JUMPIFNOT", 
	"JUMPIFEQ", 
	"JUMPIFLE", 
	"JUMPIFLT", 
	"JUMPIFNOTEQ", 
	"JUMPIFNOTLE", 
	"JUMPIFNOTLT", 
	"FORNPREP", 
	"FORNLOOP", 
	"FORGLOOP", 
	"FORGPREP", 
	"FORGPREP_INEXT", 
	"DEP_FORGLOOP_INEXT", 
	"FORGPREP_NEXT", 
	"JUMPX", 
	"JUMPXEQKNIL", 
	"JUMPXEQKB", 
	"JUMPXEQKN", 
	"JUMPXEQKS", 
	"DEP_JUMPIFEQK", 
	"DEP_JUMPIFNOTEQK"
};
local v188 = nil;
local v189 = nil;
local function v212(v190) --[[ Line: 630 ]] --[[ Name: initialize_optables ]]
	-- upvalues: v21 (copy), v179 (ref), v15 (ref), v180 (ref), v181 (ref), v188 (ref), v189 (ref), v187 (copy)
	v21();
	local v191 = nil;
	if v190 >= 4 and v190 <= 6 then
		local v192 = {
			opname = "DEP_JUMPIFEQK", 
			aux = false
		};
		local v193 = {
			opname = "SUBRK", 
			aux = false
		};
		local v194 = {
			opname = "DEP_JUMPIFNOTEQK", 
			aux = false
		};
		local v195 = {
			opname = "DIVRK", 
			aux = false
		};
		local v196 = {
			opname = "DEP_FORGLOOP_INEXT", 
			aux = false
		};
		local v197 = {
			opname = "FASTCALL3", 
			aux = true
		};
		v191 = {
			{
				opname = "NOP", 
				aux = false
			}, 
			{
				opname = "BREAK", 
				aux = false
			}, 
			{
				opname = "LOADNIL", 
				aux = false
			}, 
			{
				opname = "LOADB", 
				aux = false
			}, 
			{
				opname = "LOADN", 
				aux = false
			}, 
			{
				opname = "LOADK", 
				aux = false
			}, 
			{
				opname = "MOVE", 
				aux = false
			}, 
			{
				opname = "GETGLOBAL", 
				aux = true
			}, 
			{
				opname = "SETGLOBAL", 
				aux = true
			}, 
			{
				opname = "GETUPVAL", 
				aux = false
			}, 
			{
				opname = "SETUPVAL", 
				aux = false
			}, 
			{
				opname = "CLOSEUPVALS", 
				aux = false
			}, 
			{
				opname = "GETIMPORT", 
				aux = true
			}, 
			{
				opname = "GETTABLE", 
				aux = false
			}, 
			{
				opname = "SETTABLE", 
				aux = false
			}, 
			{
				opname = "GETTABLEKS", 
				aux = true
			}, 
			{
				opname = "SETTABLEKS", 
				aux = true
			}, 
			{
				opname = "GETTABLEN", 
				aux = false
			}, 
			{
				opname = "SETTABLEN", 
				aux = false
			}, 
			{
				opname = "NEWCLOSURE", 
				aux = false
			}, 
			{
				opname = "NAMECALL", 
				aux = true
			}, 
			{
				opname = "CALL", 
				aux = false
			}, 
			{
				opname = "RETURN", 
				aux = false
			}, 
			{
				opname = "JUMP", 
				aux = false
			}, 
			{
				opname = "JUMPBACK", 
				aux = false
			}, 
			{
				opname = "JUMPIF", 
				aux = false
			}, 
			{
				opname = "JUMPIFNOT", 
				aux = false
			}, 
			{
				opname = "JUMPIFEQ", 
				aux = true
			}, 
			{
				opname = "JUMPIFLE", 
				aux = true
			}, 
			{
				opname = "JUMPIFLT", 
				aux = true
			}, 
			{
				opname = "JUMPIFNOTEQ", 
				aux = true
			}, 
			{
				opname = "JUMPIFNOTLE", 
				aux = true
			}, 
			{
				opname = "JUMPIFNOTLT", 
				aux = true
			}, 
			{
				opname = "ADD", 
				aux = false
			}, 
			{
				opname = "SUB", 
				aux = false
			}, 
			{
				opname = "MUL", 
				aux = false
			}, 
			{
				opname = "DIV", 
				aux = false
			}, 
			{
				opname = "MOD", 
				aux = false
			}, 
			{
				opname = "POW", 
				aux = false
			}, 
			{
				opname = "ADDK", 
				aux = false
			}, 
			{
				opname = "SUBK", 
				aux = false
			}, 
			{
				opname = "MULK", 
				aux = false
			}, 
			{
				opname = "DIVK", 
				aux = false
			}, 
			{
				opname = "MODK", 
				aux = false
			}, 
			{
				opname = "POWK", 
				aux = false
			}, 
			{
				opname = "AND", 
				aux = false
			}, 
			{
				opname = "OR", 
				aux = false
			}, 
			{
				opname = "ANDK", 
				aux = false
			}, 
			{
				opname = "ORK", 
				aux = false
			}, 
			{
				opname = "CONCAT", 
				aux = false
			}, 
			{
				opname = "NOT", 
				aux = false
			}, 
			{
				opname = "MINUS", 
				aux = false
			}, 
			{
				opname = "LENGTH", 
				aux = false
			}, 
			{
				opname = "NEWTABLE", 
				aux = true
			}, 
			{
				opname = "DUPTABLE", 
				aux = false
			}, 
			{
				opname = "SETLIST", 
				aux = true
			}, 
			{
				opname = "FORNPREP", 
				aux = false
			}, 
			{
				opname = "FORNLOOP", 
				aux = false
			}, 
			{
				opname = "FORGLOOP", 
				aux = true
			}, 
			{
				opname = "FORGPREP_INEXT", 
				aux = false
			}, 
			v196, 
			{
				opname = "FORGPREP_NEXT", 
				aux = false
			}, 
			{
				opname = "NATIVECALL", 
				aux = false
			}, 
			{
				opname = "GETVARARGS", 
				aux = false
			}, 
			{
				opname = "DUPCLOSURE", 
				aux = false
			}, 
			{
				opname = "PREPVARARGS", 
				aux = false
			}, 
			{
				opname = "LOADKX", 
				aux = false
			}, 
			{
				opname = "JUMPX", 
				aux = false
			}, 
			{
				opname = "FASTCALL", 
				aux = false
			}, 
			{
				opname = "COVERAGE", 
				aux = false
			}, 
			{
				opname = "CAPTURE", 
				aux = false
			}, 
			v193, 
			v195, 
			{
				opname = "FASTCALL1", 
				aux = false
			}, 
			{
				opname = "FASTCALL2", 
				aux = true
			}, 
			{
				opname = "FASTCALL2K", 
				aux = true
			}, 
			{
				opname = "FORGPREP", 
				aux = false
			}, 
			{
				opname = "JUMPXEQKNIL", 
				aux = true
			}, 
			{
				opname = "JUMPXEQKB", 
				aux = true
			}, 
			{
				opname = "JUMPXEQKN", 
				aux = true
			}, 
			{
				opname = "JUMPXEQKS", 
				aux = true
			}, 
			{
				opname = "IDIV", 
				aux = false
			}, 
			{
				opname = "IDIVK", 
				aux = false
			}, 
			{
				opname = "COUNT", 
				aux = false
			}
		};
		if v190 < 1 then
			local v198 = table.find(v191, v193);
			assert(v198);
			v191[v198] = v192;
			v198 = table.find(v191, v195);
			assert(v198);
			v191[v198] = v194;
		end;
		if v190 >= 6 then
			local v199 = table.find(v191, v196);
			assert(v199);
			v191[v199] = v197;
		end;
	elseif v190 >= 16 then
		error((("Luau version %* not supported. You likely didn't input Luau bytecode, or the bytecode was encoded. No encoding is supported."):format(v190)));
	else
		error((("Luau version %* not supported."):format(v190)));
	end;
	v179 = {};
	for v200, v201 in ipairs(v191) do
		local l_aux_0 = v201.aux;
		v179[v200] = {
			opname = v201.opname, 
			aux = l_aux_0, 
			opcode = -1, 
			real_opcode = -1, 
			size = l_aux_0 and 2 or 1
		};
	end;
	for v203, v204 in ipairs(v179) do
		local v205 = v203 - 1;
		v204.real_opcode = v205;
		v204.opcode = bit32.band(v15(v205), 255);
	end;
	v180 = {};
	v181 = {};
	for _, v207 in pairs(v179) do
		v180[v207.opname] = v207;
		v181[v207.opcode] = v207;
	end;
	v188 = {};
	v189 = {};
	for _, v209 in pairs(v187) do
		if v180[v209] then
			local v210 = v180[v209];
			if not v210 then
				error((("Unknown opname %*"):format(v209)));
			end;
			local l_v210_0 = v210;
			v188[v209] = true;
			v189[l_v210_0.opcode] = true;
		end;
	end;
end;
local _ = {
	LOADB = true, 
	JUMP = true, 
	JUMPBACK = true, 
	JUMPX = true
};
local v214 = {
	addition = "+=", 
	subtraction = "-=", 
	multiplication = "*=", 
	division = "/=", 
	["floor division"] = "//=", 
	exponentiation = "^=", 
	concatenation = "..=", 
	modulus = "%="
};
local v215 = {
	[">"] = "<=", 
	["<="] = ">", 
	["<"] = ">=", 
	[">="] = "<", 
	["=="] = "~=", 
	["~="] = "==", 
	exist = "not exist", 
	["not exist"] = "exist"
};
local v216 = {
	[">"] = "<", 
	["<"] = ">", 
	["<="] = ">=", 
	[">="] = "<=", 
	["=="] = "==", 
	["~="] = "~=", 
	exist = "not exist", 
	["not exist"] = "exist"
};
local v217 = {
	["end"] = true, 
	["if"] = true, 
	["local"] = true, 
	["else"] = true, 
	["elseif"] = true, 
	["function"] = true, 
	["break"] = true, 
	["then"] = true, 
	["and"] = true, 
	["or"] = true, 
	["repeat"] = true, 
	["until"] = true, 
	["for"] = true, 
	["do"] = true, 
	["in"] = true, 
	["nil"] = true, 
	["true"] = true, 
	["false"] = true, 
	["not"] = true, 
	["return"] = true
};
local v218 = {
	["for"] = true
};
local v219 = {
	call = true, 
	varargs = true
};
local v220 = {
	[0] = "<none>"; 
	"assert", 
	"math.abs", 
	"math.acos", 
	"math.asin", 
	"math.atan2", 
	"math.atan", 
	"math.ceil", 
	"math.cosh", 
	"math.cos", 
	"math.deg", 
	"math.exp", 
	"math.floor", 
	"math.fmod", 
	"math.frexp", 
	"math.ldexp", 
	"math.log10", 
	"math.log", 
	"math.max", 
	"math.min", 
	"math.modf", 
	"math.pow", 
	"math.rad", 
	"math.sinh", 
	"math.sin", 
	"math.sqrt", 
	"math.tanh", 
	"math.tan", 
	"bit32.arshift", 
	"bit32.band", 
	"bit32.bnot", 
	"bit32.bor", 
	"bit32.bxor", 
	"bit32.btest", 
	"bit32.extract", 
	"bit32.lrotate", 
	"bit32.lshift", 
	"bit32.replace", 
	"bit32.rrotate", 
	"bit32.rshift", 
	"type", 
	"string.byte", 
	"string.char", 
	"string.len", 
	"typeof", 
	"string.sub", 
	"math.clamp", 
	"math.sign", 
	"math.round", 
	"rawset", 
	"rawget", 
	"rawequal", 
	"table.insert", 
	"table.unpack", 
	"vector", 
	"bit32.countlz", 
	"bit32.countrz", 
	"select.vararg", 
	"rawlen", 
	"bit32.extractk", 
	"getmetatable", 
	"setmetatable", 
	"tonumber", 
	"tostring", 
	"bit32.byteswap", 
	"buffer.readi8", 
	"buffer.readu8", 
	"buffer.writeu8", 
	"buffer.readi16", 
	"buffer.readu16", 
	"buffer.writeu16", 
	"buffer.readi32", 
	"buffer.readu32", 
	"buffer.writeu32", 
	"buffer.readf32", 
	"buffer.writef32", 
	"buffer.readf64", 
	"buffer.writef64"
};
local function _(v221) --[[ Line: 960 ]] --[[ Name: table_make_zero_based ]]
	table.move(v221, 1, #v221, 0, v221);
	table.remove(v221, #v221);
end;
local function _(v223, v224) --[[ Line: 964 ]] --[[ Name: apply_bool_flip ]]
	if v224 then
		return not v223;
	else
		return v223;
	end;
end;
local function v296(v226) --[[ Line: 991 ]] --[[ Name: deserialize_bytecode ]]
	-- upvalues: v27 (ref), l_clock_0 (copy), v212 (copy), v14 (ref), v64 (copy)
	local v227 = nil;
	v227 = if type(v226) == "buffer" then v226 else buffer.fromstring(v226);
	v27 = l_clock_0();
	local v228 = 0;
	local function _() --[[ Line: 1000 ]] --[[ Name: read_byte ]]
		-- upvalues: v227 (ref), v228 (ref)
		local v229 = buffer.readu8(v227, v228);
		v228 = v228 + 1;
		return v229;
	end;
	local function v235() --[[ Line: 1005 ]] --[[ Name: read_varint ]]
		-- upvalues: v227 (ref), v228 (ref)
		local v231 = nil;
		local v232 = 0;
		local v233 = 0;
		repeat
			local v234 = buffer.readu8(v227, v228);
			v228 = v228 + 1;
			v231 = v234;
			v233 = bit32.bor(v233, (bit32.lshift(bit32.band(v231, 127), v232)));
			v232 = v232 + 7;
		until bit32.band(v231, 128) == 0;
		return v233;
	end;
	local function _() --[[ Line: 1017 ]] --[[ Name: read_int ]]
		-- upvalues: v227 (ref), v228 (ref)
		local v236 = buffer.readu32(v227, v228);
		v228 = v228 + 4;
		return v236;
	end;
	local function _() --[[ Line: 1022 ]] --[[ Name: read_float ]]
		-- upvalues: v227 (ref), v228 (ref)
		local v238 = buffer.readf32(v227, v228);
		v228 = v228 + 4;
		return v238;
	end;
	local function _() --[[ Line: 1027 ]] --[[ Name: read_double ]]
		-- upvalues: v227 (ref), v228 (ref)
		local v240 = buffer.readf64(v227, v228);
		v228 = v228 + 8;
		return v240;
	end;
	local function v244() --[[ Line: 1032 ]] --[[ Name: read_string ]]
		-- upvalues: v235 (copy), v227 (ref), v228 (ref)
		local v242 = v235();
		local v243 = buffer.create(v242);
		buffer.copy(v243, 0, v227, v228, v242);
		v228 = v228 + v242;
		return buffer.tostring(v243);
	end;
	local v245 = buffer.readu8(v227, v228);
	v228 = v228 + 1;
	local l_v245_0 = v245;
	v212(l_v245_0);
	v245 = nil;
	if l_v245_0 >= 4 then
		local v247 = buffer.readu8(v227, v228);
		v228 = v228 + 1;
		v245 = v247;
		if v245 > 3 then
			error((("Types version %* not supported. Only version 1 is supported."):format(v245)));
		end;
	end;
	local v248 = {};
	local v249 = {};
	for _ = 1, v235() do
		table.insert(v249, v244());
	end;
	local _ = {};
	if v245 == 3 then
		local v252 = buffer.readu8(v227, v228);
		v228 = v228 + 1;
		local l_v252_0 = v252;
		while l_v252_0 ~= 0 do
			print("IN");
			local v254 = v235();
			local v255 = buffer.create(v254);
			buffer.copy(v255, 0, v227, v228, v254);
			v228 = v228 + v254;
			v252 = buffer.tostring(v255);
			print(v252);
			v254 = buffer.readu8(v227, v228);
			v228 = v228 + 1;
			l_v252_0 = v254;
		end;
	end;
	local v256 = v235();
	if buffer.len(v227) / 11 <= v256 then
		error("Corrupted bytecode. If the `luau_load` is able to load this bytecode, then this is a bug");
	end;
	for _ = 1, v256 do
		table.insert(v248, {});
	end;
	for v258 = 1, v256 do
		local v259 = v248[v258];
		local v260 = buffer.readu8(v227, v228);
		v228 = v228 + 1;
		v259.stack_size = v260;
		v260 = buffer.readu8(v227, v228);
		v228 = v228 + 1;
		v259.params_count = v260;
		v260 = buffer.readu8(v227, v228);
		v228 = v228 + 1;
		v259.upvalues_count = v260;
		local v261 = buffer.readu8(v227, v228);
		v228 = v228 + 1;
		v259.is_vararg = v261 ~= 0;
		v260 = buffer.readu8(v227, v228);
		v228 = v228 + 1;
		v259.flags = v260;
		local v262 = {};
		if v245 == 1 then
			for v263 = 1, v235() do
				local v264 = buffer.readu8(v227, v228);
				v228 = v228 + 1;
				v262[v263] = v264;
			end;
		elseif v245 == 2 or v245 == 3 then
			for v265 = 1, v235() do
				local v266 = buffer.readu8(v227, v228);
				v228 = v228 + 1;
				v262[v265] = v266;
			end;
		end;
		v259.type_info = v262;
		table.move(v262, 1, #v262, 0, v262);
		table.remove(v262, #v262);
		v260 = v235();
		v261 = table.create(v260);
		for v267 = 1, v260 do
			local v268 = buffer.readu32(v227, v228);
			v228 = v228 + 4;
			v261[v267] = v268;
		end;
		v259.code = v261;
		table.move(v261, 1, #v261, 0, v261);
		table.remove(v261, #v261);
		local v269 = v235();
		local v270 = table.create(v269);
		for _ = 1, v269 do
			local v272 = nil;
			local v273 = buffer.readu8(v227, v228);
			v228 = v228 + 1;
			local l_v273_0 = v273;
			if l_v273_0 == 2 then
				v273 = {
					type = 2
				};
				local v275 = buffer.readf64(v227, v228);
				v228 = v228 + 8;
				v273.value = v275;
				v272 = v273;
			elseif l_v273_0 == 3 then
				v273 = v235();
				v272 = {
					type = 3, 
					value = v249[v273]
				};
			elseif l_v273_0 == 6 then
				v272 = {
					type = 6, 
					value = v235()
				};
			elseif l_v273_0 == 5 then
				v272 = {
					type = 5, 
					value = {}
				};
				for _ = 1, v235() do
					v235();
				end;
			elseif l_v273_0 == 4 then
				v273 = buffer.readu32(v227, v228);
				v228 = v228 + 4;
				v272 = {
					type = 4, 
					value = nil
				};
			elseif l_v273_0 == 1 then
				v273 = {
					type = 1
				};
				local v277 = buffer.readu8(v227, v228);
				v228 = v228 + 1;
				v273.value = v277 ~= 0;
				v272 = v273;
			elseif l_v273_0 == 0 then
				v272 = {
					type = 0, 
					value = nil
				};
			elseif l_v273_0 == 7 and l_v245_0 >= 5 then
				v273 = {
					type = 7
				};
				local l_new_0 = v14.new;
				local v279 = buffer.readf32(v227, v228);
				v228 = v228 + 4;
				local l_v279_0 = v279;
				local v281 = buffer.readf32(v227, v228);
				v228 = v228 + 4;
				v279 = v281;
				local v282 = buffer.readf32(v227, v228);
				v228 = v228 + 4;
				v273.value = l_new_0(l_v279_0, v279, v282);
				v272 = v273;
				v273 = buffer.readf32(v227, v228);
				v228 = v228 + 4;
			else
				error((("Unknown constant type %*"):format(l_v273_0)));
			end;
			table.insert(v270, v272);
		end;
		table.move(v270, 1, #v270, 0, v270);
		table.remove(v270, #v270);
		v259.constants = v270;
		local v283 = v235();
		local v284 = table.create(v283);
		for _ = 1, v283 do
			table.insert(v284, v248[v235() + 1]);
		end;
		table.move(v284, 1, #v284, 0, v284);
		table.remove(v284, #v284);
		v259.protos = v284;
		v259.line_defined = v235();
		v259.debug_name = v249[v235()];
		local v286 = buffer.readu8(v227, v228);
		v228 = v228 + 1;
		if v286 > 0 then
			local v287 = buffer.readu8(v227, v228);
			v228 = v228 + 1;
			v286 = v287;
			v287 = table.create(v260);
			for _ = 1, v260 do
				local v289 = buffer.readu8(v227, v228);
				v228 = v228 + 1;
				table.insert(v287, v289);
			end;
			table.move(v287, 1, #v287, 0, v287);
			table.remove(v287, #v287);
			v259.line_info = v287;
			local _ = bit32.band(v260 + 3, -4);
			local v291 = bit32.rshift(v260 - 1, v286) + 1;
			local v292 = table.create(v291);
			for _ = 1, v291 do
				local v294 = buffer.readu32(v227, v228);
				v228 = v228 + 4;
				table.insert(v292, v294);
			end;
			table.move(v287, 1, #v287, 0, v287);
			table.remove(v287, #v287);
			v259.line_info = v287;
		end;
		local v295 = buffer.readu8(v227, v228);
		v228 = v228 + 1;
		v286 = v295;
		if v286 > 0 then
			if v286 == 1 then
				error("g2 unsupported by deserializer");
			else
				error((("g2 unsupported by deserializer (%*)"):format(v64[v286])));
			end;
		end;
	end;
	table.move(v248, 1, #v248, 0, v248);
	table.remove(v248, #v248);
	return v248[v235()], v248, l_v245_0, v245;
end;
local v297 = 0;
local v298 = 0;
local v299 = nil;
local v300 = nil;
local v301 = nil;
local v302 = 0;
local function v304(_) --[[ Line: 1241 ]] --[[ Name: SKIPPED_INST ]]
	return {}, {};
end;
local v460 = {
	FASTCALL = v304, 
	FASTCALL1 = v304, 
	FASTCALL2 = v304, 
	FASTCALL2K = v304, 
	FASTCALL3 = v304, 
	JUMP = v304, 
	JUMPX = v304, 
	JUMPBACK = v304, 
	COVERAGE = v304, 
	CLOSEUPVALS = v304, 
	PREPVARARGS = v304, 
	GETVARARGS = function(v305) --[[ Line: 1254 ]] --[[ Name: GETVARARGS ]]
		-- upvalues: v298 (ref)
		local l_inst_0 = v305.inst;
		local v307 = bit32.band(bit32.rshift(l_inst_0, 8), 255);
		local v308 = {};
		local v309 = bit32.band(bit32.rshift(l_inst_0, 16), 255) - 1;
		if v309 == -1 then
			v309 = 1;
			v298 = v307;
		end;
		for v310 = v307, v307 + v309 - 1 do
			table.insert(v308, v310);
		end;
		return {}, v308;
	end, 
	MOVE = function(v311) --[[ Line: 1269 ]] --[[ Name: MOVE ]]
		local l_inst_1 = v311.inst;
		return {
			(bit32.band(bit32.rshift(l_inst_1, 16), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_1, 8), 255))
		}, "copies";
	end, 
	LOADK = function(v313) --[[ Line: 1273 ]] --[[ Name: LOADK ]]
		return {}, {
			(bit32.band(bit32.rshift(v313.inst, 8), 255))
		};
	end, 
	LOADKX = function(v314) --[[ Line: 1276 ]] --[[ Name: LOADKX ]]
		return {}, {
			(bit32.band(bit32.rshift(v314.inst, 8), 255))
		};
	end, 
	LOADN = function(v315) --[[ Line: 1279 ]] --[[ Name: LOADN ]]
		return {}, {
			(bit32.band(bit32.rshift(v315.inst, 8), 255))
		};
	end, 
	LOADNIL = function(v316) --[[ Line: 1282 ]] --[[ Name: LOADNIL ]]
		return {}, {
			(bit32.band(bit32.rshift(v316.inst, 8), 255))
		};
	end, 
	LOADB = function(v317) --[[ Line: 1285 ]] --[[ Name: LOADB ]]
		return {}, {
			(bit32.band(bit32.rshift(v317.inst, 8), 255))
		};
	end, 
	NEWTABLE = function(v318) --[[ Line: 1288 ]] --[[ Name: NEWTABLE ]]
		return {}, {
			(bit32.band(bit32.rshift(v318.inst, 8), 255))
		};
	end, 
	DUPTABLE = function(v319) --[[ Line: 1291 ]] --[[ Name: DUPTABLE ]]
		return {}, {
			(bit32.band(bit32.rshift(v319.inst, 8), 255))
		};
	end, 
	SETTABLE = function(v320) --[[ Line: 1294 ]] --[[ Name: SETTABLE ]]
		local l_inst_2 = v320.inst;
		return {
			bit32.band(bit32.rshift(l_inst_2, 24), 255), 
			bit32.band(bit32.rshift(l_inst_2, 8), 255), 
			(bit32.band(bit32.rshift(l_inst_2, 16), 255))
		}, {};
	end, 
	SETTABLEKS = function(v322) --[[ Line: 1299 ]] --[[ Name: SETTABLEKS ]]
		local l_inst_3 = v322.inst;
		return {
			bit32.band(bit32.rshift(l_inst_3, 8), 255), 
			(bit32.band(bit32.rshift(l_inst_3, 16), 255))
		}, {};
	end, 
	SETTABLEN = function(v324) --[[ Line: 1304 ]] --[[ Name: SETTABLEN ]]
		local l_inst_4 = v324.inst;
		return {
			bit32.band(bit32.rshift(l_inst_4, 8), 255), 
			(bit32.band(bit32.rshift(l_inst_4, 16), 255))
		}, {};
	end, 
	GETTABLE = function(v326) --[[ Line: 1309 ]] --[[ Name: GETTABLE ]]
		local l_inst_5 = v326.inst;
		return {
			bit32.band(bit32.rshift(l_inst_5, 16), 255), 
			(bit32.band(bit32.rshift(l_inst_5, 24), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_5, 8), 255))
		};
	end, 
	GETTABLEKS = function(v328) --[[ Line: 1314 ]] --[[ Name: GETTABLEKS ]]
		local l_inst_6 = v328.inst;
		return {
			(bit32.band(bit32.rshift(l_inst_6, 16), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_6, 8), 255))
		};
	end, 
	GETTABLEN = function(v330) --[[ Line: 1319 ]] --[[ Name: GETTABLEN ]]
		local l_inst_7 = v330.inst;
		return {
			(bit32.band(bit32.rshift(l_inst_7, 16), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_7, 8), 255))
		};
	end, 
	SETLIST = function(v332) --[[ Line: 1324 ]] --[[ Name: SETLIST ]]
		-- upvalues: v298 (ref)
		local l_inst_8 = v332.inst;
		local v334 = bit32.band(bit32.rshift(l_inst_8, 8), 255);
		local v335 = bit32.band(bit32.rshift(l_inst_8, 16), 255);
		local v336 = bit32.band(bit32.rshift(l_inst_8, 24), 255) - 1;
		local v337 = {};
		local l_v335_0 = v335;
		local v339 = if v336 == -1 then v298 else v335 + v336 - 1;
		for v340 = l_v335_0, v339 do
			table.insert(v337, v340);
		end;
		for _ = 1, #v337 do
			table.insert(v337, v334);
		end;
		return v337, {};
	end, 
	GETUPVAL = function(v342) --[[ Line: 1338 ]] --[[ Name: GETUPVAL ]]
		return {}, {
			(bit32.band(bit32.rshift(v342.inst, 8), 255))
		};
	end, 
	SETUPVAL = function(v343) --[[ Line: 1341 ]] --[[ Name: SETUPVAL ]]
		return {
			(bit32.band(bit32.rshift(v343.inst, 8), 255))
		}, {};
	end, 
	GETIMPORT = function(v344) --[[ Line: 1344 ]] --[[ Name: GETIMPORT ]]
		return {}, {
			(bit32.band(bit32.rshift(v344.inst, 8), 255))
		};
	end, 
	GETGLOBAL = function(v345) --[[ Line: 1347 ]] --[[ Name: GETGLOBAL ]]
		return {}, {
			(bit32.band(bit32.rshift(v345.inst, 8), 255))
		};
	end, 
	SETGLOBAL = function(v346) --[[ Line: 1350 ]] --[[ Name: SETGLOBAL ]]
		return {
			(bit32.band(bit32.rshift(v346.inst, 8), 255))
		}, {};
	end, 
	NAMECALL = function(v347) --[[ Line: 1353 ]] --[[ Name: NAMECALL ]]
		local l_inst_9 = v347.inst;
		local v349 = bit32.band(bit32.rshift(l_inst_9, 8), 255);
		return {
			(bit32.band(bit32.rshift(l_inst_9, 16), 255))
		}, {
			v349, 
			v349 + 1
		};
	end, 
	RETURN = function(v350) --[[ Line: 1359 ]] --[[ Name: RETURN ]]
		-- upvalues: v298 (ref)
		local l_inst_10 = v350.inst;
		local v352 = bit32.band(bit32.rshift(l_inst_10, 8), 255);
		local v353 = bit32.band(bit32.rshift(l_inst_10, 16), 255) - 1;
		local v354 = {};
		local l_v352_0 = v352;
		local v356 = if v353 == -1 then v298 else v352 + v353 - 1;
		for v357 = l_v352_0, v356 do
			table.insert(v354, v357);
		end;
		return v354, {};
	end, 
	CALL = function(v358) --[[ Line: 1369 ]] --[[ Name: CALL ]]
		-- upvalues: v298 (ref)
		local l_inst_11 = v358.inst;
		local v360 = bit32.band(bit32.rshift(l_inst_11, 8), 255);
		local v361 = bit32.band(bit32.rshift(l_inst_11, 16), 255) - 1;
		local v362 = bit32.band(bit32.rshift(l_inst_11, 24), 255) - 1;
		if v361 == -1 then
			v361 = v298 - v360;
		end;
		local v363 = {
			v360
		};
		local v364 = {};
		for v365 = v360 + 1, v360 + v361 do
			table.insert(v363, v365);
		end;
		if v362 == -1 then
			v362 = 1;
			v298 = v360;
		end;
		for v366 = v360, v360 + v362 - 1 do
			table.insert(v364, v366);
		end;
		return v363, v364;
	end, 
	DUPCLOSURE = function(v367) --[[ Line: 1393 ]] --[[ Name: DUPCLOSURE ]]
		return {}, {
			(bit32.band(bit32.rshift(v367.inst, 8), 255))
		};
	end, 
	NEWCLOSURE = function(v368) --[[ Line: 1396 ]] --[[ Name: NEWCLOSURE ]]
		return {}, {
			(bit32.band(bit32.rshift(v368.inst, 8), 255))
		};
	end, 
	ADD = function(v369) --[[ Line: 1400 ]] --[[ Name: ADD ]]
		local l_inst_12 = v369.inst;
		return {
			bit32.band(bit32.rshift(l_inst_12, 16), 255), 
			(bit32.band(bit32.rshift(l_inst_12, 24), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_12, 8), 255))
		};
	end, 
	ADDK = function(v371) --[[ Line: 1404 ]] --[[ Name: ADDK ]]
		local l_inst_13 = v371.inst;
		return {
			(bit32.band(bit32.rshift(l_inst_13, 16), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_13, 8), 255))
		};
	end, 
	SUB = function(v373) --[[ Line: 1408 ]] --[[ Name: SUB ]]
		local l_inst_14 = v373.inst;
		return {
			bit32.band(bit32.rshift(l_inst_14, 16), 255), 
			(bit32.band(bit32.rshift(l_inst_14, 24), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_14, 8), 255))
		};
	end, 
	SUBK = function(v375) --[[ Line: 1412 ]] --[[ Name: SUBK ]]
		local l_inst_15 = v375.inst;
		return {
			(bit32.band(bit32.rshift(l_inst_15, 16), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_15, 8), 255))
		};
	end, 
	MUL = function(v377) --[[ Line: 1416 ]] --[[ Name: MUL ]]
		local l_inst_16 = v377.inst;
		return {
			bit32.band(bit32.rshift(l_inst_16, 16), 255), 
			(bit32.band(bit32.rshift(l_inst_16, 24), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_16, 8), 255))
		};
	end, 
	MULK = function(v379) --[[ Line: 1420 ]] --[[ Name: MULK ]]
		local l_inst_17 = v379.inst;
		return {
			(bit32.band(bit32.rshift(l_inst_17, 16), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_17, 8), 255))
		};
	end, 
	DIV = function(v381) --[[ Line: 1424 ]] --[[ Name: DIV ]]
		local l_inst_18 = v381.inst;
		return {
			bit32.band(bit32.rshift(l_inst_18, 16), 255), 
			(bit32.band(bit32.rshift(l_inst_18, 24), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_18, 8), 255))
		};
	end, 
	DIVK = function(v383) --[[ Line: 1428 ]] --[[ Name: DIVK ]]
		local l_inst_19 = v383.inst;
		return {
			(bit32.band(bit32.rshift(l_inst_19, 16), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_19, 8), 255))
		};
	end, 
	SUBRK = function(v385) --[[ Line: 1432 ]] --[[ Name: SUBRK ]]
		local l_inst_20 = v385.inst;
		return {
			(bit32.band(bit32.rshift(l_inst_20, 24), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_20, 8), 255))
		};
	end, 
	DIVRK = function(v387) --[[ Line: 1436 ]] --[[ Name: DIVRK ]]
		local l_inst_21 = v387.inst;
		return {
			(bit32.band(bit32.rshift(l_inst_21, 24), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_21, 8), 255))
		};
	end, 
	IDIV = function(v389) --[[ Line: 1440 ]] --[[ Name: IDIV ]]
		local l_inst_22 = v389.inst;
		return {
			bit32.band(bit32.rshift(l_inst_22, 16), 255), 
			(bit32.band(bit32.rshift(l_inst_22, 24), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_22, 8), 255))
		};
	end, 
	IDIVK = function(v391) --[[ Line: 1444 ]] --[[ Name: IDIVK ]]
		local l_inst_23 = v391.inst;
		return {
			(bit32.band(bit32.rshift(l_inst_23, 16), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_23, 8), 255))
		};
	end, 
	POW = function(v393) --[[ Line: 1448 ]] --[[ Name: POW ]]
		local l_inst_24 = v393.inst;
		return {
			bit32.band(bit32.rshift(l_inst_24, 16), 255), 
			(bit32.band(bit32.rshift(l_inst_24, 24), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_24, 8), 255))
		};
	end, 
	POWK = function(v395) --[[ Line: 1452 ]] --[[ Name: POWK ]]
		local l_inst_25 = v395.inst;
		return {
			(bit32.band(bit32.rshift(l_inst_25, 16), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_25, 8), 255))
		};
	end, 
	MOD = function(v397) --[[ Line: 1456 ]] --[[ Name: MOD ]]
		local l_inst_26 = v397.inst;
		return {
			bit32.band(bit32.rshift(l_inst_26, 16), 255), 
			(bit32.band(bit32.rshift(l_inst_26, 24), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_26, 8), 255))
		};
	end, 
	MODK = function(v399) --[[ Line: 1460 ]] --[[ Name: MODK ]]
		local l_inst_27 = v399.inst;
		return {
			(bit32.band(bit32.rshift(l_inst_27, 16), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_27, 8), 255))
		};
	end, 
	AND = function(v401) --[[ Line: 1464 ]] --[[ Name: AND ]]
		local l_inst_28 = v401.inst;
		return {
			bit32.band(bit32.rshift(l_inst_28, 16), 255), 
			(bit32.band(bit32.rshift(l_inst_28, 24), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_28, 8), 255))
		};
	end, 
	ANDK = function(v403) --[[ Line: 1468 ]] --[[ Name: ANDK ]]
		local l_inst_29 = v403.inst;
		return {
			(bit32.band(bit32.rshift(l_inst_29, 16), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_29, 8), 255))
		};
	end, 
	OR = function(v405) --[[ Line: 1472 ]] --[[ Name: OR ]]
		local l_inst_30 = v405.inst;
		return {
			bit32.band(bit32.rshift(l_inst_30, 16), 255), 
			(bit32.band(bit32.rshift(l_inst_30, 24), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_30, 8), 255))
		};
	end, 
	ORK = function(v407) --[[ Line: 1476 ]] --[[ Name: ORK ]]
		local l_inst_31 = v407.inst;
		return {
			(bit32.band(bit32.rshift(l_inst_31, 16), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_31, 8), 255))
		};
	end, 
	CONCAT = function(v409) --[[ Line: 1480 ]] --[[ Name: CONCAT ]]
		local l_inst_32 = v409.inst;
		local v411 = bit32.band(bit32.rshift(l_inst_32, 16), 255);
		local v412 = bit32.band(bit32.rshift(l_inst_32, 24), 255);
		local v413 = {};
		for v414 = v411, v412 do
			table.insert(v413, v414);
		end;
		return v413, {
			(bit32.band(bit32.rshift(l_inst_32, 8), 255))
		};
	end, 
	NOT = function(v415) --[[ Line: 1490 ]] --[[ Name: NOT ]]
		local l_inst_33 = v415.inst;
		return {
			(bit32.band(bit32.rshift(l_inst_33, 16), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_33, 8), 255))
		};
	end, 
	MINUS = function(v417) --[[ Line: 1494 ]] --[[ Name: MINUS ]]
		local l_inst_34 = v417.inst;
		return {
			(bit32.band(bit32.rshift(l_inst_34, 16), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_34, 8), 255))
		};
	end, 
	LENGTH = function(v419) --[[ Line: 1498 ]] --[[ Name: LENGTH ]]
		local l_inst_35 = v419.inst;
		return {
			(bit32.band(bit32.rshift(l_inst_35, 16), 255))
		}, {
			(bit32.band(bit32.rshift(l_inst_35, 8), 255))
		};
	end, 
	NATIVECALL = function(_) --[[ Line: 1502 ]] --[[ Name: NATIVECALL ]]
		return {}, {};
	end, 
	BREAK = function(_) --[[ Line: 1505 ]] --[[ Name: BREAK ]]
		return {}, {};
	end, 
	NOP = function(_) --[[ Line: 1508 ]] --[[ Name: NOP ]]
		return {}, {};
	end, 
	CAPTURE = function(v424) --[[ Line: 1511 ]] --[[ Name: CAPTURE ]]
		local l_inst_36 = v424.inst;
		if bit32.band(bit32.rshift(l_inst_36, 8), 255) ~= 2 then
			return {
				(bit32.band(bit32.rshift(l_inst_36, 16), 255))
			}, {};
		else
			return {}, {};
		end;
	end, 
	JUMPIF = function(v426) --[[ Line: 1519 ]] --[[ Name: JUMPIF ]]
		return {
			(bit32.band(bit32.rshift(v426.inst, 8), 255))
		}, {};
	end, 
	JUMPIFNOT = function(v427) --[[ Line: 1522 ]] --[[ Name: JUMPIFNOT ]]
		return {
			(bit32.band(bit32.rshift(v427.inst, 8), 255))
		}, {};
	end, 
	JUMPIFEQ = function(v428) --[[ Line: 1525 ]] --[[ Name: JUMPIFEQ ]]
		local l_aux_1 = v428.aux;
		assert(l_aux_1);
		return {
			bit32.band(bit32.rshift(v428.inst, 8), 255), 
			l_aux_1
		}, {};
	end, 
	JUMPIFLE = function(v430) --[[ Line: 1530 ]] --[[ Name: JUMPIFLE ]]
		local l_aux_2 = v430.aux;
		assert(l_aux_2);
		return {
			bit32.band(bit32.rshift(v430.inst, 8), 255), 
			l_aux_2
		}, {};
	end, 
	JUMPIFLT = function(v432) --[[ Line: 1535 ]] --[[ Name: JUMPIFLT ]]
		local l_aux_3 = v432.aux;
		assert(l_aux_3);
		return {
			bit32.band(bit32.rshift(v432.inst, 8), 255), 
			l_aux_3
		}, {};
	end, 
	JUMPIFNOTEQ = function(v434) --[[ Line: 1540 ]] --[[ Name: JUMPIFNOTEQ ]]
		local l_aux_4 = v434.aux;
		assert(l_aux_4);
		return {
			bit32.band(bit32.rshift(v434.inst, 8), 255), 
			l_aux_4
		}, {};
	end, 
	JUMPIFNOTLE = function(v436) --[[ Line: 1545 ]] --[[ Name: JUMPIFNOTLE ]]
		local l_aux_5 = v436.aux;
		assert(l_aux_5);
		return {
			bit32.band(bit32.rshift(v436.inst, 8), 255), 
			l_aux_5
		}, {};
	end, 
	JUMPIFNOTLT = function(v438) --[[ Line: 1550 ]] --[[ Name: JUMPIFNOTLT ]]
		local l_aux_6 = v438.aux;
		assert(l_aux_6);
		return {
			bit32.band(bit32.rshift(v438.inst, 8), 255), 
			l_aux_6
		}, {};
	end, 
	JUMPXEQKNIL = function(v440) --[[ Line: 1555 ]] --[[ Name: JUMPXEQKNIL ]]
		return {
			(bit32.band(bit32.rshift(v440.inst, 8), 255))
		}, {};
	end, 
	JUMPXEQKB = function(v441) --[[ Line: 1558 ]] --[[ Name: JUMPXEQKB ]]
		return {
			(bit32.band(bit32.rshift(v441.inst, 8), 255))
		}, {};
	end, 
	JUMPXEQKN = function(v442) --[[ Line: 1561 ]] --[[ Name: JUMPXEQKN ]]
		return {
			(bit32.band(bit32.rshift(v442.inst, 8), 255))
		}, {};
	end, 
	JUMPXEQKS = function(v443) --[[ Line: 1564 ]] --[[ Name: JUMPXEQKS ]]
		return {
			(bit32.band(bit32.rshift(v443.inst, 8), 255))
		}, {};
	end, 
	FORNPREP = function(v444) --[[ Line: 1567 ]] --[[ Name: FORNPREP ]]
		local v445 = bit32.band(bit32.rshift(v444.inst, 8), 255);
		return {
			v445, 
			v445 + 1, 
			v445 + 2
		}, {};
	end, 
	FORNLOOP = function(v446) --[[ Line: 1572 ]] --[[ Name: FORNLOOP ]]
		local _ = bit32.band(bit32.rshift(v446.inst, 8), 255);
		return {}, {};
	end, 
	FORGPREP = function(v448) --[[ Line: 1577 ]] --[[ Name: FORGPREP ]]
		local v449 = bit32.band(bit32.rshift(v448.inst, 8), 255);
		return {
			v449, 
			v449 + 1, 
			v449 + 2
		}, {};
	end, 
	FORGPREP_NEXT = function(v450) --[[ Line: 1582 ]] --[[ Name: FORGPREP_NEXT ]]
		local v451 = bit32.band(bit32.rshift(v450.inst, 8), 255);
		return {
			v451, 
			v451 + 1, 
			v451 + 2
		}, {};
	end, 
	FORGPREP_INEXT = function(v452) --[[ Line: 1587 ]] --[[ Name: FORGPREP_INEXT ]]
		local v453 = bit32.band(bit32.rshift(v452.inst, 8), 255);
		return {
			v453, 
			v453 + 1, 
			v453 + 2
		}, {};
	end, 
	FORGLOOP = function(v454) --[[ Line: 1592 ]] --[[ Name: FORGLOOP ]]
		local _ = bit32.band(bit32.rshift(v454.inst, 8), 255) + 2;
		local v456 = {};
		local v457 = 1;
		local l_aux_7 = v454.aux;
		assert(l_aux_7);
		for _ = v457, bit32.band(l_aux_7, 255) do

		end;
		return {}, v456;
	end
};
local l_v460_0 = v460 --[[ copy: 86 -> 108 ]];
do
	local l_v302_0 = v302;
	v301 = function(v463) --[[ Line: 1602 ]]
		-- upvalues: l_v460_0 (copy), l_v302_0 (ref)
		local l_opname_0 = v463.opname;
		local v465 = l_v460_0[l_opname_0];
		if v465 then
			local v466, v467, v468 = v465(v463);
			local v469 = -1;
			for _, v471 in ipairs(v467) do
				if v469 < v471 then
					v469 = v471;
				end;
			end;
			if v469 >= 0 and l_opname_0 ~= "NAMECALL" then
				l_v302_0 = v469;
			end;
			return v466, v467, v468;
		else
			error((("Unknown opname %*"):format(l_opname_0)));
			return;
		end;
	end;
end;
v302 = function(v472) --[[ Line: 1622 ]] --[[ Name: is_unprintable ]]
	local v473 = true;
	if v472 >= 32 then
		v473 = v472 > 126;
	end;
	return v473;
end;
v304 = function(v474) --[[ Line: 1625 ]] --[[ Name: escape_byte ]]
	-- upvalues: v64 (copy)
	if v474 == 11 then
		return "\\v";
	elseif v474 == 10 then
		return "\\n";
	elseif v474 == 9 then
		return "\\t";
	elseif v474 == 7 then
		return "\\a";
	elseif v474 == 13 then
		return "\\r";
	elseif v474 == 12 then
		return "\\f";
	elseif v474 == 8 then
		return "\\b";
	else
		return "\\x" .. v64[v474];
	end;
end;
v460 = function(v475, v476, v477) --[[ Line: 1645 ]] --[[ Name: fmt_str_for_output ]]
	-- upvalues: v304 (copy), v69 (copy)
	if #v476 == 1 then
		local v478 = (not (v475 ~= "single char, single quotes") or v475 == "single quotes") and "'" or "\"";
		local v479 = string.byte(v476);
		local v480 = true;
		if v479 >= 32 then
			v480 = v479 > 126;
		end;
		if v480 then
			if v477 then
				return (v304(v479));
			else
				return v478 .. v304(v479) .. v478;
			end;
		elseif v476 == v478 then
			if v478 == "'" then
				if v477 then
					return "'";
				else
					return "\"'\"";
				end;
			elseif v477 then
				return "\"";
			else
				return "'\"'";
			end;
		elseif v476 == "\\" then
			if v477 then
				return "\\\\";
			elseif v478 == "'" then
				return "'\\\\'";
			else
				return "\"\\\\\"";
			end;
		elseif v477 then
			if v476 == "`" then
				return "\\`";
			else
				return v476;
			end;
		else
			return v478 .. v476 .. v478;
		end;
	elseif #v476 == 0 then
		if v475 == "double quotes" or v475 == "single char, single quotes" then
			if v477 then
				return "";
			else
				return "\"\"";
			end;
		elseif v477 then
			return "";
		else
			return "''";
		end;
	else
		local v481 = #v476;
		local v482 = false;
		local v483 = utf8.len(v476);
		if v483 then
			v482 = true;
			v481 = v483;
		end;
		local v484 = 0;
		local v485 = 0;
		local v486 = 0;
		local v487 = 0;
		local v488 = 0;
		local v489 = 0;
		local v490 = false;
		local v491 = buffer.fromstring(v476);
		if not v482 then
			for v492 = 0, v481 - 1 do
				local v493 = buffer.readu8(v491, v492);
				if v490 then
					if v493 == 10 then
						v484 = v484 + 1;
					elseif v493 == 9 then
						v485 = v485 + 1;
						v486 = v486 + 1;
					else
						local v494 = true;
						if v493 >= 32 then
							v494 = v493 > 126;
						end;
						if v494 then
							v488 = v488 + 1;
							if v493 == 0 then
								v489 = v489 + 1;
							end;
							v490 = false;
						else
							v487 = v487 + 1;
							v490 = false;
						end;
					end;
				elseif v493 == 10 then
					v484 = v484 + 1;
					v490 = true;
				elseif v493 == 9 then
					v485 = v485 + 1;
					if v490 then
						v486 = v486 + 1;
					end;
				else
					local v495 = true;
					if v493 >= 32 then
						v495 = v493 > 126;
					end;
					if v495 then
						v488 = v488 + 1;
						if v493 == 0 then
							v489 = v489 + 1;
						end;
					else
						v487 = v487 + 1;
					end;
				end;
			end;
		end;
		if v488 / v481 > 0.4 then
			local v496 = (not (v475 ~= "single char, double quotes") or v475 == "single quotes") and 39 or 34;
			local v497 = 0;
			local v498 = buffer.create(if v477 then buffer.len(v491) * 4 else buffer.len(v491) * 4 + 2);
			if not v477 then
				buffer.writeu8(v498, 0, v496);
				v497 = v497 + 1;
			end;
			for v499 = 0, v481 - 1 do
				buffer.writeu32(v498, v497, v69[buffer.readu8(v491, v499)]);
				v497 = v497 + 4;
			end;
			if not v477 then
				buffer.writeu8(v498, v497, v496);
			end;
			return buffer.tostring(v498);
		else
			local v500 = (not (v475 ~= "single char, double quotes") or v475 == "single quotes") and "'" or "\"";
			local v501 = nil;
			local v502 = true;
			if v477 then
				v501 = "";
			elseif v484 > 1 then
				v502 = false;
				v501 = "[[";
			else
				v501 = v500;
			end;
			local v503 = nil;
			if v501 == "[[" then
				local v504 = false;
				repeat
					v503 = string.gsub(v501, "%[", "]");
					v504 = string.match(v476, v503) and true;
					if v504 then
						v501 = "[" .. string.rep("=", #v501 - 1) .. "[";
					end;
				until not v504;
			else
				v503 = v501;
			end;
			local v505 = {
				v501
			};
			local v506 = "";
			local function v510(v507) --[[ Line: 1808 ]] --[[ Name: special_byte_routine ]]
				-- upvalues: v502 (ref), v506 (ref), v304 (ref), v501 (ref), v500 (copy), v477 (copy)
				local v508 = false;
				if v502 then
					local v509 = true;
					if v507 >= 32 then
						v509 = v507 > 126;
					end;
					if v509 then
						v506 = v506 .. v304(v507);
						v508 = true;
					end;
				end;
				if not v508 then
					if v501 == v500 and v507 == string.byte(v500) then
						v506 = v506 .. "\\\"";
					elseif v477 and v507 == 96 then
						v506 = v506 .. "\\`";
					elseif v502 and v507 == 92 then
						v506 = v506 .. "\\\\";
					else
						return false;
					end;
				end;
				v508 = false;
				return true;
			end;
			local function _() --[[ Line: 1824 ]] --[[ Name: post_append_routine ]]
				-- upvalues: v506 (ref), v505 (copy)
				if #v506 > 18 then
					table.insert(v505, v506);
					v506 = "";
				end;
			end;
			if v482 then
				for _, v513 in utf8.codes(v476) do
					if v513 > 255 or not v510(v513) then
						v506 = v506 .. utf8.char(v513);
					end;
					if #v506 > 18 then
						table.insert(v505, v506);
						v506 = "";
					end;
				end;
			else
				for v514 = 0, v481 - 1 do
					local v515 = buffer.readu8(v491, v514);
					if not v510(v515) then
						v506 = v506 .. string.char(v515);
					end;
					if #v506 > 18 then
						table.insert(v505, v506);
						v506 = "";
					end;
				end;
			end;
			if #v506 > 0 then
				table.insert(v505, v506);
			end;
			table.insert(v505, v503);
			local v516 = 0;
			for _, v518 in ipairs(v505) do
				v516 = v516 + #v518;
			end;
			local v519 = buffer.create(v516);
			local v520 = 0;
			for _, v522 in ipairs(v505) do
				buffer.writestring(v519, v520, v522);
				v520 = v520 + #v522;
			end;
			return buffer.tostring(v519);
		end;
	end;
end;
local v523 = nil;
local function v527(v524, v525) --[[ Line: 1866 ]] --[[ Name: fmt_num_for_output ]]
	-- upvalues: v523 (ref)
	local v526 = math.abs(v524);
	if v526 == 3.141592653589793 then
		if v524 == 3.141592653589793 then
			return "math.pi";
		else
			return "(-math.pi)";
		end;
	elseif v526 == 1.5707963267948966 then
		if v524 == 1.5707963267948966 then
			return "(math.pi/2)";
		else
			return "(-math.pi/2)";
		end;
	elseif v526 == 6.283185307179586 then
		if v524 == 1.5707963267948966 then
			return "(math.pi*2)";
		else
			return "(-math.pi*2)";
		end;
	elseif v526 == 1e999 then
		if v524 == 1e999 then
			return "math.huge";
		else
			return "(-math.huge)";
		end;
	elseif v526 == 0.016666666666666666 then
		if v524 == 0.016666666666666666 then
			return "(1/60)";
		else
			return "(-1/60)";
		end;
	elseif v524 ~= v524 then
		if v523 then
			return "tonumber(\"nan\")";
		else
			return "(0/0)";
		end;
	elseif v525 then
		return (string.sub(tostring(v524), 1, 7));
	else
		return (tostring(v524));
	end;
end;
local v528 = {};
local v529 = {};
for v530 = 97, 122 do
	local v531 = string.char(v530);
	v528[v531] = true;
	v528[string.upper(v531)] = true;
	v529[string.byte(v531)] = true;
	v529[string.byte(string.upper(v531))] = true;
end;
v528._ = true;
v529[95] = true;
local v532 = table.clone(v528);
local v533 = table.clone(v529);
for v534 = 48, 57 do
	v532[string.char(v534)] = true;
	v533[v534] = true;
end;
local _ = {
	[" "] = true, 
	["\t"] = true
};
local function v538(v536) --[[ Line: 1934 ]] --[[ Name: is_valid_name ]]
	-- upvalues: v528 (copy), v532 (copy), v217 (copy)
	if #v536 == 0 then
		return false;
	elseif not v528[string.sub(v536, 1, 1)] then
		return false;
	else
		for v537 = 2, #v536 do
			if not v532[string.sub(v536, v537, v537)] then
				return false;
			end;
		end;
		if v217[v536] then
			return false;
		else
			return true;
		end;
	end;
end;
local function v545(v539, v540, v541) --[[ Line: 1951 ]] --[[ Name: to_valid_name ]]
	-- upvalues: v529 (copy), v533 (copy), v217 (copy)
	if #v539 == 0 then
		return "";
	else
		local v542 = buffer.fromstring(v539);
		if not v540 and not v529[buffer.readu8(v542, 0)] then
			buffer.writeu8(v542, 0, 95);
		end;
		for v543 = 1, buffer.len(v542) - 1 do
			if not v533[buffer.readu8(v542, v543)] then
				buffer.writeu8(v542, v543, 95);
			end;
		end;
		local v544 = buffer.tostring(v542);
		if not v541 and v217[v544] then
			return v544 .. "_";
		else
			return v544;
		end;
	end;
end;
local function v550(v546, v547, v548) --[[ Line: 1971 ]] --[[ Name: lbc_const_to_string ]]
	-- upvalues: v527 (copy), v460 (copy)
	if not v546 then
		return "<INVALIDCONSTANT>";
	else
		local l_type_0 = v546.type;
		if l_type_0 == 2 then
			return (v527(v546.value));
		elseif l_type_0 == 3 then
			return v460(v547 or "double quotes", v546.value, v548);
		elseif l_type_0 == 7 then
			return "Vector3.new(" .. v527(v546.value.X, true) .. ", " .. v527(v546.value.Y, true) .. ", " .. v527(v546.value.Z, true) .. ")";
		elseif l_type_0 == 4 then
			return "<IMPORT>";
		elseif l_type_0 == 0 then
			return "nil";
		elseif l_type_0 == 1 then
			if v546.value then
				return "true";
			else
				return "false";
			end;
		else
			error((("Unknown const type %*"):format(l_type_0)));
			return;
		end;
	end;
end;
local v551 = nil;
local function v1123(v552) --[[ Line: 1994 ]] --[[ Name: disassemble_bytecode ]]
	-- upvalues: v551 (ref), v296 (copy), l_clock_0 (copy), v27 (ref), v523 (ref), v64 (copy), v550 (copy), v538 (copy), v44 (copy), v181 (ref), v24 (copy), v220 (copy), v180 (ref), v16 (ref), v17 (copy)
	v551 = 0;
	local v553 = nil;
	v553 = if type(v552) == "buffer" then v552 else buffer.fromstring(v552);
	local v554, v555, v556, v557 = v296(v553);
	local v558 = l_clock_0();
	v27 = v558;
	local function _(v559) --[[ Line: 2006 ]] --[[ Name: indent ]]
		return string.rep("\t", #v559 + 1);
	end;
	local v561 = {};
	local v562 = "";
	local v563 = 0;
	local function _() --[[ Line: 2012 ]] --[[ Name: counter_get ]]
		-- upvalues: v563 (ref)
		v563 = v563 + 1;
		return v563;
	end;
	v523 = true;
	local function v565(v566, v567) --[[ Line: 2017 ]] --[[ Name: disasm_proto ]]
		-- upvalues: v562 (ref), v561 (copy), v554 (copy), v64 (ref), v550 (ref), v538 (ref), v44 (ref), v563 (ref), v565 (copy), v181 (ref), v555 (copy), v24 (ref), v220 (ref), v180 (ref), v16 (ref), v17 (ref), v551 (ref)
		if not v566 then
			v562 = v562 .. "--[[INVALIDPROTO]]";
			table.insert(v561, v562);
			v562 = "";
			return;
		else
			local v568 = v566 == v554;
			local v569 = buffer.create(8);
			local l_constants_0 = v566.constants;
			local l_protos_0 = v566.protos;
			if not v568 then
				table.insert(v561, v567 .. "local function " .. v566.debug_name .. "() -- Line " .. v566.line_defined .. "\n");
			end;
			local _ = string.rep("\t", #v567 + 1);
			local v573 = 0;
			local v574 = 0;
			local v575 = 0;
			local l_code_0 = v566.code;
			local v577 = #l_code_0;
			local function _() --[[ Line: 2031 ]] --[[ Name: get_aux ]]
				-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy)
				local v578 = l_code_0[v574];
				if v574 == v577 then
					error("Corrupted aux");
				end;
				v574 = v574 + 1;
				return v578;
			end;
			local function v590(v580, v581) --[[ Line: 2040 ]] --[[ Name: set_output ]]
				-- upvalues: v562 (ref), l_code_0 (copy), v573 (ref), v64 (ref), v567 (ref)
				if v581 then
					local l_v562_0 = v562;
					local v583 = " [0x";
					local v584 = l_code_0[v573];
					local v585 = l_v562_0 .. v583 .. (v64[bit32.rshift(v584, 24)] .. v64[bit32.band(bit32.rrotate(v584, 16), 255)] .. v64[bit32.band(bit32.rrotate(v584, 8), 255)] .. v64[bit32.band(v584, 255)]) .. "] ";
					v585 = (v585 .. string.rep(" ", #v567 + 28 - #v585) .. " ") .. v580;
					l_v562_0 = string.rep(" ", #v567 + 62 - #v585) .. " ; ";
					v583 = buffer.create(#v585 + #l_v562_0 + #v581 + 1);
					buffer.writestring(v583, 0, v585);
					local v586 = #v585;
					buffer.writestring(v583, v586, l_v562_0);
					v586 = v586 + #l_v562_0;
					buffer.writestring(v583, v586, v581);
					buffer.writeu8(v583, v586 + #v581, 10);
					v562 = buffer.tostring(v583);
					return;
				else
					local l_v562_1 = v562;
					local v588 = "[0x";
					local v589 = l_code_0[v573];
					v562 = l_v562_1 .. v588 .. (v64[bit32.rshift(v589, 24)] .. v64[bit32.band(bit32.rrotate(v589, 16), 255)] .. v64[bit32.band(bit32.rrotate(v589, 8), 255)] .. v64[bit32.band(v589, 255)]) .. "] " .. v580 .. "\n";
					return;
				end;
			end;
			local function _() --[[ Line: 2061 ]] --[[ Name: reset_output ]]
				-- upvalues: v562 (ref), v567 (ref), v574 (ref), v575 (ref)
				v562 = v567 .. "[" .. v574 - 1 .. "] #" .. v575;
			end;
			local v592 = {};
			local function _(v593, v594) --[[ Line: 2065 ]] --[[ Name: add_ref ]]
				-- upvalues: v592 (copy), v574 (ref)
				local v595 = v592[v593];
				if v595 then
					table.insert(v595, v574 - v594);
					return;
				else
					v592[v593] = {
						v574 - v594
					};
					return;
				end;
			end;
			local v1103 = {
				NOP = function(_, _) --[[ Line: 2074 ]] --[[ Name: NOP ]]
					-- upvalues: v590 (copy)
					v590("NOP", "-- Do nothing");
				end, 
				BREAK = function(_, _) --[[ Line: 2078 ]] --[[ Name: BREAK ]]
					-- upvalues: v590 (copy)
					v590("BREAK", "-- Stop execution for debugger");
				end, 
				LOADNIL = function(v601, _) --[[ Line: 2082 ]] --[[ Name: LOADNIL ]]
					-- upvalues: v590 (copy)
					local v603 = bit32.band(bit32.rshift(v601, 8), 255);
					v590("LOADNIL " .. v603, "var" .. v603 .. " = nil");
				end, 
				LOADB = function(v604, _) --[[ Line: 2087 ]] --[[ Name: LOADB ]]
					-- upvalues: v590 (copy), v574 (ref), v592 (copy)
					local v606 = bit32.band(bit32.rshift(v604, 8), 255);
					local v607 = bit32.band(bit32.rshift(v604, 16), 255);
					local v608 = bit32.band(bit32.rshift(v604, 24), 255);
					if v608 == 0 then
						v590("LOADB " .. v606 .. ", " .. v607 .. ", " .. v608, "var" .. v606 .. " = " .. (v607 > 0 and "true" or "false"));
						return;
					else
						local v609 = v574 + v608;
						local v610 = v592[v609];
						if v610 then
							table.insert(v610, v574 - 1);
						else
							v592[v609] = {
								v574 - 1
							};
						end;
						v590("LOADB " .. v606 .. ", " .. v607 .. ", " .. v608, "var" .. v606 .. " = " .. (v607 > 0 and "true" or "false") .. " -- goto [" .. v609 .. "]");
						return;
					end;
				end, 
				LOADN = function(v611, _) --[[ Line: 2101 ]] --[[ Name: LOADN ]]
					-- upvalues: v569 (copy), v590 (copy)
					local v613 = bit32.band(bit32.rshift(v611, 8), 255);
					local v614 = bit32.band(bit32.rshift(v611, 16), 65535);
					buffer.writeu32(v569, 0, v614);
					local v615 = buffer.readi32(v569, 0);
					v590("LOADN " .. v613 .. ", " .. v615, "var" .. v613 .. " = " .. v615);
				end, 
				LOADK = function(v616, _) --[[ Line: 2109 ]] --[[ Name: LOADK ]]
					-- upvalues: v590 (copy), v550 (ref), l_constants_0 (copy)
					local v618 = bit32.band(bit32.rshift(v616, 8), 255);
					local v619 = bit32.band(bit32.rshift(v616, 16), 65535);
					v590("LOADK " .. v618 .. ", " .. v619, "var" .. v618 .. " = " .. v550(l_constants_0[v619]));
				end, 
				MOVE = function(v620, _) --[[ Line: 2115 ]] --[[ Name: MOVE ]]
					-- upvalues: v590 (copy)
					local v622 = bit32.band(bit32.rshift(v620, 8), 255);
					local v623 = bit32.band(bit32.rshift(v620, 16), 255);
					v590("MOVE " .. v622 .. ", " .. v623, "var" .. v622 .. " = var" .. v623);
				end, 
				GETGLOBAL = function(v624, _) --[[ Line: 2121 ]] --[[ Name: GETGLOBAL ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), l_constants_0 (copy), v538 (ref), v590 (copy), v550 (ref)
					local v626 = bit32.band(bit32.rshift(v624, 8), 255);
					local v627 = bit32.band(bit32.rshift(v624, 24), 255);
					local v628 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v628_0 = v628;
					v628 = l_constants_0[l_v628_0];
					if v628.type == 3 and v538(v628.value) and string.sub(v628.value, 1, 3) ~= "var" then
						v590("GETGLOBAL " .. v626 .. ", " .. v627 .. " [" .. l_v628_0 .. "]", "var" .. v626 .. " = " .. v628.value);
						return;
					else
						v590("GETGLOBAL " .. v626 .. ", " .. v627 .. " [" .. l_v628_0 .. "]", "var" .. v626 .. " = getfenv()[" .. v550(v628) .. "]");
						return;
					end;
				end, 
				SETGLOBAL = function(v630, _) --[[ Line: 2134 ]] --[[ Name: SETGLOBAL ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), l_constants_0 (copy), v538 (ref), v590 (copy), v550 (ref)
					local v632 = bit32.band(bit32.rshift(v630, 8), 255);
					local v633 = bit32.band(bit32.rshift(v630, 24), 255);
					local v634 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v634_0 = v634;
					v634 = l_constants_0[l_v634_0];
					if v634.type == 3 and v538(v634.value) and string.sub(v634.value, 1, 3) ~= "var" then
						v590("SETGLOBAL " .. v632 .. ", " .. v633 .. " [" .. l_v634_0 .. "]", v634.value .. " = var" .. v632);
						return;
					else
						v590("SETGLOBAL " .. v632 .. ", " .. v633 .. " [" .. l_v634_0 .. "]", "getfenv()[" .. v550(v634) .. "] = var" .. v632);
						return;
					end;
				end, 
				GETUPVAL = function(v636, _) --[[ Line: 2147 ]] --[[ Name: GETUPVAL ]]
					-- upvalues: v590 (copy)
					local v638 = bit32.band(bit32.rshift(v636, 8), 255);
					local v639 = bit32.band(bit32.rshift(v636, 16), 255);
					v590("GETUPVAL " .. v638 .. ", " .. v639, "var" .. v638 .. " = " .. "up" .. v639);
				end, 
				SETUPVAL = function(v640, _) --[[ Line: 2153 ]] --[[ Name: SETUPVAL ]]
					-- upvalues: v590 (copy)
					local v642 = bit32.band(bit32.rshift(v640, 8), 255);
					local v643 = bit32.band(bit32.rshift(v640, 16), 255);
					v590("SETUPVAL " .. v642 .. ", " .. v643, "up" .. v643 .. " = var" .. v642);
				end, 
				CLOSEUPVALS = function(v644, _) --[[ Line: 2159 ]] --[[ Name: CLOSEUPVALS ]]
					-- upvalues: v590 (copy)
					local v646 = bit32.band(bit32.rshift(v644, 8), 255);
					v590("CLOSEUPVALS " .. v646, "move_upvalues_to_heap(var" .. v646 .. "->...)");
				end, 
				GETIMPORT = function(v647, _) --[[ Line: 2164 ]] --[[ Name: GETIMPORT ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), l_constants_0 (copy), v538 (ref), v550 (ref), v590 (copy), v64 (ref)
					local v649 = bit32.band(bit32.rshift(v647, 8), 255);
					local v650 = bit32.band(bit32.rshift(v647, 16), 65535);
					local v651 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v651_0 = v651;
					v651 = bit32.rrotate(bit32.band(l_v651_0, 3221225472), 30);
					local v653 = l_constants_0[bit32.rrotate(bit32.band(l_v651_0, 1072693248), 20)];
					if v651 == 2 then
						local v654 = l_constants_0[bit32.rrotate(bit32.band(l_v651_0, 1047552), 10)];
						local v655 = nil;
						v655 = if v653.type == 3 and v538(v653.value) and string.sub(v653.value, 1, 3) ~= "var" then v653.value else "getfenv()[" .. v550(v653) .. "]";
						v655 = if v654.type == 3 and v538(v654.value) and string.sub(v654.value, 1, 3) ~= "var" then v655 .. "." .. v654.value else v655 .. "[" .. v550(v654) .. "]";
						v590("GETIMPORT " .. v649 .. ", " .. v650 .. " [0x" .. (v64[bit32.rshift(l_v651_0, 24)] .. v64[bit32.band(bit32.rrotate(l_v651_0, 16), 255)] .. v64[bit32.band(bit32.rrotate(l_v651_0, 8), 255)] .. v64[bit32.band(l_v651_0, 255)]) .. "]", "var" .. v649 .. " = " .. v655);
						return;
					elseif v651 == 3 then
						local v656 = l_constants_0[bit32.rrotate(bit32.band(l_v651_0, 1047552), 10)];
						local v657 = l_constants_0[bit32.band(l_v651_0, 1023)];
						local v658 = nil;
						v658 = if v653.type == 3 and v538(v653.value) and string.sub(v653.value, 1, 3) ~= "var" then v653.value else "getfenv()[" .. v550(v653) .. "]";
						v658 = if v656.type == 3 and v538(v656.value) and string.sub(v656.value, 1, 3) ~= "var" then v658 .. "." .. v656.value else v658 .. "[" .. v550(v656) .. "]";
						v658 = if v657.type == 3 and v538(v657.value) and string.sub(v657.value, 1, 3) ~= "var" then v658 .. "." .. v657.value else v658 .. "[" .. v550(v657) .. "]";
						v590("GETIMPORT " .. v649 .. ", " .. v650 .. " [0x" .. (v64[bit32.rshift(l_v651_0, 24)] .. v64[bit32.band(bit32.rrotate(l_v651_0, 16), 255)] .. v64[bit32.band(bit32.rrotate(l_v651_0, 8), 255)] .. v64[bit32.band(l_v651_0, 255)]) .. "]", "var" .. v649 .. " = " .. v658);
						return;
					elseif v653.type == 3 and v538(v653.value) and string.sub(v653.value, 1, 3) ~= "var" then
						v590("GETIMPORT " .. v649 .. ", " .. v650 .. " [0x" .. (v64[bit32.rshift(l_v651_0, 24)] .. v64[bit32.band(bit32.rrotate(l_v651_0, 16), 255)] .. v64[bit32.band(bit32.rrotate(l_v651_0, 8), 255)] .. v64[bit32.band(l_v651_0, 255)]) .. "]", "var" .. v649 .. " = " .. v653.value);
						return;
					else
						v590("GETIMPORT " .. v649 .. ", " .. v650 .. " [0x" .. (v64[bit32.rshift(l_v651_0, 24)] .. v64[bit32.band(bit32.rrotate(l_v651_0, 16), 255)] .. v64[bit32.band(bit32.rrotate(l_v651_0, 8), 255)] .. v64[bit32.band(l_v651_0, 255)]) .. "]", "var" .. v649 .. " = getfenv()[" .. v550(v653) .. "]");
						return;
					end;
				end, 
				GETTABLE = function(v659, _) --[[ Line: 2216 ]] --[[ Name: GETTABLE ]]
					-- upvalues: v590 (copy)
					local v661 = bit32.band(bit32.rshift(v659, 8), 255);
					local v662 = bit32.band(bit32.rshift(v659, 16), 255);
					local v663 = bit32.band(bit32.rshift(v659, 24), 255);
					v590("GETTABLE " .. v661 .. ", " .. v662 .. ", " .. v663, "var" .. v661 .. " = var" .. v662 .. "[var" .. v663 .. "]");
				end, 
				SETTABLE = function(v664, _) --[[ Line: 2223 ]] --[[ Name: SETTABLE ]]
					-- upvalues: v590 (copy)
					local v666 = bit32.band(bit32.rshift(v664, 8), 255);
					local v667 = bit32.band(bit32.rshift(v664, 16), 255);
					local v668 = bit32.band(bit32.rshift(v664, 24), 255);
					v590("SETTABLE " .. v666 .. ", " .. v667 .. ", " .. v668, "var" .. v667 .. "[var" .. v668 .. "] = var" .. v666);
				end, 
				GETTABLEKS = function(v669, _) --[[ Line: 2230 ]] --[[ Name: GETTABLEKS ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), l_constants_0 (copy), v538 (ref), v590 (copy), v550 (ref)
					local v671 = bit32.band(bit32.rshift(v669, 8), 255);
					local v672 = bit32.band(bit32.rshift(v669, 16), 255);
					local v673 = bit32.band(bit32.rshift(v669, 24), 255);
					local v674 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v674_0 = v674;
					v674 = l_constants_0[l_v674_0];
					if v674.type == 3 and v538(v674.value) then
						v590("GETTABLEKS " .. v671 .. ", " .. v672 .. ", " .. v673 .. " [" .. l_v674_0 .. "]", "var" .. v671 .. " = var" .. v672 .. "." .. v674.value);
						return;
					else
						v590("GETTABLEKS " .. v671 .. ", " .. v672 .. ", " .. v673 .. " [" .. l_v674_0 .. "]", "var" .. v671 .. " = var" .. v672 .. "[" .. v550(v674) .. "]");
						return;
					end;
				end, 
				SETTABLEKS = function(v676, _) --[[ Line: 2244 ]] --[[ Name: SETTABLEKS ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), l_constants_0 (copy), v538 (ref), v590 (copy), v550 (ref)
					local v678 = bit32.band(bit32.rshift(v676, 8), 255);
					local v679 = bit32.band(bit32.rshift(v676, 16), 255);
					local v680 = bit32.band(bit32.rshift(v676, 24), 255);
					local v681 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v681_0 = v681;
					v681 = l_constants_0[l_v681_0];
					if v681.type == 3 and v538(v681.value) then
						v590("SETTABLEKS " .. v678 .. ", " .. v679 .. ", " .. v680 .. " [" .. l_v681_0 .. "]", "var" .. v679 .. "." .. v681.value .. " = var" .. v678);
						return;
					else
						v590("SETTABLEKS " .. v678 .. ", " .. v679 .. ", " .. v680 .. " [" .. l_v681_0 .. "]", "var" .. v679 .. "[" .. v550(v681) .. "] = var" .. v678);
						return;
					end;
				end, 
				GETTABLEN = function(v683, _) --[[ Line: 2258 ]] --[[ Name: GETTABLEN ]]
					-- upvalues: v590 (copy)
					local v685 = bit32.band(bit32.rshift(v683, 8), 255);
					local v686 = bit32.band(bit32.rshift(v683, 16), 255);
					local v687 = bit32.band(bit32.rshift(v683, 24), 255);
					v590("GETTABLEN " .. v685 .. ", " .. v686 .. ", " .. v687, "var" .. v685 .. " = var" .. v686 .. "[" .. v687 .. "]");
				end, 
				SETTABLEN = function(v688, _) --[[ Line: 2265 ]] --[[ Name: SETTABLEN ]]
					-- upvalues: v590 (copy)
					local v690 = bit32.band(bit32.rshift(v688, 8), 255);
					local v691 = bit32.band(bit32.rshift(v688, 16), 255);
					local v692 = bit32.band(bit32.rshift(v688, 24), 255);
					v590("SETTABLEN " .. v690 .. ", " .. v691 .. ", " .. v692, "var" .. v691 .. "[" .. v692 .. "] = var" .. v690);
				end, 
				NAMECALL = function(v693, _) --[[ Line: 2272 ]] --[[ Name: NAMECALL ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), l_constants_0 (copy), v538 (ref), v590 (copy), v550 (ref)
					local v695 = bit32.band(bit32.rshift(v693, 8), 255);
					local v696 = bit32.band(bit32.rshift(v693, 16), 255);
					local v697 = bit32.band(bit32.rshift(v693, 24), 255);
					local v698 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v698_0 = v698;
					v698 = l_constants_0[l_v698_0];
					if v698.type == 3 and v538(v698.value) then
						v590("NAMECALL " .. v695 .. ", " .. v696 .. ", " .. v697 .. " [" .. l_v698_0 .. "]", "var" .. v695 + 1 .. " = var" .. v696 .. "; var" .. v695 .. " = var" .. v696 .. "." .. v698.value .. " -- Invokes __namecall");
						return;
					else
						v590("NAMECALL " .. v695 .. ", " .. v696 .. ", " .. v697 .. " [" .. l_v698_0 .. "]", "var" .. v695 + 1 .. " = var" .. v696 .. "; var" .. v695 .. " = var" .. v696 .. "[" .. v550(v698) .. "] -- Invokes __namecall");
						return;
					end;
				end, 
				CALL = function(v700, _) --[[ Line: 2286 ]] --[[ Name: CALL ]]
					-- upvalues: v590 (copy)
					local v702 = bit32.band(bit32.rshift(v700, 8), 255);
					local v703 = bit32.band(bit32.rshift(v700, 16), 255);
					local v704 = bit32.band(bit32.rshift(v700, 24), 255);
					local v705 = v703 - 1;
					local v706 = v704 - 1;
					local v707 = nil;
					if v705 == -1 then
						v707 = {
							"var" .. v702 + 1 .. "->(top)"
						};
					else
						v707 = {};
						for v708 = v702 + 1, v702 + v705 do
							table.insert(v707, "var" .. v708);
						end;
					end;
					if v706 == 0 then
						v590("CALL " .. v702 .. ", " .. v703 .. ", " .. v704, "var" .. v702 .. "(" .. table.concat(v707, ", ") .. ")");
						return;
					else
						local v709 = nil;
						if v706 == -1 then
							v709 = {
								"var" .. v702 .. "->(top)"
							};
						else
							v709 = {};
							for v710 = v702, v702 + v706 - 1 do
								table.insert(v709, "var" .. v710);
							end;
						end;
						v590("CALL " .. v702 .. ", " .. v703 .. ", " .. v704, table.concat(v709, ", ") .. " = var" .. v702 .. "(" .. table.concat(v707, ", ") .. ")");
						return;
					end;
				end, 
				RETURN = function(v711, _) --[[ Line: 2318 ]] --[[ Name: RETURN ]]
					-- upvalues: v590 (copy)
					local v713 = bit32.band(bit32.rshift(v711, 8), 255);
					local v714 = bit32.band(bit32.rshift(v711, 16), 255);
					local v715 = v714 - 1;
					if v715 == 0 then
						v590("RETURN " .. v713 .. ", " .. v714, "return");
						return;
					elseif v715 == -1 then
						v590("RETURN " .. v713 .. ", " .. v714, "return var" .. v713 .. "->(top)");
						return;
					else
						v590("RETURN " .. v713 .. ", " .. v714, "return var" .. v713 .. "->var" .. v713 + v715 - 1);
						return;
					end;
				end, 
				JUMP = function(v716, _) --[[ Line: 2333 ]] --[[ Name: JUMP ]]
					-- upvalues: v44 (ref), v574 (ref), v592 (copy), v590 (copy)
					buffer.writeu16(v44, 0, (bit32.band(bit32.rshift(v716, 16), 65535)));
					local v718 = buffer.readi16(v44, 0);
					local v719 = v574 + v718;
					local v720 = v592[v719];
					if v720 then
						table.insert(v720, v574 - 1);
					else
						v592[v719] = {
							v574 - 1
						};
					end;
					v590("JUMP " .. v718, "-- goto [" .. v719 .. "]");
				end, 
				JUMPBACK = function(v721, _) --[[ Line: 2340 ]] --[[ Name: JUMPBACK ]]
					-- upvalues: v44 (ref), v574 (ref), v592 (copy), v590 (copy)
					buffer.writeu16(v44, 0, (bit32.band(bit32.rshift(v721, 16), 65535)));
					local v723 = buffer.readi16(v44, 0);
					local v724 = v574 + v723;
					local v725 = v592[v724];
					if v725 then
						table.insert(v725, v574 - 1);
					else
						v592[v724] = {
							v574 - 1
						};
					end;
					v590("JUMPBACK " .. v723, "-- goto [" .. v724 .. "] (likely while/repeat loop)");
				end, 
				JUMPIF = function(v726, _) --[[ Line: 2347 ]] --[[ Name: JUMPIF ]]
					-- upvalues: v574 (ref), v592 (copy), v590 (copy)
					local v728 = bit32.band(bit32.rshift(v726, 8), 255);
					local v729 = bit32.band(bit32.rshift(v726, 16), 65535);
					local v730 = v574 + v729;
					local v731 = v592[v730];
					if v731 then
						table.insert(v731, v574 - 1);
					else
						v592[v730] = {
							v574 - 1
						};
					end;
					v590("JUMPIF " .. v728 .. ", " .. v729, "if var" .. v728 .. " then goto [" .. v730 .. "] end");
				end, 
				JUMPIFNOT = function(v732, _) --[[ Line: 2355 ]] --[[ Name: JUMPIFNOT ]]
					-- upvalues: v574 (ref), v592 (copy), v590 (copy)
					local v734 = bit32.band(bit32.rshift(v732, 8), 255);
					local v735 = bit32.band(bit32.rshift(v732, 16), 65535);
					local v736 = v574 + v735;
					local v737 = v592[v736];
					if v737 then
						table.insert(v737, v574 - 1);
					else
						v592[v736] = {
							v574 - 1
						};
					end;
					v590("JUMPIFNOT " .. v734 .. ", " .. v735, "if not var" .. v734 .. " then goto [" .. v736 .. "] end");
				end, 
				JUMPIFEQ = function(v738, _) --[[ Line: 2363 ]] --[[ Name: JUMPIFEQ ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), v592 (copy), v590 (copy)
					local v740 = bit32.band(bit32.rshift(v738, 8), 255);
					local v741 = bit32.band(bit32.rshift(v738, 16), 65535);
					local v742 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v742_0 = v742;
					v742 = v574 - 1 + v741;
					local v744 = v592[v742];
					if v744 then
						table.insert(v744, v574 - 2);
					else
						v592[v742] = {
							v574 - 2
						};
					end;
					v590("JUMPIFEQ " .. v740 .. ", " .. v741 .. " [" .. l_v742_0 .. "]", "if var" .. v740 .. " == var" .. l_v742_0 .. " then goto [" .. v742 .. "] end");
				end, 
				JUMPIFLE = function(v745, _) --[[ Line: 2372 ]] --[[ Name: JUMPIFLE ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), v592 (copy), v590 (copy)
					local v747 = bit32.band(bit32.rshift(v745, 8), 255);
					local v748 = bit32.band(bit32.rshift(v745, 16), 65535);
					local v749 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v749_0 = v749;
					v749 = v574 - 1 + v748;
					local v751 = v592[v749];
					if v751 then
						table.insert(v751, v574 - 2);
					else
						v592[v749] = {
							v574 - 2
						};
					end;
					v590("JUMPIFLE " .. v747 .. ", " .. v748 .. " [" .. l_v749_0 .. "]", "if var" .. v747 .. " <= var" .. l_v749_0 .. " then goto [" .. v749 .. "] end");
				end, 
				JUMPIFLT = function(v752, _) --[[ Line: 2381 ]] --[[ Name: JUMPIFLT ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), v592 (copy), v590 (copy)
					local v754 = bit32.band(bit32.rshift(v752, 8), 255);
					local v755 = bit32.band(bit32.rshift(v752, 16), 65535);
					local v756 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v756_0 = v756;
					v756 = v574 - 1 + v755;
					local v758 = v592[v756];
					if v758 then
						table.insert(v758, v574 - 2);
					else
						v592[v756] = {
							v574 - 2
						};
					end;
					v590("JUMPIFLT " .. v754 .. ", " .. v755 .. " [" .. l_v756_0 .. "]", "if var" .. v754 .. " < var" .. l_v756_0 .. " then goto [" .. v756 .. "] end");
				end, 
				JUMPIFNOTEQ = function(v759, _) --[[ Line: 2390 ]] --[[ Name: JUMPIFNOTEQ ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), v592 (copy), v590 (copy)
					local v761 = bit32.band(bit32.rshift(v759, 8), 255);
					local v762 = bit32.band(bit32.rshift(v759, 16), 65535);
					local v763 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v763_0 = v763;
					v763 = v574 - 1 + v762;
					local v765 = v592[v763];
					if v765 then
						table.insert(v765, v574 - 2);
					else
						v592[v763] = {
							v574 - 2
						};
					end;
					v590("JUMPIFNOTEQ " .. v761 .. ", " .. v762 .. " [" .. l_v763_0 .. "]", "if var" .. v761 .. " ~= var" .. l_v763_0 .. " then goto [" .. v763 .. "] end");
				end, 
				JUMPIFNOTLE = function(v766, _) --[[ Line: 2399 ]] --[[ Name: JUMPIFNOTLE ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), v592 (copy), v590 (copy)
					local v768 = bit32.band(bit32.rshift(v766, 8), 255);
					local v769 = bit32.band(bit32.rshift(v766, 16), 65535);
					local v770 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v770_0 = v770;
					v770 = v574 - 1 + v769;
					local v772 = v592[v770];
					if v772 then
						table.insert(v772, v574 - 2);
					else
						v592[v770] = {
							v574 - 2
						};
					end;
					v590("JUMPIFNOTLE " .. v768 .. ", " .. v769 .. " [" .. l_v770_0 .. "]", "if var" .. v768 .. " > var" .. l_v770_0 .. " then goto [" .. v770 .. "] end");
				end, 
				JUMPIFNOTLT = function(v773, _) --[[ Line: 2408 ]] --[[ Name: JUMPIFNOTLT ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), v592 (copy), v590 (copy)
					local v775 = bit32.band(bit32.rshift(v773, 8), 255);
					local v776 = bit32.band(bit32.rshift(v773, 16), 65535);
					local v777 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v777_0 = v777;
					v777 = v574 - 1 + v776;
					local v779 = v592[v777];
					if v779 then
						table.insert(v779, v574 - 2);
					else
						v592[v777] = {
							v574 - 2
						};
					end;
					v590("JUMPIFNOTLT " .. v775 .. ", " .. v776 .. " [" .. l_v777_0 .. "]", "if var" .. v775 .. " >= var" .. l_v777_0 .. " then goto [" .. v777 .. "] end");
				end, 
				ADD = function(v780, _) --[[ Line: 2417 ]] --[[ Name: ADD ]]
					-- upvalues: v590 (copy)
					local v782 = bit32.band(bit32.rshift(v780, 8), 255);
					local v783 = bit32.band(bit32.rshift(v780, 16), 255);
					local v784 = bit32.band(bit32.rshift(v780, 24), 255);
					if v782 == v783 then
						v590("ADD " .. v782 .. ", " .. v783 .. ", " .. v784, "var" .. v782 .. " += var" .. v784);
						return;
					elseif v782 == v784 then
						v590("ADD " .. v782 .. ", " .. v783 .. ", " .. v784, "var" .. v782 .. " += var" .. v783);
						return;
					else
						v590("ADD " .. v782 .. ", " .. v783 .. ", " .. v784, "var" .. v782 .. " = var" .. v783 .. " + var" .. v784);
						return;
					end;
				end, 
				SUB = function(v785, _) --[[ Line: 2432 ]] --[[ Name: SUB ]]
					-- upvalues: v590 (copy)
					local v787 = bit32.band(bit32.rshift(v785, 8), 255);
					local v788 = bit32.band(bit32.rshift(v785, 16), 255);
					local v789 = bit32.band(bit32.rshift(v785, 24), 255);
					if v787 == v788 then
						v590("SUB " .. v787 .. ", " .. v788 .. ", " .. v789, "var" .. v787 .. " -= var" .. v789);
						return;
					else
						v590("SUB " .. v787 .. ", " .. v788 .. ", " .. v789, "var" .. v787 .. " = var" .. v788 .. " - var" .. v789);
						return;
					end;
				end, 
				MUL = function(v790, _) --[[ Line: 2444 ]] --[[ Name: MUL ]]
					-- upvalues: v590 (copy)
					local v792 = bit32.band(bit32.rshift(v790, 8), 255);
					local v793 = bit32.band(bit32.rshift(v790, 16), 255);
					local v794 = bit32.band(bit32.rshift(v790, 24), 255);
					if v792 == v793 then
						v590("MUL " .. v792 .. ", " .. v793 .. ", " .. v794, "var" .. v792 .. " *= var" .. v794);
						return;
					elseif v792 == v794 then
						v590("MUL " .. v792 .. ", " .. v793 .. ", " .. v794, "var" .. v792 .. " *= var" .. v793);
						return;
					else
						v590("MUL " .. v792 .. ", " .. v793 .. ", " .. v794, "var" .. v792 .. " = var" .. v793 .. " * var" .. v794);
						return;
					end;
				end, 
				DIV = function(v795, _) --[[ Line: 2459 ]] --[[ Name: DIV ]]
					-- upvalues: v590 (copy)
					local v797 = bit32.band(bit32.rshift(v795, 8), 255);
					local v798 = bit32.band(bit32.rshift(v795, 16), 255);
					local v799 = bit32.band(bit32.rshift(v795, 24), 255);
					if v797 == v798 then
						v590("DIV " .. v797 .. ", " .. v798 .. ", " .. v799, "var" .. v797 .. " /= var" .. v799);
						return;
					else
						v590("DIV " .. v797 .. ", " .. v798 .. ", " .. v799, "var" .. v797 .. " = var" .. v798 .. " / var" .. v799);
						return;
					end;
				end, 
				MOD = function(v800, _) --[[ Line: 2471 ]] --[[ Name: MOD ]]
					-- upvalues: v590 (copy)
					local v802 = bit32.band(bit32.rshift(v800, 8), 255);
					local v803 = bit32.band(bit32.rshift(v800, 16), 255);
					local v804 = bit32.band(bit32.rshift(v800, 24), 255);
					if v802 == v803 then
						v590("MOD " .. v802 .. ", " .. v803 .. ", " .. v804, "var" .. v802 .. " %= var" .. v804);
						return;
					else
						v590("MOD " .. v802 .. ", " .. v803 .. ", " .. v804, "var" .. v802 .. " = var" .. v803 .. " % var" .. v804);
						return;
					end;
				end, 
				POW = function(v805, _) --[[ Line: 2483 ]] --[[ Name: POW ]]
					-- upvalues: v590 (copy)
					local v807 = bit32.band(bit32.rshift(v805, 8), 255);
					local v808 = bit32.band(bit32.rshift(v805, 16), 255);
					local v809 = bit32.band(bit32.rshift(v805, 24), 255);
					if v807 == v808 then
						v590("POW " .. v807 .. ", " .. v808 .. ", " .. v809, "var" .. v807 .. " ^= var" .. v809);
						return;
					else
						v590("POW " .. v807 .. ", " .. v808 .. ", " .. v809, "var" .. v807 .. " = var" .. v808 .. " ^ var" .. v809);
						return;
					end;
				end, 
				ADDK = function(v810, _) --[[ Line: 2495 ]] --[[ Name: ADDK ]]
					-- upvalues: l_constants_0 (copy), v590 (copy), v550 (ref)
					local v812 = bit32.band(bit32.rshift(v810, 8), 255);
					local v813 = bit32.band(bit32.rshift(v810, 16), 255);
					local v814 = bit32.band(bit32.rshift(v810, 24), 255);
					local v815 = l_constants_0[v814];
					if v812 == v813 then
						v590("ADDK " .. v812 .. ", " .. v813 .. ", " .. v814, "var" .. v812 .. " += " .. v550(v815));
						return;
					else
						v590("ADDK " .. v812 .. ", " .. v813 .. ", " .. v814, "var" .. v812 .. " = var" .. v813 .. " + " .. v550(v815));
						return;
					end;
				end, 
				SUBK = function(v816, _) --[[ Line: 2508 ]] --[[ Name: SUBK ]]
					-- upvalues: l_constants_0 (copy), v590 (copy), v550 (ref)
					local v818 = bit32.band(bit32.rshift(v816, 8), 255);
					local v819 = bit32.band(bit32.rshift(v816, 16), 255);
					local v820 = bit32.band(bit32.rshift(v816, 24), 255);
					local v821 = l_constants_0[v820];
					if v818 == v819 then
						v590("SUBK " .. v818 .. ", " .. v819 .. ", " .. v820, "var" .. v818 .. " -= " .. v550(v821));
						return;
					else
						v590("SUBK " .. v818 .. ", " .. v819 .. ", " .. v820, "var" .. v818 .. " = var" .. v819 .. " - " .. v550(v821));
						return;
					end;
				end, 
				MULK = function(v822, _) --[[ Line: 2521 ]] --[[ Name: MULK ]]
					-- upvalues: l_constants_0 (copy), v590 (copy), v550 (ref)
					local v824 = bit32.band(bit32.rshift(v822, 8), 255);
					local v825 = bit32.band(bit32.rshift(v822, 16), 255);
					local v826 = bit32.band(bit32.rshift(v822, 24), 255);
					local v827 = l_constants_0[v826];
					if v824 == v825 then
						v590("MULK " .. v824 .. ", " .. v825 .. ", " .. v826, "var" .. v824 .. " *= " .. v550(v827));
						return;
					else
						v590("MULK " .. v824 .. ", " .. v825 .. ", " .. v826, "var" .. v824 .. " = var" .. v825 .. " * " .. v550(v827));
						return;
					end;
				end, 
				DIVK = function(v828, _) --[[ Line: 2534 ]] --[[ Name: DIVK ]]
					-- upvalues: l_constants_0 (copy), v590 (copy), v550 (ref)
					local v830 = bit32.band(bit32.rshift(v828, 8), 255);
					local v831 = bit32.band(bit32.rshift(v828, 16), 255);
					local v832 = bit32.band(bit32.rshift(v828, 24), 255);
					local v833 = l_constants_0[v832];
					if v830 == v831 then
						v590("DIVK " .. v830 .. ", " .. v831 .. ", " .. v832, "var" .. v830 .. " /= " .. v550(v833));
						return;
					else
						v590("DIVK " .. v830 .. ", " .. v831 .. ", " .. v832, "var" .. v830 .. " = var" .. v831 .. " / " .. v550(v833));
						return;
					end;
				end, 
				MODK = function(v834, _) --[[ Line: 2547 ]] --[[ Name: MODK ]]
					-- upvalues: l_constants_0 (copy), v590 (copy), v550 (ref)
					local v836 = bit32.band(bit32.rshift(v834, 8), 255);
					local v837 = bit32.band(bit32.rshift(v834, 16), 255);
					local v838 = bit32.band(bit32.rshift(v834, 24), 255);
					local v839 = l_constants_0[v838];
					if v836 == v837 then
						v590("MODK " .. v836 .. ", " .. v837 .. ", " .. v838, "var" .. v836 .. " %= " .. v550(v839));
						return;
					else
						v590("MODK " .. v836 .. ", " .. v837 .. ", " .. v838, "var" .. v836 .. " = var" .. v837 .. " % " .. v550(v839));
						return;
					end;
				end, 
				POWK = function(v840, _) --[[ Line: 2560 ]] --[[ Name: POWK ]]
					-- upvalues: l_constants_0 (copy), v590 (copy), v550 (ref)
					local v842 = bit32.band(bit32.rshift(v840, 8), 255);
					local v843 = bit32.band(bit32.rshift(v840, 16), 255);
					local v844 = bit32.band(bit32.rshift(v840, 24), 255);
					local v845 = l_constants_0[v844];
					if v842 == v843 then
						v590("POWK " .. v842 .. ", " .. v843 .. ", " .. v844, "var" .. v842 .. " ^= " .. v550(v845));
						return;
					else
						v590("POWK " .. v842 .. ", " .. v843 .. ", " .. v844, "var" .. v842 .. " = var" .. v843 .. " ^ " .. v550(v845));
						return;
					end;
				end, 
				AND = function(v846, _) --[[ Line: 2573 ]] --[[ Name: AND ]]
					-- upvalues: v590 (copy)
					local v848 = bit32.band(bit32.rshift(v846, 8), 255);
					local v849 = bit32.band(bit32.rshift(v846, 16), 255);
					local v850 = bit32.band(bit32.rshift(v846, 24), 255);
					v590("AND " .. v848 .. ", " .. v849 .. ", " .. v850, "var" .. v848 .. " = var" .. v849 .. " and var" .. v850);
				end, 
				OR = function(v851, _) --[[ Line: 2580 ]] --[[ Name: OR ]]
					-- upvalues: v590 (copy)
					local v853 = bit32.band(bit32.rshift(v851, 8), 255);
					local v854 = bit32.band(bit32.rshift(v851, 16), 255);
					local v855 = bit32.band(bit32.rshift(v851, 24), 255);
					v590("OR " .. v853 .. ", " .. v854 .. ", " .. v855, "var" .. v853 .. " = var" .. v854 .. " or var" .. v855);
				end, 
				ANDK = function(v856, _) --[[ Line: 2587 ]] --[[ Name: ANDK ]]
					-- upvalues: l_constants_0 (copy), v590 (copy), v550 (ref)
					local v858 = bit32.band(bit32.rshift(v856, 8), 255);
					local v859 = bit32.band(bit32.rshift(v856, 16), 255);
					local v860 = bit32.band(bit32.rshift(v856, 24), 255);
					local v861 = l_constants_0[v860];
					v590("ANDK " .. v858 .. ", " .. v859 .. ", " .. v860, "var" .. v858 .. " = var" .. v859 .. " and " .. v550(v861));
				end, 
				ORK = function(v862, _) --[[ Line: 2595 ]] --[[ Name: ORK ]]
					-- upvalues: l_constants_0 (copy), v590 (copy), v550 (ref)
					local v864 = bit32.band(bit32.rshift(v862, 8), 255);
					local v865 = bit32.band(bit32.rshift(v862, 16), 255);
					local v866 = bit32.band(bit32.rshift(v862, 24), 255);
					local v867 = l_constants_0[v866];
					v590("ORK " .. v864 .. ", " .. v865 .. ", " .. v866, "var" .. v864 .. " = var" .. v865 .. " or " .. v550(v867));
				end, 
				CONCAT = function(v868, _) --[[ Line: 2603 ]] --[[ Name: CONCAT ]]
					-- upvalues: v590 (copy)
					local v870 = bit32.band(bit32.rshift(v868, 8), 255);
					local v871 = bit32.band(bit32.rshift(v868, 16), 255);
					local v872 = bit32.band(bit32.rshift(v868, 24), 255);
					local v873 = {};
					for v874 = v871, v872 do
						table.insert(v873, "var" .. v874);
					end;
					if v870 == v871 and v871 <= v872 then
						table.remove(v873, 1);
						v590("CONCAT " .. v870 .. ", " .. v871 .. ", " .. v872, "var" .. v870 .. " ..= " .. table.concat(v873, ".."));
						return;
					else
						v590("CONCAT " .. v870 .. ", " .. v871 .. ", " .. v872, "var" .. v870 .. " = " .. table.concat(v873, ".."));
						return;
					end;
				end, 
				NOT = function(v875, _) --[[ Line: 2620 ]] --[[ Name: NOT ]]
					-- upvalues: v590 (copy)
					local v877 = bit32.band(bit32.rshift(v875, 8), 255);
					local v878 = bit32.band(bit32.rshift(v875, 16), 255);
					v590("NOT " .. v877 .. ", " .. v878, "var" .. v877 .. " = not var" .. v878);
				end, 
				MINUS = function(v879, _) --[[ Line: 2626 ]] --[[ Name: MINUS ]]
					-- upvalues: v590 (copy)
					local v881 = bit32.band(bit32.rshift(v879, 8), 255);
					local v882 = bit32.band(bit32.rshift(v879, 16), 255);
					v590("MINUS " .. v881 .. ", " .. v882, "var" .. v881 .. " = -var" .. v882);
				end, 
				LENGTH = function(v883, _) --[[ Line: 2632 ]] --[[ Name: LENGTH ]]
					-- upvalues: v590 (copy)
					local v885 = bit32.band(bit32.rshift(v883, 8), 255);
					local v886 = bit32.band(bit32.rshift(v883, 16), 255);
					v590("LENGTH " .. v885 .. ", " .. v886, "var" .. v885 .. " = #var" .. v886);
				end, 
				NEWTABLE = function(v887, _) --[[ Line: 2638 ]] --[[ Name: NEWTABLE ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), v590 (copy)
					local v889 = bit32.band(bit32.rshift(v887, 8), 255);
					local v890 = bit32.band(bit32.rshift(v887, 16), 255);
					local _ = v890 == 0 and 0 or bit32.lrotate(1, v890 - 1);
					local v892 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v892_0 = v892;
					if l_v892_0 > 0 then
						v590("NEWTABLE " .. v889 .. ", " .. v890 .. " [" .. l_v892_0 .. "]", "var" .. v889 .. " = table.create(" .. l_v892_0 .. ")");
						return;
					else
						v590("NEWTABLE " .. v889 .. ", " .. v890 .. " [" .. l_v892_0 .. "]", "var" .. v889 .. " = {}");
						return;
					end;
				end, 
				DUPTABLE = function(v894, _) --[[ Line: 2651 ]] --[[ Name: DUPTABLE ]]
					-- upvalues: v590 (copy)
					local v896 = bit32.band(bit32.rshift(v894, 8), 255);
					local v897 = bit32.band(bit32.rshift(v894, 16), 65535);
					v590("DUPTABLE " .. v896 .. ", " .. v897, "var" .. v896 .. " = {}");
				end, 
				SETLIST = function(v898, _) --[[ Line: 2657 ]] --[[ Name: SETLIST ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), v590 (copy)
					local v900 = bit32.band(bit32.rshift(v898, 8), 255);
					local v901 = bit32.band(bit32.rshift(v898, 16), 255);
					local v902 = bit32.band(bit32.rshift(v898, 24), 255);
					local v903 = v902 - 1;
					local v904 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v904_0 = v904;
					if v903 == -1 then
						v590("SETLIST " .. v900 .. ", " .. v901 .. ", " .. v902 .. " [" .. l_v904_0 .. "]", "var" .. v900 .. "[" .. l_v904_0 .. "->(top)] = var" .. v901 .. "->(top)");
						return;
					else
						v590("SETLIST " .. v900 .. ", " .. v901 .. ", " .. v902 .. " [" .. l_v904_0 .. "]", "var" .. v900 .. "[" .. l_v904_0 .. "->" .. l_v904_0 + v903 - 1 .. "] = var" .. v901 .. "->var" .. v901 + v903 - 1);
						return;
					end;
				end, 
				FORNPREP = function(v906, _) --[[ Line: 2671 ]] --[[ Name: FORNPREP ]]
					-- upvalues: v44 (ref), v574 (ref), v592 (copy), v590 (copy)
					local v908 = bit32.band(bit32.rshift(v906, 8), 255);
					buffer.writeu16(v44, 0, (bit32.band(bit32.rshift(v906, 16), 65535)));
					local v909 = buffer.readi16(v44, 0);
					local v910 = v574 + v909;
					local v911 = v592[v910];
					if v911 then
						table.insert(v911, v574 - 1);
					else
						v592[v910] = {
							v574 - 1
						};
					end;
					v590("FORNPREP " .. v908 .. ", " .. v909, "for var" .. v908 + 2 .. " = var" .. v908 + 2 .. ", var" .. v908 .. ", var" .. v908 + 1 .. " do -- If loop shouldn't start (var" .. v908 + 2 .. " > var" .. v908 .. ") then goto [" .. v910 .. "]");
				end, 
				FORNLOOP = function(v912, _) --[[ Line: 2679 ]] --[[ Name: FORNLOOP ]]
					-- upvalues: v44 (ref), v574 (ref), v592 (copy), v590 (copy)
					local v914 = bit32.band(bit32.rshift(v912, 8), 255);
					buffer.writeu16(v44, 0, (bit32.band(bit32.rshift(v912, 16), 65535)));
					local v915 = buffer.readi16(v44, 0);
					local v916 = v574 + v915;
					local v917 = v592[v916];
					if v917 then
						table.insert(v917, v574 - 1);
					else
						v592[v916] = {
							v574 - 1
						};
					end;
					v590("FORNLOOP " .. v914 .. ", " .. v915, "var" .. v914 + 2 .. " += var" .. v914 + 1 .. "; if var" .. v914 + 2 .. " <= var" .. v914 .. " then goto [" .. v916 .. "] end");
				end, 
				FORGLOOP = function(v918, _) --[[ Line: 2687 ]] --[[ Name: FORGLOOP ]]
					-- upvalues: v44 (ref), l_code_0 (copy), v574 (ref), v577 (copy), v592 (copy), v590 (copy), v64 (ref)
					local v920 = bit32.band(bit32.rshift(v918, 8), 255);
					buffer.writeu16(v44, 0, (bit32.band(bit32.rshift(v918, 16), 65535)));
					local v921 = buffer.readi16(v44, 0);
					local v922 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v922_0 = v922;
					v922 = bit32.band(l_v922_0, 255);
					local v924 = table.create(v922);
					for v925 = 1, v922 do
						table.insert(v924, "var" .. v920 + 2 + v925);
					end;
					local v926 = v574 + v921 - 1;
					local v927 = v592[v926];
					if v927 then
						table.insert(v927, v574 - 2);
					else
						v592[v926] = {
							v574 - 2
						};
					end;
					if bit32.band(l_v922_0, 2147483648) > 0 then
						v590("FORGLOOP " .. v920 .. ", " .. v921 .. " [0x" .. (v64[bit32.rshift(l_v922_0, 24)] .. v64[bit32.band(bit32.rrotate(l_v922_0, 16), 255)] .. v64[bit32.band(bit32.rrotate(l_v922_0, 8), 255)] .. v64[bit32.band(l_v922_0, 255)]) .. "]", table.concat(v924, ", ") .. " = var" .. v920 .. "(var" .. v920 + 1 .. ", var" .. v920 + 2 .. "); if var" .. v920 + 3 .. " ~= nil then goto [" .. v926 .. "]");
						return;
					else
						v590("FORGLOOP " .. v920 .. ", " .. v921 .. " [0x" .. (v64[bit32.rshift(l_v922_0, 24)] .. v64[bit32.band(bit32.rrotate(l_v922_0, 16), 255)] .. v64[bit32.band(bit32.rrotate(l_v922_0, 8), 255)] .. v64[bit32.band(l_v922_0, 255)]) .. "]", table.concat(v924, ", ") .. " = var" .. v920 .. "(var" .. v920 + 1 .. ", var" .. v920 + 2 .. "); if var" .. v920 + 3 .. " ~= nil then goto [" .. v926 .. "]");
						return;
					end;
				end, 
				FORGPREP = function(v928, _) --[[ Line: 2706 ]] --[[ Name: FORGPREP ]]
					-- upvalues: v44 (ref), v574 (ref), v592 (copy), v590 (copy)
					local v930 = bit32.band(bit32.rshift(v928, 8), 255);
					buffer.writeu16(v44, 0, (bit32.band(bit32.rshift(v928, 16), 65535)));
					local v931 = buffer.readi16(v44, 0);
					local v932 = v574 + v931;
					local v933 = v592[v932];
					if v933 then
						table.insert(v933, v574 - 1);
					else
						v592[v932] = {
							v574 - 1
						};
					end;
					v590("FORGPREP " .. v930 .. ", " .. v931, "for var" .. v930 + 3 .. "->... in var" .. v930 .. ", var" .. v930 + 1 .. ", var" .. v930 + 2 .. " do -- If loop shouldn't start then goto [" .. v932 .. "]");
				end, 
				FORGPREP_INEXT = function(v934, _) --[[ Line: 2714 ]] --[[ Name: FORGPREP_INEXT ]]
					-- upvalues: v44 (ref), v574 (ref), v592 (copy), v590 (copy)
					local v936 = bit32.band(bit32.rshift(v934, 8), 255);
					buffer.writeu16(v44, 0, (bit32.band(bit32.rshift(v934, 16), 65535)));
					local v937 = buffer.readi16(v44, 0);
					local v938 = v574 + v937;
					local v939 = v592[v938];
					if v939 then
						table.insert(v939, v574 - 1);
					else
						v592[v938] = {
							v574 - 1
						};
					end;
					v590("FORGPREP_INEXT " .. v936 .. ", " .. v937, "for var" .. v936 + 3 .. "->... in var" .. v936 .. ", var" .. v936 + 1 .. ", var" .. v936 + 2 .. " do -- If loop shouldn't start then goto [" .. v938 .. "]");
				end, 
				DEP_FORGLOOP_INEXT = function(_, _) --[[ Line: 2722 ]] --[[ Name: DEP_FORGLOOP_INEXT ]]
					-- upvalues: v590 (copy)
					v590("DEP_FORGLOOP_INEXT", "-- Deprecated instruction, send me some bytecode that has this and I'll support it");
				end, 
				FORGPREP_NEXT = function(v942, _) --[[ Line: 2726 ]] --[[ Name: FORGPREP_NEXT ]]
					-- upvalues: v44 (ref), v574 (ref), v592 (copy), v590 (copy)
					local v944 = bit32.band(bit32.rshift(v942, 8), 255);
					buffer.writeu16(v44, 0, (bit32.band(bit32.rshift(v942, 16), 65535)));
					local v945 = buffer.readi16(v44, 0);
					local v946 = v574 + v945;
					local v947 = v592[v946];
					if v947 then
						table.insert(v947, v574 - 1);
					else
						v592[v946] = {
							v574 - 1
						};
					end;
					v590("FORGPREP_NEXT " .. v944 .. ", " .. v945, "for var" .. v944 + 3 .. "->... in var" .. v944 .. ", var" .. v944 + 1 .. ", var" .. v944 + 2 .. " do -- If loop shouldn't start then goto [" .. v946 .. "]");
				end, 
				NATIVECALL = function(_, _) --[[ Line: 2734 ]] --[[ Name: NATIVECALL ]]
					-- upvalues: v590 (copy)
					v590("NATIVECALL", "-- Call to native code");
				end, 
				GETVARARGS = function(v950, _) --[[ Line: 2738 ]] --[[ Name: GETVARARGS ]]
					-- upvalues: v590 (copy)
					local v952 = bit32.band(bit32.rshift(v950, 8), 255);
					local v953 = bit32.band(bit32.rshift(v950, 16), 255);
					local v954 = v953 - 1;
					if v954 == 0 then
						v590("GETVARARGS " .. v952 .. ", " .. v953, "var" .. v952 .. " = ... -- No variables");
						return;
					elseif v954 == -1 then
						if v952 == 1 then
							v590("GETVARARGS " .. v952 .. ", " .. v953, "var" .. v952 .. "->(top) = ... -- Load (top) variables");
							return;
						else
							v590("GETVARARGS " .. v952 .. ", " .. v953, "var" .. v952 .. "->(top) = ... -- Load (top) - " .. v952 - 1 .. " variables");
							return;
						end;
					else
						v590("GETVARARGS " .. v952 .. ", " .. v953, "var" .. v952 .. " = ... -- Load " .. v954 .. " variable" .. (v954 == 1 and "" or "s"));
						return;
					end;
				end, 
				NEWCLOSURE = function(v955, v956) --[[ Line: 2758 ]] --[[ Name: NEWCLOSURE ]]
					-- upvalues: l_protos_0 (copy), v562 (ref), v563 (ref), v565 (ref), v561 (ref), v567 (ref), v574 (ref), v575 (ref), v590 (copy), l_code_0 (copy), v181 (ref)
					local v957 = bit32.band(bit32.rshift(v955, 8), 255);
					local v958 = bit32.band(bit32.rshift(v955, 16), 65535);
					local v959 = l_protos_0[v958];
					local _ = v562;
					local l_debug_name_0 = v959.debug_name;
					if not l_debug_name_0 then
						local v962 = "func";
						v563 = v563 + 1;
						l_debug_name_0 = v962 .. v563;
					end;
					v959.debug_name = l_debug_name_0;
					v565(v959, v956);
					table.insert(v561, v562);
					v562 = v567 .. "[" .. v574 - 1 .. "] #" .. v575;
					v590("NEWCLOSURE " .. v957 .. ", " .. v958, "var" .. v957 .. " = " .. v959.debug_name);
					l_debug_name_0 = 0;
					while true do
						local v963 = l_code_0[v574];
						if v963 and v181[bit32.band(v963, 255)].opname == "CAPTURE" then
							table.insert(v561, v562);
							v562 = v567 .. "[" .. v574 - 1 .. "] #" .. v575;
							local v964 = bit32.band(bit32.rshift(v963, 8), 255);
							local v965 = bit32.band(bit32.rshift(v963, 16), 255);
							if v964 == 0 then
								v590("CAPTURE " .. v964 .. ", " .. v965, "up" .. l_debug_name_0 .. " = var" .. v965 .. " -- Readable");
							elseif v964 == 1 then
								v590("CAPTURE " .. v964 .. ", " .. v965, "up" .. l_debug_name_0 .. " = var" .. v965 .. " -- Readable and writable");
							elseif v964 == 2 then
								v590("CAPTURE " .. v964 .. ", " .. v965, "up" .. l_debug_name_0 .. " = up" .. v965);
							else
								v590("CAPTURE " .. v964 .. ", " .. v965, "up" .. l_debug_name_0 .. " = ??? -- Invalid capture type");
							end;
							v574 = v574 + 1;
							l_debug_name_0 = l_debug_name_0 + 1;
						else
							break;
						end;
					end;
				end, 
				DUPCLOSURE = function(v966, v967) --[[ Line: 2800 ]] --[[ Name: DUPCLOSURE ]]
					-- upvalues: l_constants_0 (copy), v555 (ref), v24 (ref), v562 (ref), v563 (ref), v565 (ref), v561 (ref), v567 (ref), v574 (ref), v575 (ref), v590 (copy), l_code_0 (copy), v181 (ref)
					local v968 = false;
					local v969 = bit32.band(bit32.rshift(v966, 8), 255);
					local v970 = bit32.band(bit32.rshift(v966, 16), 65535);
					local v971 = l_constants_0[v970];
					local v972 = v555[v971.value] or {
						debug_name = ("INVALIDPROTO<%*>%*"):format(v24[v971.type] or "NONE", v971.value), 
						params_count = 0, 
						line_defined = -1, 
						stack_size = 0, 
						type_info = {}, 
						upvalues_count = 0, 
						is_vararg = false, 
						protos = {}, 
						constants = {}, 
						flags = 0, 
						code = {}, 
						line_info = {}, 
						abs_line_info = {}
					};
					local _ = v562;
					local v974, v975;
					if v972 then
						v975 = v972.debug_name;
						v968 = v975;
					end;
					if not v968 then
						v974 = "func";
						v563 = v563 + 1;
						v975 = v974 .. v563;
					end;
					v968 = false;
					v972.debug_name = v975;
					v565(v972, v967);
					table.insert(v561, v562);
					v562 = v567 .. "[" .. v574 - 1 .. "] #" .. v575;
					v590("DUPCLOSURE " .. v969 .. ", " .. v970, "var" .. v969 .. " = " .. v972.debug_name);
					v975 = 0;
					while true do
						v974 = l_code_0[v574];
						if v974 and v181[bit32.band(v974, 255)].opname == "CAPTURE" then
							table.insert(v561, v562);
							v562 = v567 .. "[" .. v574 - 1 .. "] #" .. v575;
							local v976 = bit32.band(bit32.rshift(v974, 8), 255);
							local v977 = bit32.band(bit32.rshift(v974, 16), 255);
							if v976 == 0 then
								v590("CAPTURE " .. v976 .. ", " .. v977, "up" .. v975 .. " = var" .. v977 .. " -- Readable");
							elseif v976 == 1 then
								v590("CAPTURE " .. v976 .. ", " .. v977, "up" .. v975 .. " = var" .. v977 .. " -- Readable and writable");
							elseif v976 == 2 then
								v590("CAPTURE " .. v976 .. ", " .. v977, "up" .. v975 .. " = up" .. v977);
							else
								v590("CAPTURE " .. v976 .. ", " .. v977, "up" .. v975 .. " = ??? -- Invalid capture type");
							end;
							v574 = v574 + 1;
							v975 = v975 + 1;
						else
							break;
						end;
					end;
				end, 
				PREPVARARGS = function(v978, _) --[[ Line: 2860 ]] --[[ Name: PREPVARARGS ]]
					-- upvalues: v590 (copy)
					local v980 = bit32.band(bit32.rshift(v978, 8), 255);
					local v981 = v980 - 1;
					if v981 == 0 then
						v590("PREPVARARGS " .. v980, "-- No varargs");
						return;
					elseif v981 == -1 then
						v590("PREPVARARGS " .. v980, "-- Prepare for any number (top) of variables as ...");
						return;
					else
						v590("PREPVARARGS " .. v980, "-- Prepare for " .. v981 .. " variables as ...");
						return;
					end;
				end, 
				LOADKX = function(v982, _) --[[ Line: 2874 ]] --[[ Name: LOADKX ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), v590 (copy), v550 (ref), l_constants_0 (copy)
					local v984 = bit32.band(bit32.rshift(v982, 8), 255);
					local v985 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v985_0 = v985;
					v590("LOADK " .. v984 .. " [" .. l_v985_0 .. "]", "var" .. v984 .. " = " .. v550(l_constants_0[l_v985_0]));
				end, 
				JUMPX = function(v987, _) --[[ Line: 2880 ]] --[[ Name: JUMPX ]]
					-- upvalues: v44 (ref), v574 (ref), v592 (copy), v590 (copy)
					buffer.writeu32(v44, 0, (bit32.rshift(v987, 8)));
					local v989 = bit32.rshift(buffer.readi32(v44, 1), 16);
					local v990 = v574 + v989;
					local v991 = v592[v990];
					if v991 then
						table.insert(v991, v574 - 1);
					else
						v592[v990] = {
							v574 - 1
						};
					end;
					v590("JUMPX " .. v989, "-- goto [" .. v990 .. "]");
				end, 
				COVERAGE = function(v992, _) --[[ Line: 2887 ]] --[[ Name: COVERAGE ]]
					-- upvalues: v590 (copy), v573 (ref)
					v590("COVERAGE " .. bit32.rshift(v992, 8), "instruction_hits[" .. v573 .. "] += 1");
				end, 
				CAPTURE = function(v994, _) --[[ Line: 2891 ]] --[[ Name: CAPTURE ]]
					-- upvalues: v590 (copy)
					v590("CAPTURE " .. bit32.band(bit32.rshift(v994, 8), 255) .. ", " .. bit32.band(bit32.rshift(v994, 16), 255), "-- Should not exist here, but equivelant to NOP");
				end, 
				SUBRK = function(v996, _) --[[ Line: 2895 ]] --[[ Name: SUBRK ]]
					-- upvalues: l_constants_0 (copy), v590 (copy), v550 (ref)
					local v998 = bit32.band(bit32.rshift(v996, 8), 255);
					local v999 = bit32.band(bit32.rshift(v996, 16), 255);
					local v1000 = bit32.band(bit32.rshift(v996, 24), 255);
					local v1001 = l_constants_0[v999];
					v590("SUBRK " .. v998 .. ", " .. v999 .. ", " .. v1000, "var" .. v998 .. " = " .. v550(v1001) .. " - var" .. v1000);
				end, 
				DIVRK = function(v1002, _) --[[ Line: 2903 ]] --[[ Name: DIVRK ]]
					-- upvalues: l_constants_0 (copy), v590 (copy), v550 (ref)
					local v1004 = bit32.band(bit32.rshift(v1002, 8), 255);
					local v1005 = bit32.band(bit32.rshift(v1002, 16), 255);
					local v1006 = bit32.band(bit32.rshift(v1002, 24), 255);
					local v1007 = l_constants_0[v1005];
					v590("DIVRK " .. v1004 .. ", " .. v1005 .. ", " .. v1006, "var" .. v1004 .. " = " .. v550(v1007) .. " // var" .. v1006);
				end, 
				FASTCALL = function(v1008, _) --[[ Line: 2911 ]] --[[ Name: FASTCALL ]]
					-- upvalues: v220 (ref), v574 (ref), v592 (copy), v590 (copy)
					local v1010 = bit32.band(bit32.rshift(v1008, 8), 255);
					local v1011 = bit32.band(bit32.rshift(v1008, 24), 255);
					local v1012 = v220[v1010] or "<invalid>";
					local v1013 = v574 + v1011;
					local v1014 = v1013 + 1;
					local v1015 = v592[v1014];
					if v1015 then
						table.insert(v1015, v574 - 1);
					else
						v592[v1014] = {
							v574 - 1
						};
					end;
					v590("FASTCALL " .. v1010 .. ", " .. v1011, "... = " .. v1012 .. "(...) -- Uses args and results from call at [" .. v1013 .. "]. If successful, goto [" .. v1013 + 1 .. "]");
				end, 
				FASTCALL1 = function(v1016, _) --[[ Line: 2920 ]] --[[ Name: FASTCALL1 ]]
					-- upvalues: v220 (ref), v574 (ref), v592 (copy), v590 (copy)
					local v1018 = bit32.band(bit32.rshift(v1016, 8), 255);
					local v1019 = bit32.band(bit32.rshift(v1016, 16), 255);
					local v1020 = bit32.band(bit32.rshift(v1016, 24), 255);
					local v1021 = v220[v1018] or "<invalid>";
					local v1022 = v574 + v1020;
					local v1023 = v1022 + 1;
					local v1024 = v592[v1023];
					if v1024 then
						table.insert(v1024, v574 - 1);
					else
						v592[v1023] = {
							v574 - 1
						};
					end;
					v590("FASTCALL1 " .. v1018 .. ", " .. v1019 .. ", " .. v1020, "... = " .. v1021 .. "(var" .. v1019 .. ") -- Uses results from call at [" .. v1022 .. "]. If successful, goto [" .. v1022 + 1 .. "]");
				end, 
				FASTCALL2 = function(v1025, _) --[[ Line: 2930 ]] --[[ Name: FASTCALL2 ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), v220 (ref), v592 (copy), v590 (copy)
					local v1027 = bit32.band(bit32.rshift(v1025, 8), 255);
					local v1028 = bit32.band(bit32.rshift(v1025, 16), 255);
					local v1029 = bit32.band(bit32.rshift(v1025, 24), 255);
					local v1030 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					v1030 = bit32.band(v1030, 255);
					local v1031 = v220[v1027] or "<invalid>";
					local v1032 = v574 + v1029 - 1;
					local v1033 = v1032 + 1;
					local v1034 = v592[v1033];
					if v1034 then
						table.insert(v1034, v574 - 1);
					else
						v592[v1033] = {
							v574 - 1
						};
					end;
					v590("FASTCALL2 " .. v1027 .. ", " .. v1028 .. ", " .. v1029, "... = " .. v1031 .. "(var" .. v1028 .. ", var" .. v1030 .. ") -- Uses results from call at [" .. v1032 .. "]. If successful, goto [" .. v1032 + 1 .. "]");
				end, 
				FASTCALL2K = function(v1035, _) --[[ Line: 2942 ]] --[[ Name: FASTCALL2K ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), l_constants_0 (copy), v220 (ref), v592 (copy), v590 (copy), v550 (ref)
					local v1037 = bit32.band(bit32.rshift(v1035, 8), 255);
					local v1038 = bit32.band(bit32.rshift(v1035, 16), 255);
					local v1039 = bit32.band(bit32.rshift(v1035, 24), 255);
					local v1040 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v1040_0 = v1040;
					v1040 = l_constants_0[l_v1040_0];
					local v1042 = v220[v1037] or "<invalid>";
					local v1043 = v574 + v1039 - 1;
					local v1044 = v1043 + 1;
					local v1045 = v592[v1044];
					if v1045 then
						table.insert(v1045, v574 - 1);
					else
						v592[v1044] = {
							v574 - 1
						};
					end;
					v590("FASTCALL2K " .. v1037 .. ", " .. v1038 .. ", " .. v1039 .. " [" .. l_v1040_0 .. "]", "... = " .. v1042 .. "(var" .. v1038 .. ", " .. v550(v1040) .. ") -- Uses results from call at [" .. v1043 .. "]. If successful, goto [" .. v1043 + 1 .. "]");
				end, 
				FASTCALL3 = function(v1046, _) --[[ Line: 2954 ]] --[[ Name: FASTCALL3 ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), v220 (ref), v592 (copy), v590 (copy)
					local v1048 = bit32.band(bit32.rshift(v1046, 8), 255);
					local v1049 = bit32.band(bit32.rshift(v1046, 16), 255);
					local v1050 = bit32.band(bit32.rshift(v1046, 24), 255);
					local v1051 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v1051_0 = v1051;
					v1051 = bit32.band(l_v1051_0, 255);
					local v1053 = bit32.rshift(bit32.band(l_v1051_0, 65280), 8);
					local v1054 = v220[v1048] or "<invalid>";
					local v1055 = v574 + v1050 - 1;
					local v1056 = v1055 + 1;
					local v1057 = v592[v1056];
					if v1057 then
						table.insert(v1057, v574 - 1);
					else
						v592[v1056] = {
							v574 - 1
						};
					end;
					v590("FASTCALL3 " .. v1048 .. ", " .. v1049 .. ", " .. v1050, "... = " .. v1054 .. "(var" .. v1049 .. ", var" .. v1051 .. ", var" .. v1053 .. ") -- Uses results from call at [" .. v1055 .. "]. If successful, goto [" .. v1055 + 1 .. "]");
				end, 
				JUMPXEQKNIL = function(v1058, _) --[[ Line: 2967 ]] --[[ Name: JUMPXEQKNIL ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), v592 (copy), v590 (copy), v64 (ref)
					local v1060 = bit32.band(bit32.rshift(v1058, 8), 255);
					local v1061 = bit32.band(bit32.rshift(v1058, 16), 65535);
					local v1062 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v1062_0 = v1062;
					v1062 = false;
					if bit32.band(l_v1062_0, 2147483648) > 0 then
						v1062 = true;
					end;
					local v1064 = v574 - 1 + v1061;
					local v1065 = v592[v1064];
					if v1065 then
						table.insert(v1065, v574 - 2);
					else
						v592[v1064] = {
							v574 - 2
						};
					end;
					v590("JUMPXEQKNIL " .. v1060 .. ", " .. v1061 .. " [0x" .. (v64[bit32.rshift(l_v1062_0, 24)] .. v64[bit32.band(bit32.rrotate(l_v1062_0, 16), 255)] .. v64[bit32.band(bit32.rrotate(l_v1062_0, 8), 255)] .. v64[bit32.band(l_v1062_0, 255)]) .. "]", "if var" .. v1060 .. " " .. (v1062 and "~" or "=") .. "= nil then goto [" .. v1064 .. "] end");
				end, 
				JUMPXEQKB = function(v1066, _) --[[ Line: 2977 ]] --[[ Name: JUMPXEQKB ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), v592 (copy), v590 (copy), v64 (ref)
					local v1068 = bit32.band(bit32.rshift(v1066, 8), 255);
					local v1069 = bit32.band(bit32.rshift(v1066, 16), 65535);
					local v1070 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v1070_0 = v1070;
					v1070 = false;
					if bit32.band(l_v1070_0, 2147483648) > 0 then
						v1070 = true;
					end;
					local v1072 = v574 - 1 + v1069;
					local v1073 = v592[v1072];
					if v1073 then
						table.insert(v1073, v574 - 2);
					else
						v592[v1072] = {
							v574 - 2
						};
					end;
					v590("JUMPXEQKB " .. v1068 .. ", " .. v1069 .. " [0x" .. (v64[bit32.rshift(l_v1070_0, 24)] .. v64[bit32.band(bit32.rrotate(l_v1070_0, 16), 255)] .. v64[bit32.band(bit32.rrotate(l_v1070_0, 8), 255)] .. v64[bit32.band(l_v1070_0, 255)]) .. "]", "if var" .. v1068 .. " " .. (v1070 and "~" or "=") .. "= " .. (bit32.band(l_v1070_0, 1) == 0 and "false" or "true") .. " then goto [" .. v1072 .. "] end");
				end, 
				JUMPXEQKN = function(v1074, _) --[[ Line: 2987 ]] --[[ Name: JUMPXEQKN ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), l_constants_0 (copy), v592 (copy), v590 (copy), v64 (ref), v550 (ref)
					local v1076 = bit32.band(bit32.rshift(v1074, 8), 255);
					local v1077 = bit32.band(bit32.rshift(v1074, 16), 65535);
					local v1078 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v1078_0 = v1078;
					v1078 = false;
					if bit32.band(l_v1078_0, 2147483648) > 0 then
						v1078 = true;
					end;
					local v1080 = l_constants_0[bit32.band(l_v1078_0, 16777215)];
					local v1081 = v574 - 1 + v1077;
					local v1082 = v592[v1081];
					if v1082 then
						table.insert(v1082, v574 - 2);
					else
						v592[v1081] = {
							v574 - 2
						};
					end;
					v590("JUMPXEQKN " .. v1076 .. ", " .. v1077 .. " [0x" .. (v64[bit32.rshift(l_v1078_0, 24)] .. v64[bit32.band(bit32.rrotate(l_v1078_0, 16), 255)] .. v64[bit32.band(bit32.rrotate(l_v1078_0, 8), 255)] .. v64[bit32.band(l_v1078_0, 255)]) .. "]", "if var" .. v1076 .. " " .. (v1078 and "~" or "=") .. "= " .. v550(v1080) .. " then goto [" .. v1081 .. "] end");
				end, 
				JUMPXEQKS = function(v1083, _) --[[ Line: 2998 ]] --[[ Name: JUMPXEQKS ]]
					-- upvalues: l_code_0 (copy), v574 (ref), v577 (copy), l_constants_0 (copy), v592 (copy), v590 (copy), v64 (ref), v550 (ref)
					local v1085 = bit32.band(bit32.rshift(v1083, 8), 255);
					local v1086 = bit32.band(bit32.rshift(v1083, 16), 65535);
					local v1087 = l_code_0[v574];
					if v574 == v577 then
						error("Corrupted aux");
					end;
					v574 = v574 + 1;
					local l_v1087_0 = v1087;
					v1087 = false;
					if bit32.band(l_v1087_0, 2147483648) > 0 then
						v1087 = true;
					end;
					local v1089 = l_constants_0[bit32.band(l_v1087_0, 16777215)];
					local v1090 = v574 - 1 + v1086;
					local v1091 = v592[v1090];
					if v1091 then
						table.insert(v1091, v574 - 2);
					else
						v592[v1090] = {
							v574 - 2
						};
					end;
					v590("JUMPXEQKS " .. v1085 .. ", " .. v1086 .. " [0x" .. (v64[bit32.rshift(l_v1087_0, 24)] .. v64[bit32.band(bit32.rrotate(l_v1087_0, 16), 255)] .. v64[bit32.band(bit32.rrotate(l_v1087_0, 8), 255)] .. v64[bit32.band(l_v1087_0, 255)]) .. "]", "if var" .. v1085 .. " " .. (v1087 and "~" or "=") .. "= " .. v550(v1089) .. " then goto [" .. v1090 .. "] end");
				end, 
				IDIV = function(v1092, _) --[[ Line: 3009 ]] --[[ Name: IDIV ]]
					-- upvalues: v590 (copy)
					local v1094 = bit32.band(bit32.rshift(v1092, 8), 255);
					local v1095 = bit32.band(bit32.rshift(v1092, 16), 255);
					local v1096 = bit32.band(bit32.rshift(v1092, 24), 255);
					if v1094 == v1095 then
						v590("IDIV " .. v1094 .. ", " .. v1095 .. ", " .. v1096, "var" .. v1094 .. " //= var" .. v1096);
						return;
					else
						v590("IDIV " .. v1094 .. ", " .. v1095 .. ", " .. v1096, "var" .. v1094 .. " = var" .. v1095 .. " // var" .. v1096);
						return;
					end;
				end, 
				IDIVK = function(v1097, _) --[[ Line: 3021 ]] --[[ Name: IDIVK ]]
					-- upvalues: l_constants_0 (copy), v590 (copy), v550 (ref)
					local v1099 = bit32.band(bit32.rshift(v1097, 8), 255);
					local v1100 = bit32.band(bit32.rshift(v1097, 16), 255);
					local v1101 = bit32.band(bit32.rshift(v1097, 24), 255);
					local v1102 = l_constants_0[v1101];
					if v1099 == v1100 then
						v590("IDIVK " .. v1099 .. ", " .. v1100 .. ", " .. v1101, "var" .. v1099 .. " //= " .. v550(v1102));
						return;
					else
						v590("IDIVK " .. v1099 .. ", " .. v1100 .. ", " .. v1101, "var" .. v1099 .. " = var" .. v1100 .. " // " .. v550(v1102));
						return;
					end;
				end
			};
			local v1104 = {};
			for v1105, v1106 in pairs(v1103) do
				if v180[v1105] then
					local v1107 = v180[v1105];
					if not v1107 then
						error((("Unknown opname %*"):format(v1105)));
					end;
					v1104[v1107.opcode] = v1106;
				end;
			end;
			local v1108 = {};
			local l_v567_0 = v567;
			if not v568 then
				local l_v567_1 = v567;
				v567 = string.rep("\t", #l_v567_1 + 1);
			end;
			if v577 > 0 then
				while v574 <= v577 do
					local v1111 = l_code_0[v574];
					v573 = v574;
					v574 = v574 + 1;
					v575 = v575 + 1;
					local v1112 = v1104[bit32.band(v1111, 255)];
					if v1112 then
						v562 = v567 .. "[" .. v574 - 1 .. "] #" .. v575;
						v1112(v1111, v567);
						table.insert(v561, v562);
						v1108[v562] = v573;
					else
						table.insert(v561, (("%*; Unknown opcode 0x%* (%* reversed: 0x%*)\n"):format(v567, v64[bit32.band(v1111, 255)], v16, v64[v17[bit32.band(v1111, 255)]])));
						v551 = v551 + 1;
					end;
				end;
			end;
			v562 = "";
			v567 = l_v567_0;
			for v1113, v1114 in ipairs(v561) do
				local v1115 = v592[v1108[v1114]];
				if v1115 then
					v561[v1113] = v567 .. "::" .. table.concat(v1115, "::, ::") .. "::\n" .. v1114;
				end;
			end;
			if not v568 then
				table.insert(v561, v567 .. "end\n");
			end;
			return;
		end;
	end;
	v565(v554, "");
	table.insert(v561, 1, (("-- Disassembled with Konstant V%*'s disassembler, made by plusgiant5\n\t\t-- Disassembled on %*\n\t\t-- Luau version %*%*\n\t\t-- Time taken: %* seconds\n\n"):format("2.1", os.date("%Y-%m-%d %H:%M:%S"), v556, if v557 then (", Types version %*"):format(v557) else "", (string.format("%.6f", l_clock_0() - v558)))));
	v562 = "";
	local v1116 = 0;
	for _, v1118 in ipairs(v561) do
		v1116 = v1116 + #v1118;
	end;
	local v1119 = buffer.create(v1116 - 1);
	local v1120 = 0;
	for v1121, v1122 in ipairs(v561) do
		if v1121 == #v561 then
			v1122 = string.sub(v1122, 1, #v1122 - 1);
		end;
		buffer.writestring(v1119, v1120, v1122);
		v1120 = v1120 + #v1122;
	end;
	return buffer.tostring(v1119);
end;
local l_prefix_error_0 = v22.prefix_error;
local l_prefix_warning_0 = v22.prefix_warning;
local l_prefix_information_0 = v22.prefix_information;
local function v4346(v1127, v1128) --[[ Line: 3102 ]] --[[ Name: decompile_bytecode ]]
	-- upvalues: l_clock_0 (copy), v27 (ref), v43 (copy), v551 (ref), v22 (copy), l_prefix_error_0 (ref), l_prefix_warning_0 (ref), l_prefix_information_0 (ref), l_getscripthash_0 (copy), v296 (copy), v299 (ref), v215 (copy), v89 (copy), v300 (ref), v297 (ref), v181 (ref), v216 (copy), v64 (copy), v16 (ref), v17 (copy), v189 (ref), v44 (copy), v180 (ref), v301 (ref), v109 (copy), v33 (copy), v24 (copy), v61 (copy), v538 (copy), v218 (copy), v550 (copy), v545 (copy), v219 (copy), v460 (copy), v214 (copy), v523 (ref), v527 (copy)
	local v1129 = l_clock_0();
	v27 = v1129;
	local v1130 = v43();
	v1130:start_benchmark("Global Initialization");
	v551 = 0;
	local v1131 = v1128 or {};
	assert(v1131);
	for v1132 in pairs(v1131) do
		if v22[v1132] == nil then
			error("Unknown setting \"" .. tostring(v1132) .. "\"");
		end;
	end;
	for v1133, v1134 in pairs(v22) do
		if v1131[v1133] == nil then
			v1131[v1133] = v1134;
		end;
	end;
	if v1131.smart_var_level then
		assert(v1131.smart_var_level == math.floor(v1131.smart_var_level), "Expected `smart_var_level` to be an integer");
		assert(v1131.smart_var_level >= 0, "Expected `smart_var_level` to be >= 0");
		assert(v1131.smart_var_level <= 3, "Expected `smart_var_level` to be <= 3");
	end;
	local l_prefix_error_1 = v1131.prefix_error;
	assert(l_prefix_error_1);
	if string.match(l_prefix_error_1, "\n") then
		error("Cannot have newline characters in `prefix_error`");
	end;
	l_prefix_error_0 = l_prefix_error_1;
	local l_prefix_warning_1 = v1131.prefix_warning;
	assert(l_prefix_warning_1);
	if string.match(l_prefix_warning_1, "\n") then
		error("Cannot have newline characters in `prefix_warning`");
	end;
	l_prefix_warning_0 = l_prefix_warning_1;
	local l_prefix_information_1 = v1131.prefix_information;
	assert(l_prefix_information_1);
	if string.match(l_prefix_information_1, "\n") then
		error("Cannot have newline characters in `prefix_information`");
	end;
	l_prefix_information_0 = l_prefix_information_1;
	if string.byte(v1127, 1, 1) == 0 then
		local v1138 = string.format("-- Successfully decompiled with Ratware\n")
		if type(v1127) ~= "string" and l_getscripthash_0 then
			v1138 = v1138 .. ("-- Script hash: %*\n"):format((string.upper(l_getscripthash_0(v1127))));
		end;
		return (((v1138 .. ("-- Decompiled on %*\n"):format((os.date("%Y-%m-%d %H:%M:%S")))) .. ("-- Time taken: %* seconds\n"):format((string.format("%.6f", l_clock_0() - v1129)))) .. "\n-- Target script didn't compile. Compilation error below:\n") .. "--[[\n" .. string.sub(v1127, 2, #v1127) .. "\n]]";
	else
		local v1139, v1140, _, v1142 = v296(v1127);
		v299 = v1140;
		local v1143 = {};
		local v1144 = {};
		local function _(v1145, v1146) --[[ Line: 3162 ]] --[[ Name: add_notice ]]
			-- upvalues: v1144 (ref)
			table.insert(v1144, {
				type = v1145, 
				content = v1146
			});
		end;
		local v1148 = {};
		local function _(v1149) --[[ Line: 3221 ]] --[[ Name: get_expr ]]
			while v1149.t == "name" do
				local l_override_expr_0 = v1149.name.override_expr;
				if l_override_expr_0 then
					v1149 = l_override_expr_0;
				else
					break;
				end;
			end;
			return v1149;
		end;
		local function _(v1152, v1153) --[[ Line: 3233 ]] --[[ Name: expr_is_varname ]]
			local l_v1152_0 = v1152;
			while l_v1152_0.t == "name" do
				local l_override_expr_1 = l_v1152_0.name.override_expr;
				if l_override_expr_1 then
					l_v1152_0 = l_override_expr_1;
				else
					break;
				end;
			end;
			v1152 = l_v1152_0;
			if v1152.t == "name" then
				return v1152.name == v1153;
			else
				return false;
			end;
		end;
		local function _(v1157) --[[ Line: 3240 ]] --[[ Name: get_var_num ]]
			local l_var_num_0 = v1157.var_num;
			assert(l_var_num_0);
			return l_var_num_0;
		end;
		local function _(v1160) --[[ Line: 3245 ]] --[[ Name: get_var_list ]]
			local l_var_list_0 = v1160.var_list;
			assert(l_var_list_0);
			return l_var_list_0;
		end;
		local function _(v1163, v1164) --[[ Line: 3250 ]] --[[ Name: expr_has_contributor ]]
			for v1165 in pairs(v1164.contributors) do
				v1163.contributors[v1165] = true;
			end;
			v1163.contributors[v1164] = true;
		end;
		local function _(v1167, v1168) --[[ Line: 3256 ]] --[[ Name: line_reads_varname ]]
			table.insert(v1167.reads, v1168);
			table.insert(v1168.reads, v1167);
		end;
		local function _(v1170, v1171) --[[ Line: 3260 ]] --[[ Name: line_writes_varname ]]
			table.insert(v1170.writes, v1171);
			table.insert(v1171.writes, v1170);
		end;
		local function v1177(v1173, v1174) --[[ Line: 3264 ]] --[[ Name: line_no_longer_reads_varname ]]
			local v1175 = table.find(v1173.reads, v1174);
			assert(v1175);
			table.remove(v1173.reads, v1175);
			local v1176 = table.find(v1174.reads, v1173);
			assert(v1176);
			table.remove(v1174.reads, v1176);
		end;
		local function v1182(v1178, v1179) --[[ Line: 3272 ]] --[[ Name: line_no_longer_writes_varname ]]
			local v1180 = table.find(v1178.writes, v1179);
			assert(v1180);
			table.remove(v1178.writes, v1180);
			local v1181 = table.find(v1179.writes, v1178);
			assert(v1181);
			table.remove(v1179.writes, v1181);
		end;
		local function v1189(v1183, v1184) --[[ Line: 3280 ]] --[[ Name: line_has_expr ]]
			for _, v1186 in ipairs(v1184.reads) do
				table.insert(v1183.reads, v1186);
				table.insert(v1186.reads, v1183);
			end;
			for _, v1188 in ipairs(v1184.writes) do
				table.insert(v1183.writes, v1188);
				table.insert(v1188.writes, v1183);
			end;
		end;
		local function v1196(v1190, v1191) --[[ Line: 3288 ]] --[[ Name: line_no_longer_has_expr ]]
			-- upvalues: v1177 (copy), v1182 (copy)
			for _, v1193 in ipairs(v1191.reads) do
				v1177(v1190, v1193);
			end;
			for _, v1195 in ipairs(v1191.writes) do
				v1182(v1190, v1195);
			end;
		end;
		local v1197 = 1;
		local v1198 = {
			[0] = "nil", 
			[1] = "boolean", 
			[2] = "number", 
			[3] = "string", 
			[4] = "table", 
			[5] = "function", 
			[6] = "thread", 
			[7] = "userdata", 
			[8] = "vector", 
			[9] = "buffer", 
			[15] = "any"
		};
		local function _(v1199) --[[ Line: 3316 ]] --[[ Name: type_info_to_luau_type ]]
			-- upvalues: v1198 (copy)
			local v1200 = bit32.band(v1199, 128) > 0;
			local v1201 = v1198[v1199];
			print("Type info", v1199, "is", v1201);
			if v1201 then
				return {
					type = v1201, 
					optional = v1200
				};
			else
				return {
					type = "invalid", 
					optional = false
				};
			end;
		end;
		local function _(v1203) --[[ Line: 3426 ]] --[[ Name: flip_full_condition ]]
			-- upvalues: v215 (ref)
			v1203.condition = v215[v1203.condition];
		end;
		local v1205 = {};
		local function v1207(v1206) --[[ Line: 3430 ]] --[[ Name: new_line_comment ]]
			-- upvalues: v1205 (ref)
			return {
				t = "comment", 
				lines = v1205, 
				reads = {}, 
				writes = {}, 
				text = v1206, 
				stack = 1
			};
		end;
		local v1208 = {};
		local v1209 = 1;
		local function _(v1210) --[[ Line: 3445 ]] --[[ Name: get_var ]]
			-- upvalues: v1208 (copy)
			return v1208[v1210];
		end;
		local function _(v1212) --[[ Line: 3448 ]] --[[ Name: expect_var ]]
			-- upvalues: v1208 (copy)
			local v1213 = v1208[v1212];
			assert(v1213);
			return v1213;
		end;
		local v1215 = {};
		local function _(v1216) --[[ Line: 3455 ]] --[[ Name: find_valid_varname ]]
			-- upvalues: v1215 (copy), v1208 (copy), v1143 (copy)
			local v1217 = v1215[v1216];
			local l_v1216_0 = v1216;
			local v1219 = v1217 or 1;
			while v1208[l_v1216_0] or v1143[l_v1216_0] do
				v1219 = v1219 + 1;
				l_v1216_0 = v1216 .. "_" .. v1219;
			end;
			v1215[v1216] = v1219;
			return l_v1216_0;
		end;
		local function v1225(v1221, v1222, v1223) --[[ Line: 3466 ]] --[[ Name: alloc_var ]]
			-- upvalues: v1208 (copy)
			if v1208[v1221] and v1221 ~= "_" then
				error((("[alloc] Variable %* already allocated"):format(v1221)));
			end;
			local v1224 = {
				name = v1221, 
				attributes = {}, 
				reads = {}, 
				writes = {}, 
				registers = v1222, 
				var_num = #v1223 + 1, 
				var_list = v1223
			};
			v1208[v1221] = v1224;
			table.insert(v1223, v1224);
			return v1208[v1221];
		end;
		local function _(v1226) --[[ Line: 3483 ]] --[[ Name: get_or_alloc_var ]]
			-- upvalues: v1208 (copy), v1225 (copy)
			local v1227 = v1208[v1226];
			if v1227 then
				return v1227;
			else
				return (v1225(v1226, {
					beginning = -1, 
					ending = -1
				}, {}));
			end;
		end;
		local function _(v1229, v1230, v1231) --[[ Line: 3491 ]] --[[ Name: var_init_expr ]]
			v1229.init_expr = v1230;
			v1229.var_num = v1231;
		end;
		local function _(v1233) --[[ Line: 3495 ]] --[[ Name: free_var ]]
			-- upvalues: v1208 (copy)
			local l_name_0 = v1233.name;
			if not v1208[l_name_0] then
				error((("[free] Variable %* not allocated"):format(v1233.name)));
			end;
			v1208[l_name_0] = nil;
		end;
		local function _(v1236, v1237) --[[ Line: 3502 ]] --[[ Name: var_givetype ]]
			-- upvalues: v1208 (copy)
			local l_name_1 = v1236.name;
			if not v1208[l_name_1] then
				error((("[write] Variable %* not allocated"):format(v1236.name)));
			end;
			if v1208[l_name_1].luau_type and v1208[l_name_1].luau_type ~= v1237 then
				error((("[write] Attempt to retype %*: %* to %*: %*"):format(v1236.name, v1208[l_name_1].luau_type, v1236, v1237)));
			end;
			v1208[l_name_1].luau_type = v1237;
		end;
		local function _(v1240, v1241) --[[ Line: 3512 ]] --[[ Name: var_rename ]]
			-- upvalues: v1208 (copy)
			local l_name_2 = v1240.name;
			if not v1208[l_name_2] then
				error((("[write] Variable %* not allocated"):format(l_name_2)));
			end;
			v1208[l_name_2] = nil;
			v1240.name = v1241;
			v1208[v1241] = v1240;
			v1240.attributes.renamed = true;
		end;
		local function _(v1244, v1245) --[[ Line: 3523 ]] --[[ Name: var_replace ]]
			-- upvalues: v1208 (copy)
			local l_name_3 = v1244.name;
			if not v1208[l_name_3] then
				error((("[write] Variable %* not allocated"):format(l_name_3)));
			end;
			v1208[l_name_3] = nil;
			v1244.override_expr = v1245;
		end;
		local function _() --[[ Line: 3531 ]] --[[ Name: gen_varname_str ]]
			-- upvalues: v1197 (ref), v1215 (copy), v1208 (copy), v1143 (copy)
			local v1248 = "var" .. tostring(v1197);
			local v1249 = v1215[v1248];
			local l_v1248_0 = v1248;
			local v1251 = v1249 or 1;
			while v1208[l_v1248_0] or v1143[l_v1248_0] do
				v1251 = v1251 + 1;
				l_v1248_0 = v1248 .. "_" .. v1251;
			end;
			v1215[v1248] = v1251;
			local l_l_v1248_0_0 = l_v1248_0;
			v1197 = v1197 + 1;
			return l_l_v1248_0_0;
		end;
		local function _(v1254, v1255) --[[ Line: 3537 ]] --[[ Name: gen_varname ]]
			-- upvalues: v1225 (copy), v1197 (ref), v1215 (copy), v1208 (copy), v1143 (copy)
			local l_v1225_0 = v1225;
			local v1257 = "var" .. tostring(v1197);
			local v1258 = v1215[v1257];
			local l_v1257_0 = v1257;
			local v1260 = v1258 or 1;
			while v1208[l_v1257_0] or v1143[l_v1257_0] do
				v1260 = v1260 + 1;
				l_v1257_0 = v1257 .. "_" .. v1260;
			end;
			v1215[v1257] = v1260;
			local l_l_v1257_0_0 = l_v1257_0;
			v1197 = v1197 + 1;
			return (l_v1225_0(l_l_v1257_0_0, v1254, v1255));
		end;
		local _ = function(v1263, _) --[[ Line: 3540 ]] --[[ Name: gen_argname_str ]]
			-- upvalues: v1209 (ref), v1131 (copy), v1215 (copy), v1208 (copy), v1143 (copy)
			local v1265 = "arg" .. tostring(v1209);
			if v1131.exact_argument_names then
				v1265 = v1263 .. "_" .. v1265;
			end;
			local l_v1265_0 = v1265;
			local v1267 = v1215[l_v1265_0];
			local l_l_v1265_0_0 = l_v1265_0;
			local v1269 = v1267 or 1;
			while v1208[l_l_v1265_0_0] or v1143[l_l_v1265_0_0] do
				v1269 = v1269 + 1;
				l_l_v1265_0_0 = l_v1265_0 .. "_" .. v1269;
			end;
			v1215[l_v1265_0] = v1269;
			v1265 = l_l_v1265_0_0;
			v1209 = v1209 + 1;
			return v1265;
		end;
		local function _(v1271, v1272, v1273) --[[ Line: 3549 ]] --[[ Name: gen_argname ]]
			-- upvalues: v1225 (copy), v1209 (ref), v1131 (copy), v1215 (copy), v1208 (copy), v1143 (copy)
			local l_v1225_1 = v1225;
			local l_name_4 = v1271.name;
			local v1276 = "arg" .. tostring(v1209);
			if v1131.exact_argument_names then
				v1276 = l_name_4 .. "_" .. v1276;
			end;
			local l_v1276_0 = v1276;
			local v1278 = v1215[l_v1276_0];
			local l_l_v1276_0_0 = l_v1276_0;
			local v1280 = v1278 or 1;
			while v1208[l_l_v1276_0_0] or v1143[l_l_v1276_0_0] do
				v1280 = v1280 + 1;
				l_l_v1276_0_0 = l_v1276_0 .. "_" .. v1280;
			end;
			v1215[l_v1276_0] = v1280;
			v1276 = l_l_v1276_0_0;
			v1209 = v1209 + 1;
			l_v1225_1 = l_v1225_1(v1276, {
				beginning = v1272, 
				ending = v1272
			}, v1273);
			l_v1225_1.func_name = v1271;
			return l_v1225_1;
		end;
		local v1282 = {};
		local function v1283() --[[ Line: 3560 ]] --[[ Name: line_fake ]]
			-- upvalues: v1205 (ref)
			return {
				t = "nothing", 
				lines = v1205, 
				reads = {}, 
				writes = {}
			};
		end;
		local function v1285(v1284) --[[ Line: 3569 ]] --[[ Name: lone_expr_nil ]]
			if v1284 then
				return {
					t = "nil", 
					reads = {}, 
					writes = {}, 
					contributors = {}, 
					invisible = true
				};
			else
				return {
					t = "nil", 
					reads = {}, 
					writes = {}, 
					contributors = {}
				};
			end;
		end;
		local function v1299(v1286, v1287, _) --[[ Line: 3587 ]] --[[ Name: lone_expr_call ]]
			local v1289 = table.clone(v1286.reads);
			local v1290 = table.clone(v1286.writes);
			local v1291 = table.clone(v1286.contributors);
			for _, v1293 in ipairs(v1287) do
				for _, v1295 in ipairs(v1293.reads) do
					table.insert(v1289, v1295);
				end;
				for _, v1297 in ipairs(v1293.writes) do
					table.insert(v1290, v1297);
				end;
				for v1298 in pairs(v1293.contributors) do
					v1291[v1298] = true;
				end;
			end;
			return {
				t = "call", 
				reads = v1289, 
				writes = v1290, 
				contributors = v1291, 
				func = v1286, 
				args = v1287
			};
		end;
		local function v1301(v1300) --[[ Line: 3609 ]] --[[ Name: lone_expr_name ]]
			return {
				t = "name", 
				reads = {
					v1300
				}, 
				writes = {}, 
				contributors = {}, 
				name = v1300
			};
		end;
		local function v1303(v1302) --[[ Line: 3618 ]] --[[ Name: lone_expr_not ]]
			return {
				t = "not", 
				reads = table.clone(v1302.reads), 
				writes = table.clone(v1302.writes), 
				contributors = table.clone(v1302.contributors), 
				precedence = 2, 
				rhs = v1302
			};
		end;
		local function v1311(v1304, v1305) --[[ Line: 3628 ]] --[[ Name: lone_expr_and ]]
			-- upvalues: v89 (ref)
			local v1306 = {
				t = "and", 
				reads = v89(v1304.reads, v1305.reads), 
				writes = v89(v1304.writes, v1305.writes)
			};
			local l_contributors_0 = v1304.contributors;
			local l_contributors_1 = v1305.contributors;
			local v1309 = table.clone(l_contributors_0);
			for v1310 in pairs(l_contributors_1) do
				v1309[v1310] = true;
			end;
			v1306.contributors = v1309;
			v1306.precedence = 7;
			v1306.lhs = v1304;
			v1306.rhs = v1305;
			return v1306;
		end;
		local function v1320(v1312, v1313, v1314) --[[ Line: 3638 ]] --[[ Name: lone_expr_condition ]]
			-- upvalues: v89 (ref)
			if v1314 then
				local v1315 = {
					t = "condition", 
					reads = v89(v1312.reads, v1314.reads), 
					writes = v89(v1312.writes, v1314.writes)
				};
				local l_contributors_2 = v1312.contributors;
				local l_contributors_3 = v1314.contributors;
				local v1318 = table.clone(l_contributors_2);
				for v1319 in pairs(l_contributors_3) do
					v1318[v1319] = true;
				end;
				v1315.contributors = v1318;
				v1315.precedence = 6;
				v1315.condition = v1313;
				v1315.lhs = v1312;
				v1315.rhs = v1314;
				return v1315;
			else
				return {
					t = "condition", 
					reads = table.clone(v1312.reads), 
					writes = table.clone(v1312.writes), 
					contributors = table.clone(v1312.contributors), 
					precedence = 2, 
					condition = v1313, 
					lhs = v1312
				};
			end;
		end;
		local function v1327(v1321, v1322, v1323, v1324, v1325) --[[ Line: 3664 ]] --[[ Name: lone_line_define_function ]]
			-- upvalues: v1189 (copy)
			local v1326 = {
				t = "define function", 
				reads = {}, 
				writes = {}, 
				lines = v1321, 
				func = v1322, 
				func_name = v1323, 
				define_function_type = v1324, 
				path = v1325
			};
			v1189(v1326, v1322);
			return v1326;
		end;
		local function v1330(v1328, v1329) --[[ Line: 3678 ]] --[[ Name: lone_line_return ]]
			return {
				t = "return", 
				lines = v1328, 
				reads = {}, 
				writes = {}, 
				values = v1329
			};
		end;
		local function _(v1331) --[[ Line: 3689 ]] --[[ Name: invert_condition_expr ]]
			-- upvalues: v215 (ref), v1303 (copy)
			if v1331.t == "condition" then
				v1331.condition = v215[v1331.condition];
				return v1331;
			elseif v1331.t == "not" then
				return v1331.rhs;
			else
				return (v1303(v1331));
			end;
		end;
		local v1333 = {};
		local v1334 = {};
		local v1335 = {};
		local v1336 = {};
		local v1337 = {};
		local v1338 = 0;
		local v1339 = {};
		local v1340 = {};
		local v1341 = 0;
		local function _(v1342) --[[ Line: 3711 ]] --[[ Name: mark_condition_stop_point ]]
			-- upvalues: v1340 (ref), v1341 (ref)
			v1340[v1342] = true;
			v1341 = v1341 + 1;
		end;
		local function v1344() --[[ Line: 3715 ]] --[[ Name: save_global_state ]]
			-- upvalues: v551 (ref), v1144 (ref), v1205 (ref), v1334 (ref), v1335 (ref), v1336 (ref), v1337 (ref), v1338 (ref), v1339 (ref), v1340 (ref), v1341 (ref)
			return {
				global_failed_instructions_count = v551, 
				notices = table.clone(v1144), 
				lines = table.clone(v1205), 
				variable_mapped_long_string_constants = table.clone(v1334), 
				variable_mapped_long_string_constants_order = table.clone(v1335), 
				long_string_usage_counts = table.clone(v1336), 
				long_string_constant_already_used = table.clone(v1337), 
				long_string_variable_count = v1338, 
				lines_had_skipped_return = table.clone(v1339), 
				condition_stop_points = table.clone(v1340), 
				marked_condition_stop_points = v1341
			};
		end;
		local function _(v1345) --[[ Line: 3730 ]] --[[ Name: load_global_state ]]
			-- upvalues: v551 (ref), v1144 (ref), v1205 (ref), v1334 (ref), v1335 (ref), v1336 (ref), v1337 (ref), v1338 (ref), v1339 (ref), v1340 (ref), v1341 (ref)
			v551 = v1345.global_failed_instructions_count;
			v1144 = v1345.notices;
			v1205 = v1345.lines;
			v1334 = v1345.variable_mapped_long_string_constants;
			v1335 = v1345.variable_mapped_long_string_constants_order;
			v1336 = v1345.long_string_usage_counts;
			v1337 = v1345.long_string_constant_already_used;
			v1338 = v1345.long_string_variable_count;
			v1339 = v1345.lines_had_skipped_return;
			v1340 = v1345.condition_stop_points;
			v1341 = v1345.marked_condition_stop_points;
		end;
		local v1347 = nil;
		local function v3183(v1348, v1349) --[[ Line: 3744 ]] --[[ Name: astgen ]]
			-- upvalues: v43 (ref), v300 (ref), v1209 (ref), v1205 (ref), v1148 (copy), v1207 (copy), v1285 (copy), v1189 (copy), l_prefix_warning_1 (copy), v1333 (copy), l_prefix_error_1 (copy), v1330 (copy), v297 (ref), v1225 (copy), v1197 (ref), v1215 (copy), v1208 (copy), v1143 (copy), v1196 (copy), v1334 (ref), v1336 (ref), v1337 (ref), v1338 (ref), v1335 (ref), v1301 (copy), v89 (ref), v1311 (copy), v1320 (copy), v1303 (copy), v1299 (copy), v1131 (copy), v1347 (ref), v181 (ref), v215 (ref), v216 (ref), v64 (ref), v16 (ref), v17 (ref), v551 (ref), v189 (ref), v44 (ref), v180 (ref), v1282 (copy), v1283 (copy), v1340 (ref), v301 (ref), v109 (ref), v33 (ref), v1339 (ref), v1140 (copy), v1341 (ref), v1327 (copy)
			local v1350 = v43();
			v1350:start_benchmark("Initialization");
			local l_v300_0 = v300;
			v300 = v1348;
			v1209 = 1;
			local v1352 = 0;
			local l_constants_1 = v1348.constants;
			local l_protos_1 = v1348.protos;
			local l_code_1 = v1348.code;
			local v1356 = #l_code_1;
			local v1357 = nil;
			if v1348.stack_size > 0 then
				v1357 = table.create(v1348.stack_size - 1);
				v1357[0] = nil;
			else
				v1357 = {};
			end;
			local v1358 = {};
			local v1359 = {};
			local v1360 = 0;
			local v1361 = 0;
			local v1362 = {};
			local v1363 = {};
			local v1364 = {};
			local v1365 = {};
			local v1366 = {};
			local function v1367() --[[ Line: 3786 ]] --[[ Name: next_line ]]
				-- upvalues: v1365 (ref), v1205 (ref), v1148 (ref), v1366 (copy)
				if v1365.t == "name" then
					warn(debug.traceback());
				end;
				if not v1365.t then
					error("messageWAHTTERSDGXCvlkhx d");
				end;
				table.insert(v1205, v1365);
				v1148[v1365] = v1366;
				v1365 = {
					t = "Unknown", 
					lines = v1205, 
					reads = {}, 
					writes = {}
				};
			end;
			local function v1370(v1368, v1369) --[[ Line: 3805 ]] --[[ Name: insert_line ]]
				-- upvalues: v1365 (ref), v1205 (ref), v1148 (ref), v1366 (copy)
				if v1365.t == "name" then
					warn(debug.traceback());
				end;
				v1368 = math.max(v1368, 1);
				v1365.index = v1368;
				table.insert(v1369 or v1205, v1368, v1365);
				v1148[v1365] = v1366;
				v1365 = {
					t = "Unknown", 
					lines = v1205, 
					reads = {}, 
					writes = {}
				};
			end;
			local function v1373(v1371) --[[ Line: 3821 ]] --[[ Name: push_comment ]]
				-- upvalues: v1205 (ref), v1365 (ref), v1207 (ref), v1367 (copy)
				local v1372 = v1205[#v1205];
				if v1372 and v1372.t == "comment" and string.sub(v1372.text, 1, #v1371) == v1371 then
					v1372.stack = v1372.stack + 1;
					v1372.text = v1371 .. " (x" .. v1372.stack .. ")";
					return;
				else
					v1365 = v1207(v1371);
					v1367();
					return;
				end;
			end;
			local function v1376(v1374, v1375) --[[ Line: 3832 ]] --[[ Name: insert_comment ]]
				-- upvalues: v1365 (ref), v1207 (ref), v1370 (copy)
				v1365 = v1207(v1375);
				v1370(v1374);
			end;
			local v1377 = nil;
			local function v1380(v1378, _) --[[ Line: 3839 ]] --[[ Name: expr_nil ]]
				-- upvalues: v1377 (ref), v1285 (ref)
				return v1377(v1378, (v1285(true)));
			end;
			local function _() --[[ Line: 3843 ]] --[[ Name: line_nothing ]]
				-- upvalues: v1365 (ref), v1205 (ref)
				v1365 = {
					t = "nothing", 
					lines = v1205, 
					reads = {}, 
					writes = {}
				};
			end;
			local function v1389(v1382, v1383) --[[ Line: 3852 ]] --[[ Name: line_vardef ]]
				-- upvalues: v1365 (ref), v1205 (ref), v1189 (ref)
				if v1383.varname then
					assert(#v1382 == 1);
					assert(v1382[1] == v1383.varname);
				end;
				assert(#v1382 > 0);
				v1365 = {
					t = "define variable", 
					lines = v1205, 
					reads = {}, 
					writes = {}, 
					names = v1382, 
					value = v1383
				};
				if v1383.t == "nil" and v1383.invisible then
					for v1384, v1385 in ipairs(v1382) do
						v1385.init_expr = v1383;
						v1385.var_num = v1384;
					end;
				else
					for v1386, v1387 in ipairs(v1382) do
						v1387.init_expr = v1383;
						v1387.var_num = v1386;
						local l_v1365_0 = v1365;
						table.insert(l_v1365_0.writes, v1387);
						table.insert(v1387.writes, l_v1365_0);
					end;
				end;
				v1189(v1365, v1383);
			end;
			local v1390 = nil;
			local v1391 = {};
			local v1392 = {};
			local function _(v1393, v1394) --[[ Line: 3883 ]] --[[ Name: register_var_for_reg ]]
				-- upvalues: v1391 (copy)
				v1391[v1393] = v1394;
			end;
			local function _(v1396) --[[ Line: 3894 ]] --[[ Name: unregister_vars_for_regs ]]
				-- upvalues: v1391 (copy)
				for v1397 = v1396.beginning, v1396.ending do
					if v1391[v1397] then
						v1391[v1397] = nil;
					end;
				end;
			end;
			local function _(v1399) --[[ Line: 3903 ]] --[[ Name: get_reg_varname ]]
				-- upvalues: v1391 (copy)
				return v1391[v1399];
			end;
			local function _(v1401) --[[ Line: 3906 ]] --[[ Name: lock_reg ]]
				-- upvalues: v1392 (copy)
				v1392[v1401] = true;
			end;
			local function _(v1403) --[[ Line: 3910 ]] --[[ Name: unlock_reg ]]
				-- upvalues: v1392 (copy)
				v1392[v1403] = nil;
			end;
			local function _(v1405) --[[ Line: 3914 ]] --[[ Name: is_reg_locked ]]
				-- upvalues: v1392 (copy)
				if v1392[v1405] then
					return true;
				else
					return false;
				end;
			end;
			local function _(v1407) --[[ Line: 3919 ]] --[[ Name: root_expr_for_reg ]]
				-- upvalues: v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref)
				local v1408 = v1357[v1407];
				if not v1408 then
					v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v1407) .. "]");
					v1408 = v1377(v1407, (v1285(true)));
				end;
				return v1408;
			end;
			local function v1412(v1410) --[[ Line: 3929 ]] --[[ Name: expr_for_reg ]]
				-- upvalues: v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref)
				if v1391[v1410] then
					return v1390(v1410, v1391[v1410]);
				else
					local v1411 = v1357[v1410];
					if not v1411 then
						v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v1410) .. "]");
						v1411 = v1377(v1410, (v1285(true)));
					end;
					return v1411;
				end;
			end;
			local function v1419(v1413, v1414, v1415) --[[ Line: 3937 ]] --[[ Name: manually_define_vars_with_expr ]]
				-- upvalues: v1391 (copy), v1389 (copy), v1367 (copy)
				assert(#v1415 > 0);
				local v1416 = 0;
				for v1417 = v1413.beginning, v1413.ending do
					v1416 = v1416 + 1;
					local v1418 = v1415[v1416];
					assert(v1418);
					v1391[v1417] = v1418;
				end;
				v1389(v1415, v1414);
				v1367();
			end;
			local function v1427(v1420, v1421) --[[ Line: 3949 ]] --[[ Name: manually_define_vars ]]
				-- upvalues: v1357 (ref), v1391 (copy), v1389 (copy), v1367 (copy)
				assert(#v1421 > 0);
				local l_beginning_1 = v1420.beginning;
				local v1423 = v1357[l_beginning_1];
				assert(v1423);
				local v1424 = 0;
				for v1425 = l_beginning_1, v1420.ending do
					v1424 = v1424 + 1;
					local v1426 = v1421[v1424];
					assert(v1426);
					v1391[v1425] = v1426;
				end;
				v1389(v1421, v1423);
				v1367();
			end;
			local v1428 = nil;
			local function _(v1429, v1430) --[[ Line: 3966 ]] --[[ Name: set_expr_for_reg ]]
				-- upvalues: v1357 (ref)
				v1357[v1429] = v1430;
			end;
			local function _(v1432) --[[ Line: 3972 ]] --[[ Name: clone_expr ]]
				-- upvalues: v1333 (ref), v1373 (copy), l_prefix_error_1 (ref)
				if v1333[v1432] then
					v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
					return v1432;
				else
					v1333[v1432] = true;
					return v1432;
				end;
			end;
			local function v1437(v1434, v1435) --[[ Line: 3981 ]] --[[ Name: line_varset ]]
				-- upvalues: v1205 (ref), v1189 (ref), v1365 (ref)
				local v1436 = {
					t = "set variable", 
					reads = {}, 
					writes = {}, 
					lines = v1205, 
					name = v1434, 
					value = v1435
				};
				v1189(v1436, v1435);
				table.insert(v1436.writes, v1434);
				table.insert(v1434.writes, v1436);
				v1365 = v1436;
			end;
			v1428 = v1437;
			local function v1441(v1438, v1439) --[[ Line: 3996 ]] --[[ Name: line_setglobal ]]
				-- upvalues: v1205 (ref), v1189 (ref), v1365 (ref)
				local v1440 = {
					t = "set global", 
					reads = {}, 
					writes = {}, 
					lines = v1205, 
					name = v1438, 
					value = v1439
				};
				v1189(v1440, v1439);
				v1365 = v1440;
			end;
			local function v1448(v1442, v1443, v1444) --[[ Line: 4009 ]] --[[ Name: line_settable ]]
				-- upvalues: v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1365 (ref), v1205 (ref), v1189 (ref)
				local v1445;
				if v1391[v1442] then
					v1445 = v1390(v1442, v1391[v1442]);
				else
					local v1446 = v1357[v1442];
					if not v1446 then
						v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v1442) .. "]");
						v1446 = v1377(v1442, (v1285(true)));
					end;
					v1445 = v1446;
				end;
				if v1333[v1445] then
					v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
				else
					v1333[v1445] = true;
				end;
				local l_v1445_0 = v1445;
				v1365 = {
					t = "set table", 
					lines = v1205, 
					reads = {}, 
					writes = {}, 
					table = l_v1445_0, 
					key = v1443, 
					value = v1444
				};
				v1189(v1365, l_v1445_0);
				v1189(v1365, v1443);
				v1189(v1365, v1444);
			end;
			local function v1461(v1449, v1450) --[[ Line: 4026 ]] --[[ Name: line_return ]]
				-- upvalues: v1330 (ref), v1205 (ref), v297 (ref), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1189 (ref), v1365 (ref)
				local v1451 = {};
				local v1452 = v1330(v1205, v1451);
				if v1450 == -1 then
					for v1453 = v1449, v297 do
						local v1454;
						if v1391[v1453] then
							v1454 = v1390(v1453, v1391[v1453]);
						else
							local v1455 = v1357[v1453];
							if not v1455 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v1453) .. "]");
								v1455 = v1377(v1453, (v1285(true)));
							end;
							v1454 = v1455;
						end;
						if v1333[v1454] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v1454] = true;
						end;
						local l_v1454_0 = v1454;
						v1189(v1452, l_v1454_0);
						table.insert(v1451, l_v1454_0);
					end;
				else
					for v1457 = v1449, v1449 + v1450 - 1 do
						local v1458;
						if v1391[v1457] then
							v1458 = v1390(v1457, v1391[v1457]);
						else
							local v1459 = v1357[v1457];
							if not v1459 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v1457) .. "]");
								v1459 = v1377(v1457, (v1285(true)));
							end;
							v1458 = v1459;
						end;
						if v1333[v1458] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v1458] = true;
						end;
						local l_v1458_0 = v1458;
						v1189(v1452, l_v1458_0);
						table.insert(v1451, l_v1458_0);
					end;
				end;
				v1365 = v1452;
			end;
			local function v1462() --[[ Line: 4044 ]] --[[ Name: line_break ]]
				-- upvalues: v1365 (ref), v1205 (ref)
				v1365 = {
					t = "break", 
					lines = v1205, 
					reads = {}, 
					writes = {}
				};
			end;
			local function v1463() --[[ Line: 4053 ]] --[[ Name: line_continue ]]
				-- upvalues: v1365 (ref), v1205 (ref)
				v1365 = {
					t = "continue", 
					lines = v1205, 
					reads = {}, 
					writes = {}
				};
			end;
			local function v1465(v1464) --[[ Line: 4062 ]] --[[ Name: line_goto ]]
				-- upvalues: v1365 (ref), v1205 (ref)
				v1365 = {
					t = "unknown jump", 
					lines = v1205, 
					reads = {}, 
					writes = {}, 
					destination = v1464
				};
			end;
			local function v1488(v1466) --[[ Line: 4072 ]] --[[ Name: gen_varnames ]]
				-- upvalues: v1225 (ref), v1197 (ref), v1215 (ref), v1208 (ref), v1143 (ref)
				local v1467 = {};
				local l_var_reg_range_0 = v1466.var_reg_range;
				local l_beginning_2 = l_var_reg_range_0.beginning;
				local l_ending_1 = l_var_reg_range_0.ending;
				if l_beginning_2 == l_ending_1 then
					local v1471 = {};
					local l_v1225_2 = v1225;
					local v1473 = "var" .. tostring(v1197);
					local v1474 = v1215[v1473];
					local l_v1473_0 = v1473;
					local v1476 = v1474 or 1;
					while v1208[l_v1473_0] or v1143[l_v1473_0] do
						v1476 = v1476 + 1;
						l_v1473_0 = v1473 .. "_" .. v1476;
					end;
					v1215[v1473] = v1476;
					local l_l_v1473_0_0 = l_v1473_0;
					v1197 = v1197 + 1;
					table.insert(v1467, (l_v1225_2(l_l_v1473_0_0, l_var_reg_range_0, v1471)));
					return v1467;
				else
					local v1478 = {};
					for v1479 = l_beginning_2, l_ending_1 do
						local v1480 = {
							beginning = v1479, 
							ending = v1479
						};
						local l_v1225_3 = v1225;
						local v1482 = "var" .. tostring(v1197);
						local v1483 = v1215[v1482];
						local l_v1482_0 = v1482;
						local v1485 = v1483 or 1;
						while v1208[l_v1482_0] or v1143[l_v1482_0] do
							v1485 = v1485 + 1;
							l_v1482_0 = v1482 .. "_" .. v1485;
						end;
						v1215[v1482] = v1485;
						local l_l_v1482_0_0 = l_v1482_0;
						v1197 = v1197 + 1;
						local v1487 = l_v1225_3(l_l_v1482_0_0, v1480, v1478);
						v1487.attributes.multireg = true;
						table.insert(v1467, v1487);
					end;
					return v1467;
				end;
			end;
			local v1489 = true;
			local function v1498() --[[ Line: 4089 ]] --[[ Name: on_instruction_started ]]
				-- upvalues: v1359 (ref), v1360 (ref), v1489 (ref), v1392 (copy)
				local v1490 = v1359[v1360];
				assert(v1489);
				v1489 = false;
				if v1490 then
					for v1491 = #v1490, 1, -1 do
						local v1492 = v1490[v1491];
						local l_type_1 = v1492.type;
						if l_type_1 == "lockvar" then
							local l_var_reg_range_1 = v1492.var_reg_range;
							for v1495 = l_var_reg_range_1.beginning, l_var_reg_range_1.ending do
								v1392[v1495] = true;
							end;
							table.remove(v1490, v1491);
						elseif l_type_1 == "unlockvar" then
							local l_var_reg_range_2 = v1492.var_reg_range;
							for v1497 = l_var_reg_range_2.beginning, l_var_reg_range_2.ending do
								v1392[v1497] = nil;
							end;
							table.remove(v1490, v1491);
						end;
					end;
					if #v1490 == 0 then
						v1359[v1360] = nil;
					end;
				end;
			end;
			local function v1518(v1499, v1500) --[[ Line: 4117 ]] --[[ Name: on_instruction_finished ]]
				-- upvalues: v1359 (ref), v1360 (ref), v1489 (ref), v1391 (copy), v1392 (copy), v1205 (ref), v1196 (ref), v1189 (ref), v1437 (copy), v1367 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1377 (ref), v1285 (ref), v1488 (copy), v1419 (copy), v1427 (copy)
				local v1501 = v1359[v1360];
				assert(not v1489);
				v1489 = true;
				local v1502 = v1391[v1499];
				if v1502 then
					if v1392[v1499] and true or false then
						local v1503 = v1205[#v1205];
						local v1504 = nil;
						if v1503 and v1503.t == "set variable" and v1503.name == v1502 then
							local l_value_0 = v1503.value;
							v1196(v1503, l_value_0);
							local l_t_0 = v1500.t;
							if l_t_0 == "constant index" then
								if v1500.table.t == "name" and v1500.table.name == v1502 then
									v1500.table = l_value_0;
									v1504 = true;
								end;
							elseif l_t_0 == "call" and v1500.func.t == "name" and v1500.func.name == v1502 then
								v1500.func = l_value_0;
								v1504 = true;
							end;
							if v1504 then
								v1503.value = v1500;
								v1189(v1503, v1500);
							end;
						end;
						if not v1504 then
							v1437(v1502, v1500);
							v1367();
						end;
					else
						local l_registers_0 = v1502.registers;
						for v1508 = l_registers_0.beginning, l_registers_0.ending do
							if v1391[v1508] then
								v1391[v1508] = nil;
							end;
						end;
					end;
				end;
				if v1501 then
					for _, v1510 in ipairs(v1501) do
						local l_var_reg_range_3 = v1510.var_reg_range;
						local l_beginning_3 = l_var_reg_range_3.beginning;
						local l_ending_2 = l_var_reg_range_3.ending;
						local v1514 = false;
						if l_beginning_3 <= v1499 then
							v1514 = v1499 <= l_ending_2;
						end;
						if not v1514 then

						end;
						if v1510.type == "defvar" then
							v1514 = nil;
							if not v1510.predef then
								l_beginning_3 = v1510.var_reg_range;
								if l_beginning_3.ending - l_beginning_3.beginning + 1 == 1 then
									l_beginning_3 = v1510.var_reg_range.beginning;
									if v1391[l_beginning_3] then
										l_var_reg_range_3 = v1390(l_beginning_3, v1391[l_beginning_3]);
									else
										local v1515 = v1357[l_beginning_3];
										if not v1515 then
											v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(l_beginning_3) .. "]");
											v1515 = v1377(l_beginning_3, (v1285(true)));
										end;
										l_var_reg_range_3 = v1515;
									end;
									if l_var_reg_range_3 and l_var_reg_range_3.varname then
										v1514 = {
											l_var_reg_range_3.varname
										};
									end;
								end;
							end;
							v1514 = v1514 or v1488(v1510);
							if v1510.no_inline then
								for _, v1517 in ipairs(v1514) do
									v1517.attributes.no_inline = true;
								end;
							end;
							if v1510.predef then
								v1419(v1510.var_reg_range, v1377(nil, (v1285(true))), v1514);
							else
								v1427(v1510.var_reg_range, v1514);
							end;
						else
							v1373(l_prefix_warning_1 .. ": Skipped task `" .. v1510.type .. "` above");
						end;
					end;
				end;
			end;
			local function v1522() --[[ Line: 4193 ]] --[[ Name: not_on_instruction_finished ]]
				-- upvalues: v1359 (ref), v1360 (ref), v1489 (ref), v1419 (copy), v1377 (ref), v1285 (ref), v1488 (copy), v1373 (copy), l_prefix_warning_1 (ref)
				local v1519 = v1359[v1360];
				assert(not v1489);
				v1489 = true;
				if v1519 then
					for _, v1521 in ipairs(v1519) do
						if v1521.type == "defvar" and v1521.predef then
							v1419(v1521.var_reg_range, v1377(nil, (v1285(true))), (v1488(v1521)));
						else
							v1373(l_prefix_warning_1 .. ": Skipped task `" .. v1521.type .. "` above");
						end;
					end;
				end;
			end;
			local v1523 = nil;
			local function _(v1524, v1525, v1526) --[[ Line: 4208 ]] --[[ Name: line_call ]]
				-- upvalues: v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1205 (ref), v1189 (ref), v1365 (ref)
				local v1527 = {};
				local v1528;
				if v1391[v1524] then
					v1528 = v1390(v1524, v1391[v1524]);
				else
					local v1529 = v1357[v1524];
					if not v1529 then
						v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v1524) .. "]");
						v1529 = v1377(v1524, (v1285(true)));
					end;
					v1528 = v1529;
				end;
				if v1333[v1528] then
					v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
				else
					v1333[v1528] = true;
				end;
				local l_v1528_0 = v1528;
				v1528 = {
					t = "call", 
					reads = {}, 
					writes = {}, 
					lines = v1205, 
					func = l_v1528_0, 
					args = v1527, 
					namecall_method = v1526
				};
				v1189(v1528, l_v1528_0);
				local v1531 = v1526 and 2 or 1;
				for v1532 = v1531, v1525 do
					local v1533 = v1524 + v1532;
					local v1534;
					if v1391[v1533] then
						v1534 = v1390(v1533, v1391[v1533]);
					else
						local v1535 = v1357[v1533];
						if not v1535 then
							v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v1533) .. "]");
							v1535 = v1377(v1533, (v1285(true)));
						end;
						v1534 = v1535;
					end;
					if v1333[v1534] then
						v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
					else
						v1333[v1534] = true;
					end;
					local l_v1534_0 = v1534;
					table.insert(v1527, l_v1534_0);
					v1189(v1528, l_v1534_0);
				end;
				v1365 = v1528;
			end;
			v1377 = function(v1538, v1539) --[[ Line: 4231 ]] --[[ Name: add_expr ]]
				-- upvalues: v1357 (ref), v1358 (copy)
				if v1538 then
					local v1540 = v1357[v1538];
					if v1540 then
						v1358[v1540] = nil;
					end;
					v1357[v1538] = v1539;
					v1358[v1539] = v1538;
				end;
				return v1539;
			end;
			local function v1542(v1541) --[[ Line: 4242 ]] --[[ Name: expr_varargs ]]
				-- upvalues: v1377 (ref)
				return v1377(v1541, {
					t = "varargs", 
					reads = {}, 
					writes = {}, 
					contributors = {}
				});
			end;
			local function v1545(v1543, v1544) --[[ Line: 4250 ]] --[[ Name: expr_global ]]
				-- upvalues: v1377 (ref)
				assert(v1544);
				return v1377(v1543, {
					t = "global", 
					reads = {}, 
					writes = {}, 
					contributors = {}, 
					name = v1544
				});
			end;
			local function v1550(v1546, v1547) --[[ Line: 4260 ]] --[[ Name: expr_k ]]
				-- upvalues: v1334 (ref), v1336 (ref), v1337 (ref), v1338 (ref), v1335 (ref), v1377 (ref)
				if not v1547 then
					error("Bad Konstant");
				end;
				if v1547.type == 3 then
					local l_value_1 = v1547.value;
					if #l_value_1 > 128 then
						if v1334[l_value_1] then
							local l_v1336_0 = v1336;
							l_v1336_0[l_value_1] = l_v1336_0[l_value_1] + 1;
						elseif v1337[l_value_1] then
							v1338 = v1338 + 1;
							v1334[l_value_1] = "longstring" .. v1338;
							v1336[l_value_1] = 2;
							table.insert(v1335, l_value_1);
						else
							v1337[l_value_1] = true;
						end;
					end;
				end;
				return v1377(v1546, {
					t = "constant", 
					reads = {}, 
					writes = {}, 
					contributors = {}, 
					const = v1547
				});
			end;
			local function v1552(v1551) --[[ Line: 4289 ]] --[[ Name: expr_newtable ]]
				-- upvalues: v1377 (ref)
				return v1377(v1551, {
					t = "new table", 
					reads = {}, 
					writes = {}, 
					contributors = {}, 
					initializers = {}, 
					initializers_order = {}
				});
			end;
			local function v1557(v1553, v1554, v1555, v1556) --[[ Line: 4299 ]] --[[ Name: expr_kindex ]]
				-- upvalues: v1377 (ref)
				return v1377(v1553, {
					t = "constant index", 
					reads = table.clone(v1554.reads), 
					writes = table.clone(v1554.writes), 
					contributors = table.clone(v1554.contributors), 
					table = v1554, 
					index = v1555, 
					namecall = v1556
				});
			end;
			v1390 = function(v1558, v1559) --[[ Line: 4310 ]] --[[ Name: expr_name ]]
				-- upvalues: v1377 (ref), v1301 (ref)
				return v1377(v1558, (v1301(v1559)));
			end;
			local function v1562(v1560, v1561) --[[ Line: 4313 ]] --[[ Name: expr_boolean ]]
				-- upvalues: v1377 (ref)
				return v1377(v1560, {
					t = "boolean", 
					reads = {}, 
					writes = {}, 
					contributors = {}, 
					value = v1561
				});
			end;
			local function v1573(v1563, v1564, v1565) --[[ Line: 4324 ]] --[[ Name: expr_or ]]
				-- upvalues: v1377 (ref), v89 (ref)
				local l_v1377_0 = v1377;
				local l_v1563_0 = v1563;
				local v1568 = {
					t = "or", 
					reads = v89(v1564.reads, v1565.reads), 
					writes = v89(v1564.writes, v1565.writes)
				};
				local l_contributors_4 = v1564.contributors;
				local l_contributors_5 = v1565.contributors;
				local v1571 = table.clone(l_contributors_4);
				for v1572 in pairs(l_contributors_5) do
					v1571[v1572] = true;
				end;
				v1568.contributors = v1571;
				v1568.precedence = 8;
				v1568.lhs = v1564;
				v1568.rhs = v1565;
				return l_v1377_0(l_v1563_0, v1568);
			end;
			local function v1577(v1574, v1575, v1576) --[[ Line: 4334 ]] --[[ Name: expr_and ]]
				-- upvalues: v1377 (ref), v1311 (ref)
				return v1377(v1574, (v1311(v1575, v1576)));
			end;
			local function v1582(v1578, v1579, v1580, v1581) --[[ Line: 4338 ]] --[[ Name: expr_condition ]]
				-- upvalues: v1377 (ref), v1320 (ref)
				return v1377(v1578, (v1320(v1579, v1580, v1581)));
			end;
			local function v1593(v1583, v1584, v1585) --[[ Line: 4341 ]] --[[ Name: expr_add ]]
				-- upvalues: v1377 (ref), v89 (ref)
				local l_v1377_1 = v1377;
				local l_v1583_0 = v1583;
				local v1588 = {
					t = "addition", 
					reads = v89(v1584.reads, v1585.reads), 
					writes = v89(v1584.writes, v1585.writes)
				};
				local l_contributors_6 = v1584.contributors;
				local l_contributors_7 = v1585.contributors;
				local v1591 = table.clone(l_contributors_6);
				for v1592 in pairs(l_contributors_7) do
					v1591[v1592] = true;
				end;
				v1588.contributors = v1591;
				v1588.precedence = 4;
				v1588.lhs = v1584;
				v1588.rhs = v1585;
				return l_v1377_1(l_v1583_0, v1588);
			end;
			local function v1604(v1594, v1595, v1596) --[[ Line: 4351 ]] --[[ Name: expr_sub ]]
				-- upvalues: v1377 (ref), v89 (ref)
				local l_v1377_2 = v1377;
				local l_v1594_0 = v1594;
				local v1599 = {
					t = "subtraction", 
					reads = v89(v1595.reads, v1596.reads), 
					writes = v89(v1595.writes, v1596.writes)
				};
				local l_contributors_8 = v1595.contributors;
				local l_contributors_9 = v1596.contributors;
				local v1602 = table.clone(l_contributors_8);
				for v1603 in pairs(l_contributors_9) do
					v1602[v1603] = true;
				end;
				v1599.contributors = v1602;
				v1599.precedence = 4;
				v1599.lhs = v1595;
				v1599.rhs = v1596;
				return l_v1377_2(l_v1594_0, v1599);
			end;
			local function v1615(v1605, v1606, v1607) --[[ Line: 4361 ]] --[[ Name: expr_mul ]]
				-- upvalues: v1377 (ref), v89 (ref)
				local l_v1377_3 = v1377;
				local l_v1605_0 = v1605;
				local v1610 = {
					t = "multiplication", 
					reads = v89(v1606.reads, v1607.reads), 
					writes = v89(v1606.writes, v1607.writes)
				};
				local l_contributors_10 = v1606.contributors;
				local l_contributors_11 = v1607.contributors;
				local v1613 = table.clone(l_contributors_10);
				for v1614 in pairs(l_contributors_11) do
					v1613[v1614] = true;
				end;
				v1610.contributors = v1613;
				v1610.precedence = 3;
				v1610.lhs = v1606;
				v1610.rhs = v1607;
				return l_v1377_3(l_v1605_0, v1610);
			end;
			local function v1626(v1616, v1617, v1618) --[[ Line: 4371 ]] --[[ Name: expr_div ]]
				-- upvalues: v1377 (ref), v89 (ref)
				local l_v1377_4 = v1377;
				local l_v1616_0 = v1616;
				local v1621 = {
					t = "division", 
					reads = v89(v1617.reads, v1618.reads), 
					writes = v89(v1617.writes, v1618.writes)
				};
				local l_contributors_12 = v1617.contributors;
				local l_contributors_13 = v1618.contributors;
				local v1624 = table.clone(l_contributors_12);
				for v1625 in pairs(l_contributors_13) do
					v1624[v1625] = true;
				end;
				v1621.contributors = v1624;
				v1621.precedence = 3;
				v1621.lhs = v1617;
				v1621.rhs = v1618;
				return l_v1377_4(l_v1616_0, v1621);
			end;
			local function v1637(v1627, v1628, v1629) --[[ Line: 4381 ]] --[[ Name: expr_flrdiv ]]
				-- upvalues: v1377 (ref), v89 (ref)
				local l_v1377_5 = v1377;
				local l_v1627_0 = v1627;
				local v1632 = {
					t = "floor division", 
					reads = v89(v1628.reads, v1629.reads), 
					writes = v89(v1628.writes, v1629.writes)
				};
				local l_contributors_14 = v1628.contributors;
				local l_contributors_15 = v1629.contributors;
				local v1635 = table.clone(l_contributors_14);
				for v1636 in pairs(l_contributors_15) do
					v1635[v1636] = true;
				end;
				v1632.contributors = v1635;
				v1632.precedence = 3;
				v1632.lhs = v1628;
				v1632.rhs = v1629;
				return l_v1377_5(l_v1627_0, v1632);
			end;
			local function v1648(v1638, v1639, v1640) --[[ Line: 4391 ]] --[[ Name: expr_mod ]]
				-- upvalues: v1377 (ref), v89 (ref)
				local l_v1377_6 = v1377;
				local l_v1638_0 = v1638;
				local v1643 = {
					t = "modulus", 
					reads = v89(v1639.reads, v1640.reads), 
					writes = v89(v1639.writes, v1640.writes)
				};
				local l_contributors_16 = v1639.contributors;
				local l_contributors_17 = v1640.contributors;
				local v1646 = table.clone(l_contributors_16);
				for v1647 in pairs(l_contributors_17) do
					v1646[v1647] = true;
				end;
				v1643.contributors = v1646;
				v1643.precedence = 3;
				v1643.lhs = v1639;
				v1643.rhs = v1640;
				return l_v1377_6(l_v1638_0, v1643);
			end;
			local function v1651(v1649, v1650) --[[ Line: 4401 ]] --[[ Name: expr_not ]]
				-- upvalues: v1377 (ref), v1303 (ref)
				return v1377(v1649, (v1303(v1650)));
			end;
			local function v1654(v1652, v1653) --[[ Line: 4404 ]] --[[ Name: expr_neg ]]
				-- upvalues: v1377 (ref)
				return v1377(v1652, {
					t = "negate", 
					reads = table.clone(v1653.reads), 
					writes = table.clone(v1653.writes), 
					contributors = table.clone(v1653.contributors), 
					precedence = 2, 
					rhs = v1653
				});
			end;
			local function v1657(v1655, v1656) --[[ Line: 4414 ]] --[[ Name: expr_len ]]
				-- upvalues: v1377 (ref)
				return v1377(v1655, {
					t = "length", 
					reads = table.clone(v1656.reads), 
					writes = table.clone(v1656.writes), 
					contributors = table.clone(v1656.contributors), 
					precedence = 2, 
					rhs = v1656
				});
			end;
			local function v1668(v1658, v1659, v1660) --[[ Line: 4424 ]] --[[ Name: expr_pow ]]
				-- upvalues: v1377 (ref), v89 (ref)
				local l_v1377_7 = v1377;
				local l_v1658_0 = v1658;
				local v1663 = {
					t = "exponentiation", 
					reads = v89(v1659.reads, v1660.reads), 
					writes = v89(v1659.writes, v1660.writes)
				};
				local l_contributors_18 = v1659.contributors;
				local l_contributors_19 = v1660.contributors;
				local v1666 = table.clone(l_contributors_18);
				for v1667 in pairs(l_contributors_19) do
					v1666[v1667] = true;
				end;
				v1663.contributors = v1666;
				v1663.precedence = 1;
				v1663.lhs = v1659;
				v1663.rhs = v1660;
				return l_v1377_7(l_v1658_0, v1663);
			end;
			local function v1681(v1669, v1670) --[[ Line: 4434 ]] --[[ Name: expr_concat ]]
				-- upvalues: v1377 (ref)
				local v1671 = {};
				local v1672 = {};
				local v1673 = {};
				for _, v1675 in ipairs(v1670) do
					for _, v1677 in ipairs(v1675.reads) do
						table.insert(v1671, v1677);
					end;
					for _, v1679 in ipairs(v1675.writes) do
						table.insert(v1672, v1679);
					end;
					for v1680 in pairs(v1675.contributors) do
						v1673[v1680] = true;
					end;
				end;
				return v1377(v1669, {
					t = "concatenation", 
					reads = v1671, 
					writes = v1672, 
					contributors = v1673, 
					precedence = 0, 
					exprs = v1670
				});
			end;
			local function v1692(v1682, v1683, v1684) --[[ Line: 4456 ]] --[[ Name: expr_gettable ]]
				-- upvalues: v1377 (ref), v89 (ref)
				local l_v1377_8 = v1377;
				local l_v1682_0 = v1682;
				local v1687 = {
					t = "get table", 
					reads = v89(v1683.reads, v1684.reads), 
					writes = v89(v1683.writes, v1684.writes)
				};
				local l_contributors_20 = v1683.contributors;
				local l_contributors_21 = v1684.contributors;
				local v1690 = table.clone(l_contributors_20);
				for v1691 in pairs(l_contributors_21) do
					v1690[v1691] = true;
				end;
				v1687.contributors = v1690;
				v1687.table = v1683;
				v1687.index = v1684;
				return l_v1377_8(l_v1682_0, v1687);
			end;
			local function v1700(v1693, v1694) --[[ Line: 4466 ]] --[[ Name: expr_import ]]
				-- upvalues: l_constants_1 (copy), v1557 (copy), v1545 (copy)
				local v1695 = bit32.rrotate(bit32.band(v1694, 3221225472), 30);
				local v1696 = l_constants_1[bit32.rrotate(bit32.band(v1694, 1072693248), 20)];
				if v1695 == 2 then
					local v1697 = l_constants_1[bit32.rrotate(bit32.band(v1694, 1047552), 10)];
					if v1693 then
						return v1557(v1693, v1545(nil, v1696), v1697);
					else
						return v1557(nil, v1545(nil, v1696), v1697);
					end;
				elseif v1695 == 3 then
					local v1698 = l_constants_1[bit32.rrotate(bit32.band(v1694, 1047552), 10)];
					local v1699 = l_constants_1[bit32.band(v1694, 1023)];
					if v1693 then
						return v1557(v1693, v1557(nil, v1545(nil, v1696), v1698), v1699);
					else
						return v1557(nil, v1557(nil, v1545(nil, v1696), v1698), v1699);
					end;
				elseif v1693 then
					return v1545(v1693, v1696);
				else
					return v1545(nil, v1696);
				end;
			end;
			local function v1717(v1701, v1702, _, v1704) --[[ Line: 4492 ]] --[[ Name: expr_call ]]
				-- upvalues: v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1299 (ref)
				local v1705 = {};
				local v1706;
				if v1391[v1701] then
					v1706 = v1390(v1701, v1391[v1701]);
				else
					local v1707 = v1357[v1701];
					if not v1707 then
						v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v1701) .. "]");
						v1707 = v1377(v1701, (v1285(true)));
					end;
					v1706 = v1707;
				end;
				if v1333[v1706] then
					v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
				else
					v1333[v1706] = true;
				end;
				local l_v1706_0 = v1706;
				v1706 = table.clone(l_v1706_0.reads);
				local _ = table.clone(l_v1706_0.writes);
				local _ = table.clone(l_v1706_0.contributors);
				local v1711 = v1704 and 2 or 1;
				for v1712 = v1711, v1702 do
					local v1713 = v1701 + v1712;
					local v1714;
					if v1391[v1713] then
						v1714 = v1390(v1713, v1391[v1713]);
					else
						local v1715 = v1357[v1713];
						if not v1715 then
							v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v1713) .. "]");
							v1715 = v1377(v1713, (v1285(true)));
						end;
						v1714 = v1715;
					end;
					if v1333[v1714] then
						v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
					else
						v1333[v1714] = true;
					end;
					table.insert(v1705, v1714);
				end;
				local v1716 = v1299(l_v1706_0, v1705, v1704 and true or false);
				return v1377(v1701, v1716);
			end;
			local v1718 = {};
			local function _(v1719) --[[ Line: 4505 ]] --[[ Name: add_active_upvalue ]]
				-- upvalues: v1392 (copy), v1718 (copy)
				v1392[v1719] = true;
				v1718[v1719] = true;
			end;
			local function _(v1721) --[[ Line: 4509 ]] --[[ Name: remove_active_upvalue ]]
				-- upvalues: v1392 (copy), v1718 (copy)
				v1392[v1721] = nil;
				v1718[v1721] = nil;
			end;
			local function v1798(v1723, v1724) --[[ Line: 4513 ]] --[[ Name: expr_function ]]
				-- upvalues: v1131 (ref), v1197 (ref), v1215 (ref), v1208 (ref), v1143 (ref), v1225 (ref), v1377 (ref), v1205 (ref), v1518 (copy), v1391 (copy), v1419 (copy), v1489 (ref), v1361 (ref), v1364 (copy), v1349 (copy), v1373 (copy), l_prefix_warning_1 (ref), v1390 (ref), v1357 (ref), v1360 (ref), v1285 (ref), v1359 (ref), v1392 (copy), v1718 (copy), v1427 (copy), v1209 (ref), v1347 (ref)
				local v1725 = {};
				local v1726 = nil;
				local v1727 = nil;
				if v1724.debug_name and v1131.use_proto_debugnames then
					v1726 = v1724.debug_name;
					v1727 = true;
				else
					local v1728 = "var" .. tostring(v1197);
					local v1729 = v1215[v1728];
					local l_v1728_0 = v1728;
					local v1731 = v1729 or 1;
					while v1208[l_v1728_0] or v1143[l_v1728_0] do
						v1731 = v1731 + 1;
						l_v1728_0 = v1728 .. "_" .. v1731;
					end;
					v1215[v1728] = v1731;
					local l_l_v1728_0_0 = l_v1728_0;
					v1197 = v1197 + 1;
					v1726 = l_l_v1728_0_0;
				end;
				local l_v1225_4 = v1225;
				local l_v1726_0 = v1726;
				local v1735 = v1215[l_v1726_0];
				local l_l_v1726_0_0 = l_v1726_0;
				local v1737 = v1735 or 1;
				while v1208[l_l_v1726_0_0] or v1143[l_l_v1726_0_0] do
					v1737 = v1737 + 1;
					l_l_v1726_0_0 = l_v1726_0 .. "_" .. v1737;
				end;
				v1215[l_v1726_0] = v1737;
				l_v1225_4 = l_v1225_4(l_l_v1726_0_0, {
					beginning = v1723, 
					ending = v1723
				}, {});
				local v1738 = v1377(v1723, {
					t = "function", 
					reads = {}, 
					writes = {}, 
					contributors = v1725, 
					varname = l_v1225_4
				});
				l_v1726_0 = v1205[#v1205];
				v1518(v1723, v1738);
				if not v1391[v1723] then
					v1419({
						beginning = v1723, 
						ending = v1723
					}, v1738, {
						l_v1225_4
					});
				end;
				v1735 = v1205[#v1205];
				l_l_v1726_0_0 = #v1205;
				v1489 = true;
				v1737 = false;
				local v1739 = {};
				for v1740 = v1361 + 1, #v1364 do
					local v1741 = v1364[v1740];
					local l_inst_37 = v1741.inst;
					if v1741.opinfo.opname == "CAPTURE" then
						local v1743 = bit32.band(bit32.rshift(l_inst_37, 8), 255);
						if v1743 == 2 then
							if v1349 then
								local v1744 = v1349.upvalues[bit32.band(bit32.rshift(l_inst_37, 16), 255)];
								assert(v1744.name.attributes.is_upvalue);
								table.insert(v1739, {
									name = v1744.name, 
									access = v1744.access == "readonly" and "copied, readonly" or v1744.access == "read and write" and "copied, read and write" or v1744.access
								});
							else
								local v1745 = "UNK" .. math.random(1, 1000000000);
								v1373(l_prefix_warning_1 .. ": Malformed upref, replacing with `" .. v1745 .. "`");
								table.insert(v1739, {
									name = v1225(v1745, {
										beginning = -1, 
										ending = -1
									}, {}), 
									access = "copied, unknown"
								});
							end;
						elseif v1743 == 0 or v1743 == 1 then
							local v1746 = bit32.band(bit32.rshift(l_inst_37, 16), 255);
							if v1746 == v1723 then
								v1737 = true;
								local v1747;
								if v1391[v1723] then
									v1747 = v1390(v1723, v1391[v1723]);
								else
									local v1748 = v1357[v1723];
									if not v1748 then
										v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v1723) .. "]");
										v1748 = v1377(v1723, (v1285(true)));
									end;
									v1747 = v1748;
								end;
								if v1747.t ~= "name" then
									local l_v1419_0 = v1419;
									local v1750 = {
										beginning = v1723, 
										ending = v1723
									};
									local l_v1738_0 = v1738;
									local v1752 = {};
									local v1753 = {
										beginning = v1723, 
										ending = v1723
									};
									local v1754 = {};
									local l_v1225_5 = v1225;
									local v1756 = "var" .. tostring(v1197);
									local v1757 = v1215[v1756];
									local l_v1756_0 = v1756;
									local v1759 = v1757 or 1;
									while v1208[l_v1756_0] or v1143[l_v1756_0] do
										v1759 = v1759 + 1;
										l_v1756_0 = v1756 .. "_" .. v1759;
									end;
									v1215[v1756] = v1759;
									local l_l_v1756_0_0 = l_v1756_0;
									v1197 = v1197 + 1;
									local v1761 = l_v1225_5(l_l_v1756_0_0, v1753, v1754);
									v6(v1752, 1, v1761);
									l_v1419_0(v1750, l_v1738_0, v1752);
									if v1391[v1723] then
										v1747 = v1390(v1723, v1391[v1723]);
									else
										v1750 = v1357[v1723];
										if not v1750 then
											v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v1723) .. "]");
											v1750 = v1377(v1723, (v1285(true)));
										end;
										v1747 = v1750;
									end;
									l_v1419_0 = v1359[v1360];
									if l_v1419_0 then
										for _ = #l_v1419_0, 1, -1 do
											error("message");
										end;
									end;
								end;
								v1392[v1723] = true;
								v1718[v1723] = true;
								local l_name_5 = v1747.name;
								if v1743 == 0 then
									if not l_name_5.attributes.is_upvalue then
										l_name_5.attributes.is_upvalue = "read";
									end;
									table.insert(v1739, {
										name = l_name_5, 
										access = "readonly"
									});
								else
									l_name_5.attributes.is_upvalue = "write";
									table.insert(v1739, {
										name = l_name_5, 
										access = "read and write"
									});
								end;
							else
								local v1764;
								if v1391[v1746] then
									v1764 = v1390(v1746, v1391[v1746]);
								else
									local v1765 = v1357[v1746];
									if not v1765 then
										v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v1746) .. "]");
										v1765 = v1377(v1746, (v1285(true)));
									end;
									v1764 = v1765;
								end;
								if v1764.t ~= "name" then
									local l_v1427_0 = v1427;
									local v1767 = {
										beginning = v1746, 
										ending = v1746
									};
									local v1768 = {};
									local v1769 = {
										beginning = v1746, 
										ending = v1746
									};
									local v1770 = {};
									local l_v1225_6 = v1225;
									local v1772 = "var" .. tostring(v1197);
									local v1773 = v1215[v1772];
									local l_v1772_0 = v1772;
									local v1775 = v1773 or 1;
									while v1208[l_v1772_0] or v1143[l_v1772_0] do
										v1775 = v1775 + 1;
										l_v1772_0 = v1772 .. "_" .. v1775;
									end;
									v1215[v1772] = v1775;
									local l_l_v1772_0_0 = l_v1772_0;
									v1197 = v1197 + 1;
									local v1777 = l_v1225_6(l_l_v1772_0_0, v1769, v1770);
									v6(v1768, 1, v1777);
									l_v1427_0(v1767, v1768);
									if v1391[v1746] then
										v1764 = v1390(v1746, v1391[v1746]);
									else
										v1767 = v1357[v1746];
										if not v1767 then
											v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v1746) .. "]");
											v1767 = v1377(v1746, (v1285(true)));
										end;
										v1764 = v1767;
									end;
								end;
								v1392[v1746] = true;
								v1718[v1746] = true;
								if v1764.name.init_expr then
									v1725[v1764.name.init_expr] = true;
								end;
								if v1743 == 0 then
									if not v1764.name.attributes.is_upvalue then
										v1764.name.attributes.is_upvalue = "read";
									end;
									table.insert(v1739, {
										name = v1764.name, 
										access = "readonly"
									});
								else
									v1764.name.attributes.is_upvalue = "write";
									table.insert(v1739, {
										name = v1764.name, 
										access = "read and write"
									});
								end;
							end;
						else
							error((("Unknown LCT %*"):format(v1743)));
						end;
					else
						v1361 = v1740 - 1;
						break;
					end;
				end;
				if #v1739 > 0 then
					table.move(v1739, 1, #v1739, 0, v1739);
					table.remove(v1739, #v1739);
				end;
				if l_v1726_0 ~= v1735 then
					local l_v1205_0 = v1205;
					local v1779 = table.remove(v1205, l_l_v1726_0_0);
					assert(v1779);
					table.insert(l_v1205_0, v1779);
				end;
				local l_v1205_1 = v1205;
				v1205 = {};
				local v1781 = {};
				for v1782 = 0, v1724.params_count - 1 do
					local l_v1225_7 = v1225;
					local l_name_6 = l_v1225_4.name;
					local v1785 = "arg" .. tostring(v1209);
					if v1131.exact_argument_names then
						v1785 = l_name_6 .. "_" .. v1785;
					end;
					local l_v1785_0 = v1785;
					local v1787 = v1215[l_v1785_0];
					local l_l_v1785_0_0 = l_v1785_0;
					local v1789 = v1787 or 1;
					while v1208[l_l_v1785_0_0] or v1143[l_l_v1785_0_0] do
						v1789 = v1789 + 1;
						l_l_v1785_0_0 = l_v1785_0 .. "_" .. v1789;
					end;
					v1215[l_v1785_0] = v1789;
					v1785 = l_l_v1785_0_0;
					v1209 = v1209 + 1;
					l_v1225_7 = l_v1225_7(v1785, {
						beginning = v1782, 
						ending = v1782
					}, v1781);
					l_v1225_7.func_name = l_v1225_4;
					local _ = l_v1225_7;
				end;
				v1209 = 1;
				local v1791 = v1347(v1724, {
					args = v1781, 
					upvalues = v1739, 
					name = v1726
				});
				local v1792 = {
					t = "function", 
					reads = {}, 
					writes = {}, 
					contributors = v1725, 
					is_self_referencing = v1737, 
					name = v1726, 
					varname = l_v1225_4, 
					name_known = v1727, 
					args = v1781, 
					is_vararg = v1724.is_vararg, 
					line_defined = v1724.line_defined, 
					upvalues_count = v1724.upvalues_count, 
					upvalues = v1739, 
					ast = v1791
				};
				table.clear(v1738);
				for v1793, v1794 in pairs(v1792) do
					v1738[v1793] = v1794;
				end;
				for _, v1796 in ipairs(v1781) do
					local l_name_7 = v1796.name;
					if not v1208[l_name_7] then
						error((("[free] Variable %* not allocated"):format(v1796.name)));
					end;
					v1208[l_name_7] = nil;
				end;
				l_v1225_4.init_expr = v1738;
				l_v1225_4.var_num = 1;
				v1205 = l_v1205_1;
				return v1738;
			end;
			if v1356 == 0 and not l_code_1[0] then
				v1373((("%*: Empty proto"):format(l_prefix_warning_1)));
				v300 = l_v300_0;
				return v1205;
			else
				if v1349 and v1349.args then
					for v1799, v1800 in ipairs(v1349.args) do
						v1391[v1799 - 1] = v1800;
					end;
				end;
				local function _(v1801) --[[ Line: 4713 ]] --[[ Name: increment_code_index ]]
					-- upvalues: v181 (ref), v1360 (ref)
					local v1802 = v181[v1801];
					if not v1802 then
						v1360 = v1360 + 1;
						return;
					elseif v1802.aux then
						v1360 = v1360 + 2;
						return;
					else
						v1360 = v1360 + 1;
						return;
					end;
				end;
				local function _() --[[ Line: 4726 ]] --[[ Name: get_aux ]]
					-- upvalues: l_code_1 (copy), v1360 (ref)
					local v1804 = l_code_1[v1360 + 1];
					if not v1804 then
						error("Expected aux");
					end;
					return v1804;
				end;
				local function _(v1806) --[[ Line: 4733 ]] --[[ Name: flip_visitor_condition ]]
					-- upvalues: v215 (ref)
					local l_condition_0 = v1806.condition;
					assert(l_condition_0);
					v1806.condition = v215[l_condition_0];
				end;
				local function _(v1809) --[[ Line: 4738 ]] --[[ Name: swap_visitor_condition ]]
					-- upvalues: v216 (ref)
					local l_condition_1 = v1809.condition;
					local l_lhs_0 = v1809.lhs;
					local l_rhs_0 = v1809.rhs;
					assert(l_condition_1);
					assert(l_lhs_0);
					assert(l_rhs_0);
					v1809.lhs = l_rhs_0;
					v1809.rhs = l_lhs_0;
					v1809.condition = v216[l_condition_1];
				end;
				local v1814 = {};
				local v1815 = {};
				local _ = function(v1816, _, v1818) --[[ Line: 4751 ]] --[[ Name: add_visitor ]]
					-- upvalues: v1815 (copy)
					v1815[v1816] = v1818;
				end;
				local function v1826(v1820) --[[ Line: 4761 ]] --[[ Name: get_visitor_lhs_rhs ]]
					if v1820.condition then
						local l_code_2 = v1820.code;
						local l_opname_1 = l_code_2.opname;
						if l_opname_1 == "JUMPXEQKNIL" or l_opname_1 == "JUMPXEQKB" or l_opname_1 == "JUMPXEQKN" or l_opname_1 == "JUMPXEQKS" then
							local l_rhs_1 = v1820.rhs;
							assert(l_rhs_1);
							return bit32.band(bit32.rshift(l_code_2.inst, 8), 255), l_rhs_1;
						elseif l_opname_1 == "JUMPIFEQ" or l_opname_1 == "JUMPIFLE" or l_opname_1 == "JUMPIFLT" or l_opname_1 == "JUMPIFNOTEQ" or l_opname_1 == "JUMPIFNOTLE" or l_opname_1 == "JUMPIFNOTLT" then
							local l_aux_8 = l_code_2.aux;
							assert(l_aux_8);
							local _ = v1820.rhs;
							return bit32.band(bit32.rshift(l_code_2.inst, 8), 255), l_aux_8;
						elseif l_opname_1 == "JUMPIF" or l_opname_1 == "JUMPIFNOT" then
							return (bit32.band(bit32.rshift(l_code_2.inst, 8), 255));
						elseif l_opname_1 == "JUMP" or l_opname_1 == "JUMPBACK" or l_opname_1 == "JUMPX" then
							return;
						else
							error((("Unknown visitor %*"):format((tostring(l_opname_1)))));
							return;
						end;
					else
						return;
					end;
				end;
				v1350:end_benchmark("Initialization");
				v1350:start_benchmark("Initial Processing");
				local v1827 = 1;
				local v1828 = 0;
				local v1829 = {};
				local v1830 = {};
				local function _(v1831) --[[ Line: 4789 ]] --[[ Name: add_instruction ]]
					-- upvalues: v1364 (copy), v1829 (copy), v1830 (copy)
					table.insert(v1364, v1831);
					v1829[v1831.code_index] = v1831.actual_code_index;
					v1830[v1831.index] = v1831.actual_index;
				end;
				while v1360 <= v1356 do
					local v1833 = l_code_1[v1360];
					local v1834 = bit32.band(v1833, 255);
					v1361 = #v1364 + 1;
					local v1835 = v181[v1834];
					if not v1835 then
						local v1836 = ("Unknown opcode 0x%* (%* reversed: 0x%*)"):format(v64[bit32.band(v1833, 255)], v16, v64[v17[bit32.band(v1833, 255)]]);
						error(v1836);
						v551 = v551 + 1;
						local v1837 = v181[v1834];
						if not v1837 then
							v1360 = v1360 + 1;
						elseif v1837.aux then
							v1360 = v1360 + 2;
						else
							v1360 = v1360 + 1;
						end;
					else
						local l_opname_2 = v1835.opname;
						local v1839 = {
							index = v1361, 
							code_index = v1360, 
							actual_index = v1827, 
							actual_code_index = v1828, 
							opinfo = v1835, 
							opname = l_opname_2, 
							opcode = v1834, 
							inst = v1833, 
							aux = if v1835.aux then l_code_1[v1360 + 1] else nil, 
							size = v1835.aux and 2 or 1
						};
						table.insert(v1364, v1839);
						v1829[v1839.code_index] = v1839.actual_code_index;
						v1830[v1839.index] = v1839.actual_index;
						v1362[v1360] = v1361;
						v1363[v1361] = v1360;
						if v189[v1834] then
							if l_opname_2 == "JUMPXEQKNIL" or l_opname_2 == "JUMPXEQKB" or l_opname_2 == "JUMPXEQKN" or l_opname_2 == "JUMPXEQKS" then
								buffer.writeu16(v44, 0, (bit32.band(bit32.rshift(v1833, 16), 65535)));
								local v1840 = buffer.readi16(v44, 0);
								local v1841 = l_code_1[v1360 + 1];
								if not v1841 then
									error("Expected aux");
								end;
								local l_v1841_0 = v1841;
								v1841 = nil;
								v1841 = if l_opname_2 == "JUMPXEQKNIL" then v1377(nil, (v1285(true))) else if l_opname_2 == "JUMPXEQKB" then v1562(nil, bit32.band(l_v1841_0, 1) > 0) else v1550(nil, l_constants_1[bit32.band(l_v1841_0, 16777215)]);
								local v1843 = false;
								if bit32.band(l_v1841_0, 2147483648) > 0 then
									v1843 = true;
								end;
								v1815[v1361] = {
									code = v1839, 
									index = v1361, 
									destination = v1360 + v1840 + 1, 
									condition = v1843 and "~=" or "==", 
									lhs = nil, 
									rhs = v1841
								};
							elseif l_opname_2 == "JUMPIFEQ" or l_opname_2 == "JUMPIFLE" or l_opname_2 == "JUMPIFLT" or l_opname_2 == "JUMPIFNOTEQ" or l_opname_2 == "JUMPIFNOTLE" or l_opname_2 == "JUMPIFNOTLT" then
								buffer.writeu16(v44, 0, (bit32.band(bit32.rshift(v1833, 16), 65535)));
								local v1844 = buffer.readi16(v44, 0);
								local v1845 = nil;
								local v1846 = string.sub(l_opname_2, #l_opname_2 - 1, #l_opname_2);
								v1845 = if string.match(l_opname_2, "NOT") then v1846 == "EQ" and "~=" or v1846 == "LE" and ">" or ">=" else v1846 == "EQ" and "==" or v1846 == "LE" and "<=" or "<";
								assert(v1845, l_opname_2);
								v1815[v1361] = {
									code = v1839, 
									index = v1361, 
									destination = v1360 + v1844 + 1, 
									condition = v1845
								};
							elseif l_opname_2 == "JUMPIF" or l_opname_2 == "JUMPIFNOT" then
								buffer.writeu16(v44, 0, (bit32.band(bit32.rshift(v1833, 16), 65535)));
								local v1847 = buffer.readi16(v44, 0);
								v1815[v1361] = {
									code = v1839, 
									index = v1361, 
									destination = v1360 + v1847 + 1, 
									condition = l_opname_2 == "JUMPIFNOT" and "not exist" or "exist"
								};
							elseif l_opname_2 == "JUMP" or l_opname_2 == "JUMPBACK" or l_opname_2 == "JUMPX" then
								local v1848;
								if l_opname_2 == "JUMPX" then
									buffer.writeu32(v44, 0, (bit32.rshift(v1833, 8)));
									v1848 = bit32.rshift(buffer.readi32(v44, 1), 16);
								else
									buffer.writeu16(v44, 0, (bit32.band(bit32.rshift(v1833, 16), 65535)));
									v1848 = buffer.readi16(v44, 0);
								end;
								v1815[v1361] = {
									code = v1839, 
									index = v1361, 
									destination = v1360 + v1848 + 1
								};
							elseif l_opname_2 == "FORNLOOP" then
								local v1849 = bit32.band(bit32.rshift(v1833, 8), 255);
								buffer.writeu16(v44, 0, (bit32.band(bit32.rshift(v1833, 16), 65535)));
								local v1850 = buffer.readi16(v44, 0);
								local v1851 = {
									code = v1839, 
									index = v1361, 
									destination = v1360 + v1850 + 1
								};
								local v1852 = {
									type = "numeric", 
									variable_count = 1
								};
								local v1853 = v1849 + 2;
								v1852.variables_reg_range = {
									beginning = v1853, 
									ending = v1853
								};
								local v1854 = {};
								local v1855 = v1849 + 2;
								v1854.register_range = if v1855 then {
									beginning = v1849, 
									ending = v1855
								} else {
										beginning = v1849, 
										ending = v1849
									};
								v1854.index_reg = v1849 + 2;
								v1854.end_reg = v1849;
								v1854.step_reg = v1849 + 1;
								v1852.args = v1854;
								v1851.for_info = v1852;
								v1815[v1361] = v1851;
							elseif l_opname_2 == "FORGLOOP" then
								local v1856 = bit32.band(bit32.rshift(v1833, 8), 255);
								buffer.writeu16(v44, 0, (bit32.band(bit32.rshift(v1833, 16), 65535)));
								local v1857 = buffer.readi16(v44, 0);
								local v1858 = l_code_1[v1360 + 1];
								if not v1858 then
									error("Expected aux");
								end;
								v1858 = bit32.band(v1858, 255);
								assert(v1858 > 0);
								local v1859 = {
									code = v1839, 
									index = v1361, 
									destination = v1360 + v1857 + 1
								};
								local v1860 = {
									type = "generic", 
									variable_count = v1858
								};
								local v1861 = v1856 + 3;
								local v1862 = v1856 + 2 + v1858;
								v1860.variables_reg_range = if v1862 then {
									beginning = v1861, 
									ending = v1862
								} else {
										beginning = v1861, 
										ending = v1861
									};
								local v1863 = {};
								v1862 = v1856 + 2;
								v1863.register_range = if v1862 then {
									beginning = v1856, 
									ending = v1862
								} else {
										beginning = v1856, 
										ending = v1856
									};
								v1863.generator_reg = v1856;
								v1863.state_reg = v1856 + 1;
								v1863.index_reg = v1856 + 2;
								v1860.args = v1863;
								v1860.code = v1839;
								v1859.for_info = v1860;
								v1815[v1361] = v1859;
							elseif l_opname_2 == "LOADB" then
								local v1864 = bit32.band(bit32.rshift(v1833, 24), 255);
								if v1864 ~= 0 then
									local v1865 = {
										index = v1361, 
										code_index = v1360, 
										actual_index = v1827, 
										actual_code_index = v1828
									};
									local l_JUMP_0 = v180.JUMP;
									if not l_JUMP_0 then
										error((("Unknown opname %*"):format("JUMP")));
									end;
									v1865.opinfo = l_JUMP_0;
									v1865.opname = "JUMP";
									local l_JUMP_1 = v180.JUMP;
									if not l_JUMP_1 then
										error((("Unknown opname %*"):format("JUMP")));
									end;
									v1865.opcode = l_JUMP_1.opcode;
									local l_JUMP_2 = v180.JUMP;
									if not l_JUMP_2 then
										error((("Unknown opname %*"):format("JUMP")));
									end;
									v1865.inst = bit32.bor(l_JUMP_2.opcode, (bit32.lshift(v1864, 16)));
									v1865.size = 1;
									table.insert(v1364, v1865);
									v1361 = v1361 + 1;
									v1363[v1361] = v1360;
									v1815[v1361] = {
										code = v1865, 
										index = v1361, 
										destination = v1360 + v1864 + 1
									};
								end;
							end;
						end;
						v1827 = v1827 + 1;
						v1828 = v1828 + v1839.size;
						local v1869 = v181[v1834];
						if not v1869 then
							v1360 = v1360 + 1;
						elseif v1869.aux then
							v1360 = v1360 + 2;
						else
							v1360 = v1360 + 1;
						end;
					end;
				end;
				v1350:end_benchmark("Initial Processing");
				v1350:start_benchmark("Initial Labeling");
				for _, v1871 in pairs(v1815) do
					v1282[v1871.code.code_index] = v1283();
					assert(v1871.destination);
					v1871.destination = v1362[v1871.destination];
					assert(v1871.destination, "Broken control flow");
					local v1872 = v1814[v1871.destination];
					if v1872 then
						table.insert(v1872, v1871);
					else
						v1814[v1871.destination] = {
							v1871
						};
					end;
				end;
				v1350:end_benchmark("Initial Labeling");
				v1350:start_benchmark("Block Loading");
				v1361 = 0;
				v1360 = 0;
				local v1873 = {};
				local v1874 = {};
				local v1875 = false;
				local v1876 = {};
				local v1877 = {};
				local v1878 = 1;
				for v1879, v1880 in ipairs(v1364) do
					local v1881 = v1815[v1879];
					if v1881 then
						if v1877[1] and v1877[1] == v1880 then
							table.remove(v1877, 1);
							error("Shouldn't happen");
						end;
						local v1882 = v1814[v1879];
						if v1882 and v1878 ~= v1879 then
							assert(#v1882 > 0);
							assert(v1878 < v1879);
							table.insert(v1876, {
								insts = v1877, 
								index = v1878
							});
							table.insert(v1876, {
								insts = {}, 
								index = v1879, 
								visitor = v1881
							});
						else
							table.insert(v1876, {
								insts = v1877, 
								index = v1878, 
								visitor = v1881
							});
						end;
						v1878 = v1879 + 1;
						v1877 = {};
					elseif v1814[v1879] then
						local v1883 = false;
						if #v1877 == 0 then
							v1883 = true;
							table.insert(v1877, v1880);
						end;
						table.insert(v1876, {
							insts = v1877, 
							index = v1878
						});
						if v1878 == v1879 then
							if v1883 then
								v1878 = v1879 + 1;
								v1877 = {};
							else
								v1878 = v1879 + 1;
								v1877 = {
									v1880
								};
							end;
						else
							v1878 = v1879;
							v1877 = {
								v1880
							};
						end;
					else
						table.insert(v1877, v1880);
					end;
				end;
				if v1878 <= #v1364 then
					table.insert(v1876, {
						insts = v1877, 
						index = v1878
					});
				end;
				local v1884 = {};
				local v1885 = {};
				local v1886 = {};
				for _, v1888 in ipairs(v1876) do
					local l_visitor_0 = v1888.visitor;
					local v1890 = nil;
					if l_visitor_0 then
						v1890 = l_visitor_0.condition;
						v1886[v1888] = l_visitor_0.destination;
					end;
					local v1891 = {
						insts = v1888.insts, 
						index = v1888.index, 
						visitor = l_visitor_0, 
						children = {}
					};
					v1884[v1888.index] = v1891;
					table.insert(v1885, v1891);
				end;
				for v1892, v1893 in ipairs(v1876) do
					local v1894 = v1886[v1893];
					if v1894 then
						assert(v1893.visitor);
						local v1895 = v1884[v1894];
						assert(v1895);
						local v1896 = v1884[v1893.index];
						local l_children_0 = v1896.children;
						table.insert(l_children_0, v1895);
						if v1893.visitor.condition then
							local v1898 = v1876[v1892 + 1];
							if v1898 then
								local v1899 = v1884[v1898.index];
								if v1899 ~= v1896 and v1899 ~= v1895 then
									table.insert(l_children_0, v1899);
								end;
							end;
						end;
					else
						local v1900 = v1876[v1892 + 1];
						if v1900 then
							table.insert(v1884[v1893.index].children, v1884[v1900.index]);
						end;
					end;
				end;
				local v1901 = {};
				local v1902 = table.clone(v1366);
				local v1903 = table.clone(v1366);
				local v1904 = {};
				local function v1905() --[[ Line: 5155 ]] --[[ Name: print_cfg ]]

				end;
				local l_v1904_0 = v1904 --[[ copy: 109 -> 170 ]];
				local function v1910(v1907) --[[ Line: 5212 ]] --[[ Name: check_if_hl_blocks_with_gotos ]]
					-- upvalues: v1366 (copy), l_v1904_0 (copy)
					local l_type_2 = v1907.type;
					if l_type_2 == "ifthen" then
						if v1366[v1907.data.pass].jump then
							l_v1904_0[v1907] = true;
							return;
						end;
					elseif l_type_2 == "ifthenelse" then
						local l_else__0 = v1907.data.else_;
						assert(l_else__0);
						if v1366[l_else__0].jump then
							l_v1904_0[v1907] = true;
							return;
						end;
					end;
					l_v1904_0[v1907] = nil;
				end;
				local function v1914(v1911, v1912) --[[ Line: 5231 ]] --[[ Name: hl_block_references ]]
					-- upvalues: v1873 (copy), v1874 (copy)
					if v1873[v1912.index] then
						local v1913 = v1874[v1912.index];
						if v1913 then
							if not table.find(v1913, v1911) then
								table.insert(v1913, v1911);
								return;
							else
								error("TEMPORARY thing");
								return;
							end;
						else
							v1874[v1912.index] = {
								v1911
							};
						end;
					end;
				end;
				local l_v1902_0 = v1902 --[[ copy: 107 -> 171 ]];
				local l_v1901_0 = v1901 --[[ copy: 106 -> 172 ]];
				local l_v1914_0 = v1914 --[[ copy: 112 -> 173 ]];
				local function v1922(v1918, v1919) --[[ Line: 5245 ]] --[[ Name: add_hl_block ]]
					-- upvalues: v1366 (copy), l_v1902_0 (copy), l_v1901_0 (copy), l_v1914_0 (copy)
					table.insert(v1366, v1918);
					table.insert(l_v1902_0, v1918);
					if v1918.index > 0 then
						l_v1901_0[v1918.index] = v1918;
					end;
					if v1919 then
						for _, v1921 in ipairs(v1919) do
							l_v1914_0(v1918, v1921);
						end;
					end;
				end;
				local l_v1905_0 = v1905 --[[ copy: 110 -> 174 ]];
				local function v1928(v1924, v1925) --[[ Line: 5258 ]] --[[ Name: replace_hl_block ]]
					-- upvalues: v1366 (copy), l_v1902_0 (copy), l_v1901_0 (copy), l_v1905_0 (copy)
					local l_hl_index_0 = v1924.hl_index;
					assert(l_hl_index_0 == v1925.hl_index);
					local l_index_0 = v1924.index;
					assert(l_index_0 == v1925.index);
					v1366[l_hl_index_0] = v1925;
					l_v1902_0[l_hl_index_0] = v1925;
					if l_index_0 > 0 then
						assert(l_v1901_0[l_index_0]);
						l_v1901_0[l_index_0] = v1925;
					end;
					l_v1905_0();
				end;
				for _, v1930 in ipairs(v1885) do
					assert(v1930.index == v1884[v1930.index].index);
					local l_insts_0 = v1884[v1930.index].insts;
					local v1932 = #v1366 + 1;
					local v1933 = {
						code_index = v1363[v1930.index], 
						index = v1930.index, 
						actual_code_index = v1829[v1363[v1930.index]], 
						actual_index = v1830[v1930.index], 
						hl_index = v1932, 
						length = if v1930.visitor then #l_insts_0 + 1 else #l_insts_0, 
						type = "single", 
						data = l_insts_0, 
						parents = {}, 
						children = {}, 
						jumped_to_by = {}, 
						_visitor = v1930.visitor
					};
					v1922(v1933);
					table.insert(v1903, v1933);
					v1873[v1930.index] = v1933;
				end;
				local l_v1922_0 = v1922 --[[ copy: 113 -> 175 ]];
				local function v1937() --[[ Line: 5293 ]] --[[ Name: create_empty_hl_block ]]
					-- upvalues: v1366 (copy), l_v1922_0 (copy)
					local v1935 = #v1366 + 1;
					local v1936 = {
						code_index = 0, 
						index = 0, 
						actual_code_index = 0, 
						actual_index = 0, 
						hl_index = v1935, 
						length = 0, 
						type = "single", 
						data = {}, 
						parents = {}, 
						children = {}, 
						jumped_to_by = {}
					};
					l_v1922_0(v1936);
					return v1936;
				end;
				local function v1941(v1938, v1939) --[[ Line: 5313 ]] --[[ Name: make_hl_block_jump ]]
					-- upvalues: v1366 (copy), v1873 (copy)
					assert(not v1938.jump);
					v1938.jump = {
						type = "goto", 
						destination = v1939
					};
					local v1940 = v1366[v1939];
					assert(v1940);
					table.insert(v1873[v1940.index].jumped_to_by, v1938.hl_index);
				end;
				local function v1948(v1942) --[[ Line: 5324 ]] --[[ Name: finalize_hl_block_jump ]]
					-- upvalues: v1366 (copy), v1873 (copy)
					local l_jump_0 = v1942.jump;
					assert(l_jump_0);
					local v1944 = v1366[l_jump_0.destination];
					assert(v1944);
					local l_hl_index_1 = v1942.hl_index;
					local l_jumped_to_by_0 = v1873[v1944.index].jumped_to_by;
					local v1947 = table.find(l_jumped_to_by_0, l_hl_index_1);
					assert(v1947);
					table.remove(l_jumped_to_by_0, v1947);
				end;
				local function v1955(v1949) --[[ Line: 5335 ]] --[[ Name: stop_hl_block_jump ]]
					-- upvalues: v1366 (copy), v1873 (copy)
					local l_jump_1 = v1949.jump;
					assert(l_jump_1);
					local v1951 = v1366[l_jump_1.destination];
					assert(v1951);
					local l_hl_index_2 = v1949.hl_index;
					local l_jumped_to_by_1 = v1873[v1951.index].jumped_to_by;
					local v1954 = table.find(l_jumped_to_by_1, l_hl_index_2);
					assert(v1954);
					table.remove(l_jumped_to_by_1, v1954);
					v1949.jump = nil;
				end;
				local function v1963(v1956, v1957) --[[ Line: 5339 ]] --[[ Name: change_hl_block_jump ]]
					-- upvalues: v1366 (copy), v1873 (copy)
					local l_jump_2 = v1956.jump;
					assert(l_jump_2);
					local v1959 = v1366[l_jump_2.destination];
					assert(v1959);
					local l_hl_index_3 = v1956.hl_index;
					local l_jumped_to_by_2 = v1873[v1959.index].jumped_to_by;
					local v1962 = table.find(l_jumped_to_by_2, l_hl_index_3);
					assert(v1962);
					table.remove(l_jumped_to_by_2, v1962);
					v1956.jump = nil;
					assert(not v1956.jump);
					v1956.jump = {
						type = "goto", 
						destination = v1957
					};
					l_jump_2 = v1366[v1957];
					assert(l_jump_2);
					table.insert(v1873[l_jump_2.index].jumped_to_by, v1956.hl_index);
				end;
				local l_v1937_0 = v1937 --[[ copy: 115 -> 176 ]];
				local function v1968(v1965) --[[ Line: 5343 ]] --[[ Name: create_jump_hl_block ]]
					-- upvalues: l_v1937_0 (copy), v1366 (copy), v1873 (copy)
					local v1966 = l_v1937_0();
					assert(not v1966.jump);
					v1966.jump = {
						type = "goto", 
						destination = v1965
					};
					local v1967 = v1366[v1965];
					assert(v1967);
					table.insert(v1873[v1967.index].jumped_to_by, v1966.hl_index);
					return v1966;
				end;
				local function v1970() --[[ Line: 5349 ]] --[[ Name: create_break_hl_block ]]
					-- upvalues: l_v1937_0 (copy)
					local v1969 = l_v1937_0();
					v1969.jump = {
						type = "break", 
						destination = 0
					};
					return v1969;
				end;
				local function v1973(v1971, v1972) --[[ Line: 5359 ]] --[[ Name: isconnected ]]
					if table.find(v1971.children, v1972.hl_index) then
						return true;
					else
						return false;
					end;
				end;
				local function v1977(v1974, v1975) --[[ Line: 5362 ]] --[[ Name: is_explicit_jump ]]
					if table.find(v1974.children, v1975.hl_index) and true or false then
						if v1975.index ~= v1974.index + v1974.length or v1975.index == 0 then
							return true;
						else
							local l__visitor_0 = v1974._visitor;
							if l__visitor_0 and l__visitor_0.condition then
								return true;
							end;
						end;
					end;
				end;
				local function v1980(v1978, v1979) --[[ Line: 5378 ]] --[[ Name: connect ]]
					-- upvalues: v1366 (copy)
					assert(v1978);
					assert(v1979);
					assert(not table.find(v1366[v1979.hl_index].parents, v1978.hl_index));
					assert(not table.find(v1366[v1978.hl_index].children, v1979.hl_index));
					table.insert(v1978.children, v1979.hl_index);
					table.insert(v1979.parents, v1978.hl_index);
				end;
				local function v1985(v1981, v1982) --[[ Line: 5393 ]] --[[ Name: disconnect ]]
					assert(v1981);
					assert(v1982);
					local v1983 = table.find(v1981.children, v1982.hl_index);
					assert(v1983);
					local v1984 = table.find(v1982.parents, v1981.hl_index);
					assert(v1984);
					table.remove(v1981.children, v1983);
					table.remove(v1982.parents, v1984);
				end;
				local l_v1985_0 = v1985 --[[ copy: 125 -> 177 ]];
				local function v1990(v1987) --[[ Line: 5403 ]] --[[ Name: isolate_children_only ]]
					-- upvalues: l_v1985_0 (copy), v1366 (copy)
					for _, v1989 in ipairs(table.clone(v1987.children)) do
						l_v1985_0(v1987, v1366[v1989]);
					end;
				end;
				local function v1994(v1991) --[[ Line: 5408 ]] --[[ Name: isolate_parents_only ]]
					-- upvalues: l_v1985_0 (copy), v1366 (copy)
					for _, v1993 in ipairs(table.clone(v1991.parents)) do
						l_v1985_0(v1366[v1993], v1991);
					end;
				end;
				local l_v1994_0 = v1994 --[[ copy: 127 -> 178 ]];
				local l_v1990_0 = v1990 --[[ copy: 126 -> 179 ]];
				local function v1998(v1997) --[[ Line: 5413 ]] --[[ Name: isolate ]]
					-- upvalues: l_v1994_0 (copy), l_v1990_0 (copy)
					l_v1994_0(v1997);
					l_v1990_0(v1997);
				end;
				local function v2004(v1999, v2000, v2001) --[[ Line: 5418 ]] --[[ Name: swap_child ]]
					assert(v1999);
					assert(v2000);
					assert(v2001);
					local v2002 = table.find(v1999.children, v2000.hl_index);
					assert(v2002);
					local v2003 = table.find(v2000.parents, v1999.hl_index);
					assert(v2003);
					assert(not table.find(v2001.parents, v1999.hl_index));
					table.remove(v2000.parents, v2003);
					table.insert(v2001.parents, v1999.hl_index);
					v1999.children[v2002] = v2001.hl_index;
				end;
				local function v2010(v2005, v2006, v2007) --[[ Line: 5431 ]] --[[ Name: swap_parent ]]
					assert(v2005);
					assert(v2006);
					assert(v2007);
					local v2008 = table.find(v2005.parents, v2006.hl_index);
					assert(v2008);
					local v2009 = table.find(v2006.children, v2005.hl_index);
					assert(v2009);
					assert(not table.find(v2007.children, v2005.hl_index));
					table.remove(v2006.children, v2009);
					table.insert(v2007.children, v2005.hl_index);
					v2005.parents[v2008] = v2007.hl_index;
				end;
				local l_v1901_1 = v1901 --[[ copy: 106 -> 180 ]];
				local function v2018(v2012, v2013) --[[ Line: 5444 ]] --[[ Name: get_guaranteed_destinations ]]
					-- upvalues: l_v1901_1 (copy), v1366 (copy)
					local l__visitor_1 = v2012._visitor;
					if l__visitor_1 and l__visitor_1.destination then
						assert(table.find(v2012.children, l_v1901_1[l__visitor_1.destination].hl_index));
					end;
					if v2013 then
						local v2015 = table.create(#v2012.children);
						for _, v2017 in ipairs(v2012.children) do
							if v1366[v2017].index > v2012.index then
								table.insert(v2015, v2017);
							end;
						end;
						return v2015;
					else
						return (table.clone(v2012.children));
					end;
				end;
				local l_v2018_0 = v2018 --[[ copy: 131 -> 181 ]];
				local function v2024(v2020) --[[ Line: 5469 ]] --[[ Name: get_possible_destinations ]]
					-- upvalues: l_v2018_0 (copy)
					local v2021 = l_v2018_0(v2020);
					if v2020.type == "ifthen" then
						table.insert(v2021, v2020.data.pass);
						return v2021;
					elseif v2020.type == "ifthenelse" then
						table.insert(v2021, v2020.data.pass);
						table.insert(v2021, v2020.data.else_);
						return v2021;
					elseif v2020.type == "oneblockwhile" then
						table.insert(v2021, v2020.data.code);
						return v2021;
					else
						if v2020.type == "sequential" then
							for _, v2023 in ipairs(v2020.data) do
								table.insert(v2021, v2023);
							end;
						end;
						return v2021;
					end;
				end;
				local function v2025(v2026, v2027, v2028, v2029) --[[ Line: 5485 ]] --[[ Name: will_reach_block ]]
					-- upvalues: l_v2018_0 (copy), v2025 (copy), v1366 (copy)
					if v2026 == v2027 then
						return true;
					else
						v2028 = v2028 or {};
						assert(v2028);
						for _, v2031 in ipairs((l_v2018_0(v2026, v2029))) do
							if not v2028[v2031] then
								v2028[v2031] = true;
								if table.find(v2027.parents, v2031) then
									return true;
								else
									return v2025(v1366[v2031], v2027, v2028);
								end;
							end;
						end;
						return false;
					end;
				end;
				local l_v2024_0 = v2024 --[[ copy: 132 -> 182 ]];
				local function v2033(v2034, v2035, v2036) --[[ Line: 5506 ]] --[[ Name: could_reach_block ]]
					-- upvalues: l_v2024_0 (copy), v2033 (copy), v1366 (copy)
					if v2034 == v2035 then
						return true;
					else
						v2036 = v2036 or {};
						assert(v2036);
						for _, v2038 in ipairs((l_v2024_0(v2034))) do
							if not v2036[v2038] then
								v2036[v2038] = true;
								if table.find(v2035.parents, v2038) then
									return true;
								else
									return v2033(v1366[v2038], v2035, v2036);
								end;
							end;
						end;
						return false;
					end;
				end;
				local l_v2004_0 = v2004 --[[ copy: 129 -> 183 ]];
				local function v2045(v2040, v2041) --[[ Line: 5528 ]] --[[ Name: redirect_parents ]]
					-- upvalues: l_v2004_0 (copy), v1366 (copy)
					assert(v2040 ~= v2041);
					assert(v2040.hl_index ~= v2041.hl_index);
					local v2042 = table.clone(v2040.parents);
					for v2043 in ipairs(v2042) do
						local v2044 = v2042[v2043];
						l_v2004_0(v1366[v2044], v2040, v2041);
					end;
				end;
				local l_v2010_0 = v2010 --[[ copy: 130 -> 184 ]];
				local function v2052(v2047, v2048) --[[ Line: 5537 ]] --[[ Name: redirect_children ]]
					-- upvalues: l_v2010_0 (copy), v1366 (copy)
					assert(v2047 ~= v2048);
					assert(v2047.hl_index ~= v2048.hl_index);
					local v2049 = table.clone(v2047.children);
					for _, v2051 in ipairs(v2049) do
						l_v2010_0(v1366[v2051], v2047, v2048);
					end;
				end;
				local l_v2045_0 = v2045 --[[ copy: 135 -> 185 ]];
				local l_v2052_0 = v2052 --[[ copy: 136 -> 186 ]];
				local function v2057(v2055, v2056) --[[ Line: 5545 ]] --[[ Name: redirect_all ]]
					-- upvalues: l_v2045_0 (copy), l_v2052_0 (copy)
					l_v2045_0(v2055, v2056);
					l_v2052_0(v2055, v2056);
				end;
				for _, v2059 in ipairs(v1885) do
					local v2060 = v1901[v2059.index];
					assert(v2059);
					for _, v2062 in ipairs(v2059.children) do
						v1980(v2060, v1901[v2062.index]);
					end;
					table.clear(v2059.children);
				end;
				local function v2068(v2063, v2064, v2065, v2066, v2067) --[[ Line: 5560 ]] --[[ Name: create_full_condition ]]
					return {
						is_full_condition_t = true, 
						type = v2063, 
						condition = v2064, 
						lhs = v2065, 
						rhs = v2066, 
						code = v2067
					};
				end;
				local function v2073(v2069, v2070, v2071) --[[ Line: 5570 ]] --[[ Name: create_full_condition_and ]]
					local v2072 = v2071 and "not exist" or "exist";
					return {
						is_full_condition_t = true, 
						type = "and", 
						condition = v2072, 
						lhs = v2069, 
						rhs = v2070, 
						code = nil
					};
				end;
				local function v2078(v2074, v2075, v2076) --[[ Line: 5573 ]] --[[ Name: create_full_condition_or ]]
					local v2077 = v2076 and "not exist" or "exist";
					return {
						is_full_condition_t = true, 
						type = "or", 
						condition = v2077, 
						lhs = v2074, 
						rhs = v2075, 
						code = nil
					};
				end;
				local function v2095(v2079, v2080) --[[ Line: 5576 ]] --[[ Name: find_common_parent ]]
					-- upvalues: v1366 (copy)
					local v2081 = false;
					local v2082 = false;
					local v2083 = nil;
					for _, v2085 in ipairs(v2079.parents) do
						if table.find(v2080.parents, v2085) then
							local v2086 = v1366[v2085];
							local v2087;
							if table.find(v2086.children, v2080.hl_index) and true or false then
								if v2080.index ~= v2086.index + v2086.length or v2080.index == 0 then
									v2087 = true;
									v2081 = true;
								else
									local l__visitor_2 = v2086._visitor;
									if l__visitor_2 and l__visitor_2.condition then
										v2087 = true;
										v2081 = true;
									end;
								end;
							end;
							if not v2081 then
								if not v2081 then
									v2087 = nil;
								end;
							end;
							v2081 = false;
							if v2087 then
								if v2083 then
									if v1366[v2085].index > v1366[v2083].index then
										v2083 = v2085;
									end;
								else
									v2083 = v2085;
								end;
							end;
						end;
					end;
					local v2089 = nil;
					if v2083 then
						v2089 = false;
					else
						v2089 = true;
						for _, v2091 in ipairs(v2080.parents) do
							if table.find(v2079.parents, v2091) then
								local v2092 = v1366[v2091];
								local v2093;
								if table.find(v2092.children, v2079.hl_index) and true or false then
									if v2079.index ~= v2092.index + v2092.length or v2079.index == 0 then
										v2093 = true;
										v2082 = true;
									else
										local l__visitor_3 = v2092._visitor;
										if l__visitor_3 and l__visitor_3.condition then
											v2093 = true;
											v2082 = true;
										end;
									end;
								end;
								if not v2082 then
									if not v2082 then
										v2093 = nil;
									end;
								end;
								v2082 = false;
								if v2093 then
									assert(not v2083);
									v2083 = v2091;
								end;
							end;
						end;
					end;
					return v1366[v2083], v2089;
				end;
				local l_v1905_1 = v1905 --[[ copy: 110 -> 187 ]];
				local l_v2095_0 = v2095 --[[ copy: 141 -> 188 ]];
				local l_v1985_1 = v1985 --[[ copy: 125 -> 189 ]];
				local function v2099(v2100, v2101, v2102) --[[ Line: 5615 ]] --[[ Name: process_condition ]]
					-- upvalues: l_v1905_1 (copy), l_v2095_0 (copy), v1340 (ref), v2099 (copy), v1366 (copy), v1826 (copy), v215 (ref), l_v1985_1 (copy)
					local v2103 = false;
					l_v1905_1();
					local v2104, v2105 = l_v2095_0(v2100, v2101);
					assert(v2104);
					local v2106 = {
						v2104
					};
					local v2107 = nil;
					local v2108 = v2106[#v2106];
					local v2109 = 0;
					local v2110 = {};
					while true do
						if v1340[v2104.index] then
							v2108 = v2106[#v2106];
							break;
						elseif #v2104.parents ~= 1 then
							v2108 = v2106[#v2106];
							if #v2104.parents ~= 0 then
								local v2111 = v2106[#v2106];
								if l_v2095_0(v2111, v2100) then
									local v2112, v2113, v2114, v2115 = v2099(v2111, v2100, true);
									v2107 = v2112;
									v2108 = v2113;
									v2109 = v2109 + v2115;
									for v2116 in pairs(v2114) do
										v2110[v2116] = true;
									end;
									break;
								elseif l_v2095_0(v2111, v2101) then
									local v2117, v2118, v2119, v2120 = v2099(v2111, v2101);
									v2107 = v2117;
									v2108 = v2118;
									v2109 = v2109 + v2120;
									for v2121 in pairs(v2119) do
										v2110[v2121] = true;
									end;
									break;
								else
									break;
								end;
							else
								break;
							end;
						else
							local v2122 = v1366[v2104.parents[1]];
							if #v2122.children < 2 then
								v2108 = v2106[#v2106];
								break;
							else
								local v2123 = v2122.children[1];
								if v2123 ~= v2100.hl_index and v2123 ~= v2101.hl_index then
									v2108 = v2106[#v2106];
									break;
								else
									v2104 = v2122;
									table.insert(v2106, v2104);
									v2110[v2104] = true;
								end;
							end;
						end;
					end;
					local v2124 = nil;
					local v2125 = nil;
					for v2126, v2127 in ipairs(v2106) do
						assert(v2127._visitor);
						assert(v2127._visitor.condition);
						local v2128;
						if table.find(v2127.children, v2101.hl_index) and true or false then
							if v2101.index ~= v2127.index + v2127.length or v2101.index == 0 then
								v2128 = true;
								v2103 = true;
							else
								local l__visitor_4 = v2127._visitor;
								if l__visitor_4 and l__visitor_4.condition then
									v2128 = true;
									v2103 = true;
								end;
							end;
						end;
						if not v2103 then
							if not v2103 then
								v2128 = nil;
							end;
						end;
						v2103 = false;
						local v2130 = nil;
						v2130 = not v2128 and v2126 == 1;
						if v2102 then
							v2128 = not v2128;
						end;
						if v2105 and v2126 == 1 then
							v2130 = not v2130;
						end;
						local v2131, v2132 = v1826(v2127._visitor);
						if v2130 or v2128 then
							local l__visitor_5 = v2127._visitor;
							local l_condition_2 = l__visitor_5.condition;
							assert(l_condition_2);
							l__visitor_5.condition = v215[l_condition_2];
						end;
						if v2124 then
							local l_condition_3 = v2127._visitor.condition;
							local l_hl_index_4 = v2127.hl_index;
							local v2137 = {
								is_full_condition_t = true, 
								type = "reg", 
								condition = l_condition_3, 
								lhs = v2131, 
								rhs = v2132, 
								code = l_hl_index_4
							};
							if v2128 then
								l_condition_3 = v2124;
								local v2138 = v2130 and "not exist" or "exist";
								v2124 = {
									is_full_condition_t = true, 
									type = "and", 
									condition = v2138, 
									lhs = v2137, 
									rhs = l_condition_3, 
									code = nil
								};
							else
								l_condition_3 = v2124;
								local v2139 = v2130 and "not exist" or "exist";
								v2124 = {
									is_full_condition_t = true, 
									type = "or", 
									condition = v2139, 
									lhs = v2137, 
									rhs = l_condition_3, 
									code = nil
								};
							end;
						else
							local l_condition_4 = v2127._visitor.condition;
							local l_hl_index_5 = v2127.hl_index;
							v2124 = {
								is_full_condition_t = true, 
								type = "reg", 
								condition = l_condition_4, 
								lhs = v2131, 
								rhs = v2132, 
								code = l_hl_index_5
							};
						end;
						v2109 = v2109 + v2127.length;
						if v2125 then
							l_v1985_1(v2127, v2125);
							l_v1985_1(v2127, v1366[v2127.children[1]]);
						end;
						v2125 = v2127;
					end;
					if v2107 then
						v2124 = {
							is_full_condition_t = true, 
							type = "or", 
							condition = "exist", 
							lhs = v2107, 
							rhs = v2124, 
							code = nil
						};
					end;
					local v2142 = v2106[1];
					l_v1985_1(v2142, v2100);
					if v2100.hl_index ~= v2101.hl_index then
						l_v1985_1(v2142, v2101);
					end;
					l_v1905_1();
					return v2124, v2108, v2110, v2109;
				end;
				local v2143 = false;
				v1350:end_benchmark("Block Loading");
				v1350:start_benchmark("Control Flow Analysis");
				local function v2144(v2145, v2146, v2147) --[[ Line: 5738 ]] --[[ Name: simplify_gotos ]]
					-- upvalues: v1366 (copy), v1873 (copy), v2144 (copy)
					local l_jump_3 = v2145.jump;
					if l_jump_3 then
						local l_index_1 = v1366[l_jump_3.destination].index;
						if v2146[l_index_1] then
							l_jump_3.type = "break";
							local l_jump_4 = v2145.jump;
							assert(l_jump_4);
							local v2151 = v1366[l_jump_4.destination];
							assert(v2151);
							local l_hl_index_6 = v2145.hl_index;
							local l_jumped_to_by_3 = v1873[v2151.index].jumped_to_by;
							local v2154 = table.find(l_jumped_to_by_3, l_hl_index_6);
							assert(v2154);
							table.remove(l_jumped_to_by_3, v2154);
						elseif v2147[l_index_1] then
							l_jump_3.type = "continue";
							local l_jump_5 = v2145.jump;
							assert(l_jump_5);
							local v2156 = v1366[l_jump_5.destination];
							assert(v2156);
							local l_hl_index_7 = v2145.hl_index;
							local l_jumped_to_by_4 = v1873[v2156.index].jumped_to_by;
							local v2159 = table.find(l_jumped_to_by_4, l_hl_index_7);
							assert(v2159);
							table.remove(l_jumped_to_by_4, v2159);
						end;
					end;
					local l_type_3 = v2145.type;
					if l_type_3 == "sequential" then
						for _, v2162 in ipairs(v2145.data) do
							v2144(v1366[v2162], v2146, v2147);
						end;
						return;
					else
						if l_type_3 == "ifthen" or l_type_3 == "ifthenelse" then
							local l_data_0 = v2145.data;
							v2144(v1366[l_data_0.pass], v2146, v2147);
							local l_else__1 = l_data_0.else_;
							if l_else__1 then
								v2144(v1366[l_else__1], v2146, v2147);
							end;
						end;
						return;
					end;
				end;
				local v2165 = nil;
				local l_v1902_1 = v1902 --[[ copy: 107 -> 190 ]];
				local l_v1904_1 = v1904 --[[ copy: 109 -> 191 ]];
				local l_v1914_1 = v1914 --[[ copy: 112 -> 192 ]];
				local l_v2052_1 = v2052 --[[ copy: 136 -> 193 ]];
				local l_v1922_1 = v1922 --[[ copy: 113 -> 194 ]];
				local l_v2045_1 = v2045 --[[ copy: 135 -> 195 ]];
				do
					local l_v2165_0 = v2165;
					local function v2184() --[[ Line: 5765 ]] --[[ Name: pass_sequential ]]
						-- upvalues: l_v1902_1 (copy), v1366 (copy), l_v1904_1 (copy), l_v2165_0 (ref), l_v1914_1 (copy), l_v1985_1 (copy), l_v2052_1 (copy), v1363 (copy), v1829 (copy), v1830 (copy), l_v1922_1 (copy), l_v2045_1 (copy), l_v1905_1 (copy)
						local v2173 = false;
						repeat
							local v2174 = 0;
							for v2175 = #l_v1902_1, 1, -1 do
								local v2176 = v1366[v2175];
								if #v2176.children == 1 then
									local v2177 = v1366[v2176.children[1]];
									if v2177 ~= v2176 and not (table.find(v2177.children, v2177.hl_index) and true or false) and #v2177.parents <= 1 and #v2177.jumped_to_by <= 0 and v2177.index >= v2176.index then
										local v2178 = if v2176.type == "sequential" then v1366[v2176.data[#v2176.data]] else v2176;
										if l_v1904_1[v2178] then
											local l_data_1 = v2178.data;
											local v2180 = v1366[l_data_1.pass];
											if v2180 then
												local l_jump_6 = v2180.jump;
												assert(l_jump_6);
												if l_jump_6.type == "goto" and v2180.index ~= 0 then
													continue;
												end;
											end;
											if l_data_1.else_ and v1366[l_data_1.else_] then
												error("IDK");
											end;
										end;
										if table.find(v2176.children, v2177.hl_index) and true or false then
											if v2177.index ~= v2176.index + v2176.length or v2177.index == 0 then
												v2178 = true;
												v2173 = true;
											else
												local l__visitor_6 = v2176._visitor;
												if l__visitor_6 and l__visitor_6.condition then
													v2178 = true;
													v2173 = true;
												end;
											end;
										end;
										if not v2173 then
											if not v2173 then
												v2178 = nil;
											end;
										end;
										v2173 = false;
										if v2178 then

										end;
										assert(table.find(v2177.parents, v2176.hl_index));
										if v2176.type == "sequential" then
											if not v2176._visitor or not v2176._visitor.condition then
												l_v2165_0 = l_v2165_0 + 1;
												v2174 = v2174 + 1;
												table.insert(v2176.data, v2177.hl_index);
												v2176.length = v2176.length + v2177.length;
												l_v1914_1(v2176, v2177);
												l_v1985_1(v2176, v2177);
												l_v2052_1(v2177, v2176);
												v2176._visitor = v2177._visitor;
											else
												continue;
											end;
										elseif not v2176._visitor or not v2176._visitor.condition then
											l_v2165_0 = l_v2165_0 + 1;
											v2174 = v2174 + 1;
											v2178 = #v1366 + 1;
											local v2183 = {
												code_index = v1363[v2176.index], 
												index = v2176.index, 
												actual_code_index = v1829[v1363[v2176.index]], 
												actual_index = v1830[v2176.index], 
												hl_index = v2178, 
												length = v2176.length + v2177.length, 
												type = "sequential", 
												data = {
													v2176.hl_index, 
													v2177.hl_index
												}, 
												parents = {}, 
												children = {}, 
												jumped_to_by = {}, 
												_visitor = v2177._visitor
											};
											l_v1922_1(v2183, {
												v2176, 
												v2177
											});
											l_v2045_1(v2176, v2183);
											l_v1985_1(v2176, v2177);
											l_v2052_1(v2177, v2183);
										else
											continue;
										end;
										l_v1905_1();
									end;
								end;
							end;
						until v2174 == 0;
					end;
					while true do
						l_v2165_0 = 0;
						v1905();
						for v2185 = #v1902, 1, -1 do
							local v2186 = v1366[v2185];
							if #v2186.children == 1 or #v2186.children == 2 then
								local v2187 = false;
								local l__visitor_7 = v2186._visitor;
								if l__visitor_7 and l__visitor_7.condition then
									assert(v1977(v2186, v1366[v2186.children[1]]));
									local v2189 = v2186.children[1];
									assert(v2189);
									if #v1366[v2189].children <= 1 then
										local v2190 = v2186.children[2];
										local v2191 = nil;
										local v2192 = nil;
										local v2193 = nil;
										if v2190 then
											assert(v2190);
											assert(v2189 ~= v2190);
											if #v1366[v2190].children <= 1 then
												local l_children_1 = v1366[v2189].children;
												if #l_children_1 <= 1 then
													local _ = l_children_1[1];
													local v2196 = v1366[v2190].children[1];
													local v2197 = v2196 and v1977(v1366[v2190], v1366[v2196]);
													if v2197 then
														if v2143 then
															v2193 = v1366[v2196];
														else
															continue;
														end;
													end;
													v2191 = v1366[v2189];
													v2192 = v1366[v2190];
													if v2191 ~= v2186 then
														if v2197 then
															if #v2191.parents < 1 then
																continue;
															end;
														elseif #v2191.parents < 2 then
															continue;
														end;
														if not v2192 or not v2191 then
															error("Shouldn't happen...");
														end;
														if v2197 or v1973(v2192, v2191) then
															local v2198 = v1901[v2192.index + v2192.length];
															if v2197 and v2198 and v2198 == v2191 then
																assert(v2193);
																if v2193.index <= v2191.index and not v2025(v2191, v2192, {}, true) then
																	v2193 = v1366[v2191.hl_index];
																	local l_v2191_0 = v2191;
																	v2191 = v2192;
																	local l_v2192_0 = v2192;
																	v2192 = v1937();
																	v2004(v2186, l_v2192_0, v2192);
																	v2004(v2186, l_v2191_0, v2191);
																	assert(v2193);
																	v1980(v2192, v2193);
																end;
															end;
														else
															continue;
														end;
													else
														continue;
													end;
												else
													continue;
												end;
											else
												continue;
											end;
										else
											v2191 = v1366[v2189];
											v2192 = v1937();
											v1980(v2192, v2191);
											v2187 = true;
										end;
										local v2201, v2202, v2203, v2204 = v2099(if v2187 then v2191 else v2192, v2191, v2192.index == 0);
										local v2205 = {
											pass = v2192.hl_index, 
											condition = v2201, 
											condition_length = v2204
										};
										local v2206 = #v1366 + 1;
										local v2207 = {
											code_index = v2202.code_index, 
											index = v2202.index, 
											actual_code_index = v2202.actual_code_index, 
											actual_index = v2202.actual_index, 
											hl_index = v2206, 
											length = v2204 + v2192.length, 
											type = "ifthen", 
											data = v2205, 
											parents = {}, 
											children = {}, 
											jumped_to_by = {}
										};
										local v2208 = {
											v2192
										};
										for v2209 in pairs(v2203) do
											table.insert(v2208, v2209);
										end;
										v1922(v2207, v2208);
										if v2193 then
											v1985(v2192, v2193);
											v1941(v2192, v2193.hl_index);
										else
											v1985(v2192, v2191);
										end;
										v2045(v2202, v2207);
										v1980(v2207, v2191);
										if v1973(v2192, v2191) then
											v1985(v2186, v2192);
										end;
										v1910(v2207);
										v1905();
									end;
								end;
							end;
						end;
						for v2210 in pairs(table.clone(v1904)) do
							if #v2210.children == 1 then
								v1905();
								local v2211 = v1366[v2210.children[1]];
								if v2211 and #v2211.children == 1 then
									local l_data_2 = v2210.data;
									local v2213 = v1366[l_data_2.pass];
									assert(v2213.jump);
									local v2214 = v1366[v2213.jump.destination];
									assert(v2214);
									local v2215 = v1366[v2211.children[1]];
									if v2214.hl_index == v2215.hl_index then
										l_v2165_0 = l_v2165_0 + 1;
										v1905();
										l_data_2.else_ = v2211.hl_index;
										v2210.type = "ifthenelse";
										v2210.length = v2210.length + v2211.length;
										v1955(v2213);
										v1904[v2210] = nil;
										v1980(v2210, v2214);
										v1985(v2210, v2211);
										v1985(v2211, v2214);
										v1910(v2210);
										v1905();
									end;
								end;
							end;
						end;
						repeat
							local v2216 = 0;
							for v2217 = #v1902, 1, -1 do
								local v2218 = v1366[v2217];
								if #v2218.children == 1 then
									local l__visitor_8 = v2218._visitor;
									if (not l__visitor_8 or not l__visitor_8.condition) and v2218.children[1] == v2218.hl_index and l__visitor_8 then
										assert(l__visitor_8);
										l_v2165_0 = l_v2165_0 + 1;
										v2216 = v2216 + 1;
										local v2220 = #v1366 + 1;
										local v2221 = {
											code_index = v2218.code_index, 
											index = v2218.index, 
											actual_code_index = v2218.actual_code_index, 
											actual_index = v2218.actual_index, 
											hl_index = v2220, 
											length = v2218.length, 
											type = "oneblockwhile", 
											data = {
												code = v2218.hl_index, 
												for_info = l__visitor_8.for_info
											}, 
											parents = {}, 
											children = {}, 
											jumped_to_by = {}, 
											_visitor = v2218._visitor
										};
										v1922(v2221, {
											v2218
										});
										v2057(v2218, v2221);
										v1985(v2221, v2221);
										local v2222 = v1901[v2221.index + v2221.length];
										local v2223 = {};
										if v2222 then
											v1980(v2221, v2222);
											v2223[v2222.index] = true;
										end;
										v2144(v2218, v2223, {
											[v2221.index] = true, 
											[v2221.index + v2221.length - 1] = true
										});
									end;
								end;
							end;
						until v2216 == 0;
						v2184();
						if l_v2165_0 ~= 0 then
							v2143 = false;
							continue;
						end;
						if not v2143 then
							v2143 = true;
						else
							break;
						end;
					end;
					v1350:end_benchmark("Control Flow Analysis");
					v1350:start_benchmark("Control Flow Recovery");
					l_v2165_0 = 0;
					repeat
						l_v2165_0 = 0;
						for _, v2225 in ipairs(v1902) do
							if #v2225.parents > 0 then
								local v2226 = table.clone(v2225.parents);
								table.insert(v2226, v2225.hl_index);
								local _ = v2225.index;
								local l_length_0 = v2225.length;
								local l_index_3 = v2225.index;
								for _, v2231 in ipairs(v2225.parents) do
									local v2232 = v1366[v2231];
									if #v2232.parents <= 0 and #v2232.children == 1 then
										assert(v2232.children[1] == v2225.hl_index);
										l_length_0 = l_length_0 + v2232.length;
										if v2232.index < l_index_3 and v2232.index > 0 then
											l_index_3 = v2232.index;
										end;
										v2232.analysis_failed = true;
									else
										break;
									end;
								end;
								for _, v2234 in ipairs(table.clone(v2225.parents)) do
									v1985(v1366[v2234], v2225);
								end;
								local v2235 = #v1366 + 1;
								v1922({
									code_index = v1363[l_index_3], 
									index = l_index_3, 
									actual_code_index = v1829[v1363[l_index_3]], 
									actual_index = v1830[l_index_3], 
									hl_index = v2235, 
									length = l_length_0, 
									type = "sequential", 
									data = v2226, 
									parents = {}, 
									children = v2225.children, 
									jumped_to_by = {}
								});
								v2225.analysis_failed = true;
								v1994(v2225);
								l_v2165_0 = l_v2165_0 + 1;
								v1875 = true;
							end;
						end;
					until l_v2165_0 == 0;
					v1905();
				end;
				v1350:end_benchmark("Control Flow Recovery");
				v1350:start_benchmark("Stack Incantation");
				v1876 = function() --[[ Line: 6285 ]] --[[ Name: get_entry_point ]]
					-- upvalues: v1366 (copy)
					for v2236 = #v1366, 1, -1 do
						local v2237 = v1366[v2236];
						if v2237.index == 1 then
							if #v1366 > 1 then

							end;
							return v2237;
						end;
					end;
					error("Critical control flow failure: Failed to find entry point");
				end;
				v1877 = function(v2238, v2239) --[[ Line: 6327 ]] --[[ Name: location_ancestor_at_depth ]]
					assert(v2239 < v2238.depth);
					local l_v2238_0 = v2238;
					while l_v2238_0.depth ~= v2239 do
						l_v2238_0 = l_v2238_0.parent;
						assert(l_v2238_0);
					end;
					return l_v2238_0;
				end;
				v1878 = function(v2241, v2242) --[[ Line: 6336 ]] --[[ Name: location_has_ancestor ]]
					if v2241.depth < v2242.depth then
						return false;
					else
						local l_v2241_0 = v2241;
						while true do
							if l_v2241_0.depth ~= v2242.depth then
								l_v2241_0 = l_v2241_0.parent;
								if not l_v2241_0 then
									return false;
								end;
							else
								return l_v2241_0.hl_index == v2242.hl_index;
							end;
						end;
					end;
				end;
				v1884 = {};
				v1885 = {};
				v1886 = {};
				v1901 = function(v2244, v2245) --[[ Line: 6352 ]] --[[ Name: location_find_common_ancestor ]]
					local v2246 = nil;
					local l_depth_0 = v2244.depth;
					local l_depth_1 = v2245.depth;
					if l_depth_0 == l_depth_1 then
						v2246 = l_depth_0;
					elseif l_depth_0 < l_depth_1 then
						v2246 = l_depth_0;
						local l_v2245_0 = v2245;
						local l_v2246_0 = v2246;
						assert(l_v2246_0 < l_v2245_0.depth);
						local l_l_v2245_0_0 = l_v2245_0;
						while l_l_v2245_0_0.depth ~= l_v2246_0 do
							l_l_v2245_0_0 = l_l_v2245_0_0.parent;
							assert(l_l_v2245_0_0);
						end;
						v2245 = l_l_v2245_0_0;
					else
						v2246 = l_depth_1;
						local l_v2244_0 = v2244;
						local l_v2246_1 = v2246;
						assert(l_v2246_1 < l_v2244_0.depth);
						local l_l_v2244_0_0 = l_v2244_0;
						while l_l_v2244_0_0.depth ~= l_v2246_1 do
							l_l_v2244_0_0 = l_l_v2244_0_0.parent;
							assert(l_l_v2244_0_0);
						end;
						v2244 = l_l_v2244_0_0;
					end;
					assert(v2244.depth == v2245.depth);
					while v2244.hl_index ~= v2245.hl_index do
						v2244 = v2244.parent;
						assert(v2244);
						v2245 = v2245.parent;
						assert(v2245);
					end;
					return v2244;
				end;
				v1902 = {};
				v1903 = {};
				v1904 = 0;
				v1905 = {};
				v1910 = function(v2255, v2256, v2257) --[[ Line: 6437 ]] --[[ Name: get_last_read_and_write ]]
					local l_reg_reads_global_0 = v2255.reg_reads_global;
					local l_reg_writes_global_0 = v2255.reg_writes_global;
					local v2260 = nil;
					local v2261 = nil;
					local v2262 = l_reg_reads_global_0[v2256];
					local v2263;
					if v2262 then
						v2263 = v2262;
					else
						local v2264 = {};
						l_reg_reads_global_0[v2256] = v2264;
						v2263 = v2264;
					end;
					if #v2263 > 0 then
						for v2265 = #v2263, 1, -1 do
							local v2266 = v2263[v2265];
							if v2266.location.depth <= v2257 then
								v2260 = v2266;
								break;
							end;
						end;
					end;
					local v2267 = l_reg_writes_global_0[v2256];
					if v2267 then
						v2262 = v2267;
					else
						local v2268 = {};
						l_reg_writes_global_0[v2256] = v2268;
						v2262 = v2268;
					end;
					if #v2262 > 0 then
						for v2269 = #v2262, 1, -1 do
							local v2270 = v2262[v2269];
							if v2270.location.depth <= v2257 then
								return v2260, v2270;
							end;
						end;
					end;
					return v2260, v2261;
				end;
				v1914 = function(v2271, v2272, _) --[[ Line: 6465 ]] --[[ Name: get_last_read_and_write_numerical ]]
					-- upvalues: v1910 (copy), v1352 (ref)
					local v2274, v2275 = v1910(v2271, v2272, v1352);
					local v2276 = if v2274 then v2274.code.index else -1;
					if v2275 then
						return v2276, v2275.code.index;
					else
						return v2276, -1;
					end;
				end;
				v1922 = function(v2277) --[[ Line: 6469 ]] --[[ Name: get_after_point_of_hl_block ]]
					return v2277.index + v2277.length;
				end;
				v1928 = function(v2278) --[[ Line: 6472 ]] --[[ Name: get_end_of_hl_block ]]
					if v2278._visitor then
						return v2278.index + v2278.length - 2;
					else
						return v2278.index + v2278.length - 1;
					end;
				end;
				v1937 = function(v2279, v2280, v2281) --[[ Line: 6479 ]] --[[ Name: add_neglection ]]
					local v2282 = {
						hl_index = v2279.location.hl_index, 
						start_code = v2280, 
						register = v2281
					};
					if v2279.neglected[v2281] then

					end;
					local l_neglected_0 = v2279.neglected;
					local v2284 = l_neglected_0[v2281];
					local v2285;
					if v2284 then
						v2285 = v2284;
					else
						local v2286 = {};
						l_neglected_0[v2281] = v2286;
						v2285 = v2286;
					end;
					table.insert(v2285, v2282);
				end;
				v1941 = function(v2287, _, v2289) --[[ Line: 6491 ]] --[[ Name: remove_neglection ]]
					local v2290 = v2287.neglected[v2289];
					if v2290 then
						for _ = #v2290, 1, -1 do

						end;
					end;
				end;
				v1948 = function(v2292, v2293) --[[ Line: 6500 ]] --[[ Name: hl_block_always_sets_regs ]]
					-- upvalues: v1902 (ref), v1948 (copy), v1366 (copy)
					local l_type_4 = v2292.type;
					if l_type_4 == "single" then
						local v2295 = v1902[v2292.hl_index];
						assert(v2295);
						local l_reg_writes_0 = v2295.reg_writes;
						for v2297 = v2293.beginning, v2293.ending do
							if l_reg_writes_0[v2297] then
								return true;
							end;
						end;
						return false;
					elseif l_type_4 == "sequential" then
						for _, v2299 in ipairs(v2292.data) do
							if v1948(v1366[v2299], v2293) then
								return true;
							end;
						end;
						return false;
					elseif l_type_4 == "ifthen" then
						assert(not v2292.data.else_);
						return false;
					elseif l_type_4 == "ifthenelse" then
						local l_data_3 = v2292.data;
						local l_else__2 = l_data_3.else_;
						assert(l_else__2);
						return v1948(v1366[l_data_3.pass], v2293) and v1948(v1366[l_else__2], v2293);
					elseif l_type_4 == "oneblockwhile" then
						local l_data_4 = v2292.data;
						return v1948(v1366[l_data_4.code], v2293);
					else
						error((("Unknown hl_block type %*"):format(l_type_4)));
						return;
					end;
				end;
				v1955 = function(v2303, v2304, v2305, v2306) --[[ Line: 6536 ]] --[[ Name: observe_scoped_var ]]
					-- upvalues: v1910 (copy), v1366 (copy), v1884 (ref), v1901 (copy), v1873 (copy)
					local v2307 = nil;
					local v2308 = nil;
					local v2309 = nil;
					local v2310 = nil;
					if v2305 then
						assert(v2306);
						v2310 = v2305;
					else
						assert(not v2306);
						local _, v2312 = v1910(v2303, v2304.register_range.beginning, v2303.location.depth);
						v2310 = v2312;
					end;
					local v2313 = not v2310;
					if not v2313 then
						assert(v2310);
						if v2310.code.opname == "NAMECALL" then
							v2313 = true;
						else
							local l_location_0 = v2310.location;
							local l_location_1 = v2304.location;
							if l_location_1.depth <= l_location_0.depth then
								v2313 = true;
							else
								while l_location_1.depth ~= l_location_0.depth + 1 do
									l_location_1 = l_location_1.parent;
									assert(l_location_1);
								end;
								assert(l_location_1.parent);
								if v1366[(if v2306 then l_location_1.parent.parent else l_location_1.parent).hl_index].index ~= v1366[l_location_0.hl_index].index then
									v2313 = true;
								else
									local v2316 = v1884[l_location_1.hl_index];
									if v2316 then
										local _ = v2316;
									end;
									v2309 = v2310.location;
									v2308 = v2310.code.index;
								end;
							end;
						end;
					end;
					if v2313 then
						local l_location_2 = v2303.location;
						local l_location_3 = v2304.location;
						v2309 = v1901(l_location_2, l_location_3);
						local v2320 = v1873[v1366[v2309.hl_index].index];
						v2308 = if v2320._visitor then v2320.index + v2320.length - 2 else v2320.index + v2320.length - 1;
						v2307 = true;
					end;
					assert(v2308);
					local v2321 = {
						type = "scoped variable", 
						info = {
							wanted_definition_point = v2308, 
							definition_location = v2309, 
							is_predefinition = v2307, 
							register_range = v2304.register_range
						}, 
						location = v2303.location
					};
					table.insert(v2303.observations, v2321);
				end;
				v1963 = function(v2322, v2323, v2324, v2325, v2326, v2327) --[[ Line: 6685 ]] --[[ Name: demand_variable_definition ]]
					local v2328 = {
						type = "define variable", 
						info = {
							register_range = v2323, 
							definition_location = v2325, 
							is_predefinition = v2326, 
							no_definition = v2327, 
							start_of_use = v2324
						}
					};
					local v2329 = v2322[v2324];
					if v2329 then
						local v2330 = false;
						for _, v2332 in ipairs(v2329) do
							local l_beginning_4 = v2323.beginning;
							local l_register_range_0 = v2332.info.register_range;
							local l_beginning_5 = l_register_range_0.beginning;
							local l_ending_3 = l_register_range_0.ending;
							local v2337 = false;
							if l_beginning_5 <= l_beginning_4 then
								v2337 = l_beginning_4 <= l_ending_3;
							end;
							if v2337 then
								assert(not v2330);
								v2332.info.definition_location = v2325;
								v2330 = true;
								error("messasdasdasdasdasdasdasdasdasdasdage");
							end;
						end;
						if not v2330 then
							table.insert(v2329, v2328);
							return;
						end;
					else
						v2322[v2324] = {
							v2328
						};
					end;
				end;
				v1968 = function(v2338, v2339, v2340, v2341) --[[ Line: 6715 ]] --[[ Name: new_location ]]
					local v2342 = {
						hl_index = v2338, 
						depth = if v2340 then v2339.depth + 1 else v2339.depth, 
						parent = if v2340 then v2339 else v2339.parent, 
						last_loop = v2339.last_loop
					};
					if v2341 then
						v2342.last_loop = v2342;
					end;
					return v2342;
				end;
				v1970 = function(v2343, v2344, v2345, v2346, v2347, v2348) --[[ Line: 6738 ]] --[[ Name: add_task ]]
					-- upvalues: v1904 (ref), v1905 (ref), v1359 (ref)
					v1904 = v1904 + 1;
					v2343.preprocess_task_index = v1904;
					v1905[v1904] = v2344;
					local v2349 = {
						type = v2345, 
						var_reg_range = v2346, 
						predef = v2347, 
						no_inline = v2348
					};
					local v2350 = v1359[v2344];
					if v2350 then
						for _, v2352 in ipairs(v2350) do
							if v2352.type == v2345 then
								local l_beginning_6 = v2346.beginning;
								local l_var_reg_range_4 = v2352.var_reg_range;
								local l_beginning_7 = l_var_reg_range_4.beginning;
								local l_ending_4 = l_var_reg_range_4.ending;
								local v2357 = false;
								if l_beginning_7 <= l_beginning_6 then
									v2357 = l_beginning_6 <= l_ending_4;
								end;
								if v2357 then
									return v2352;
								end;
							end;
						end;
						table.insert(v2350, v2349);
						return v2349;
					else
						v1359[v2344] = {
							v2349
						};
						return v2349;
					end;
				end;
				v1973 = function(v2358, v2359, v2360) --[[ Line: 6763 ]] --[[ Name: var_lock ]]
					-- upvalues: v1970 (copy)
					v1970(v2358, v2360, "lockvar", v2359);
				end;
				v1977 = function(v2361, v2362, v2363) --[[ Line: 6767 ]] --[[ Name: var_unlock ]]
					-- upvalues: v1970 (copy)
					v1970(v2361, v2363, "unlockvar", v2362);
				end;
				v1980 = function(v2364, v2365, v2366, _) --[[ Line: 6771 ]] --[[ Name: add_forced_var ]]
					-- upvalues: v1970 (copy)
					local l_register_range_1 = v2365.register_range;
					for v2369 = l_register_range_1.beginning, l_register_range_1.ending do
						local v2370 = v2364.reg_forced_var[v2369];
						if v2370 then
							table.insert(v2370, v2365);
						else
							v2364.reg_forced_var[v2369] = {
								v2365
							};
						end;
						v2364.reg_has_var[v2369] = l_register_range_1;
					end;
					v1970(v2364, v2366, "lockvar", l_register_range_1);
				end;
				v1985 = function(v2371, v2372, v2373) --[[ Line: 6785 ]] --[[ Name: get_forced_var ]]
					-- upvalues: v1970 (copy)
					local v2374 = v2371.reg_forced_var[v2372];
					if v2374 then
						for v2375 = #v2374, 1, -1 do
							local v2376 = v2374[v2375];
							local l_register_range_2 = v2376.register_range;
							local l_beginning_8 = l_register_range_2.beginning;
							local l_ending_5 = l_register_range_2.ending;
							local v2380 = false;
							if l_beginning_8 <= v2372 then
								v2380 = v2372 <= l_ending_5;
							end;
							if v2380 then
								if v2371.location.depth > v2376.definition_location.depth or v2371.location.hl_index == v2376.definition_location.hl_index then
									return v2376;
								else
									v2380 = v2376.register_range;
									v1970(v2371, v2373, "unlockvar", v2380);
									v2374[v2375] = nil;
								end;
							end;
						end;
						if #v2374 == 0 then
							v2371.reg_forced_var[v2372] = nil;
						end;
					end;
					return nil;
				end;
				v1990 = function(v2381, v2382, v2383, v2384, v2385) --[[ Line: 6810 ]] --[[ Name: var_start ]]
					-- upvalues: v1970 (copy)
					if v2384 then
						assert(v2383);
						v1970(v2381, v2383, "defvar", v2382, true, v2385);
					elseif v2383 then
						v1970(v2381, v2383, "defvar", v2382, nil, v2385);
					else
						local v2386 = v2381.reg_writes_global[v2382.beginning];
						local v2387 = v2386[#v2386];
						v1970(v2381, v2387.code.code_index, "defvar", v2382, nil, v2385);
					end;
					for v2388 = v2382.beginning, v2382.ending do
						v2381.reg_has_var[v2388] = v2382;
					end;
				end;
				v1994 = function(v2389, v2390) --[[ Line: 6832 ]] --[[ Name: var_end ]]
					local v2391 = v2389.reg_has_var[v2390];
					for v2392 = v2391.beginning, v2391.ending do
						v2389.reg_has_var[v2392] = nil;
					end;
				end;
				v1998 = function(v2393, v2394, v2395) --[[ Line: 6838 ]] --[[ Name: reg_report_read ]]
					local l_reg_reads_0 = v2393.reg_reads;
					local v2397 = l_reg_reads_0[v2394];
					local v2398;
					if v2397 then
						v2398 = v2397;
					else
						local v2399 = {};
						l_reg_reads_0[v2394] = v2399;
						v2398 = v2399;
					end;
					table.insert(v2398, v2395);
					l_reg_reads_0 = v2393.reg_reads_global;
					v2397 = l_reg_reads_0[v2394];
					if v2397 then
						v2398 = v2397;
					else
						local v2400 = {};
						l_reg_reads_0[v2394] = v2400;
						v2398 = v2400;
					end;
					table.insert(v2398, v2395);
					local _ = v2395.code;
					v2398 = v2393.neglected[v2394];
					if v2398 then
						for _ = #v2398, 1, -1 do

						end;
					end;
				end;
				v2004 = function(v2403, v2404, v2405) --[[ Line: 6843 ]] --[[ Name: reg_report_write ]]
					local l_reg_writes_1 = v2403.reg_writes;
					local v2407 = l_reg_writes_1[v2404];
					local v2408;
					if v2407 then
						v2408 = v2407;
					else
						local v2409 = {};
						l_reg_writes_1[v2404] = v2409;
						v2408 = v2409;
					end;
					table.insert(v2408, v2405);
					l_reg_writes_1 = v2403.reg_writes_global;
					v2407 = l_reg_writes_1[v2404];
					if v2407 then
						v2408 = v2407;
					else
						local v2410 = {};
						l_reg_writes_1[v2404] = v2410;
						v2408 = v2410;
					end;
					table.insert(v2408, v2405);
					local l_code_4 = v2405.code;
					v2408 = {
						hl_index = v2403.location.hl_index, 
						start_code = l_code_4, 
						register = v2404
					};
					if v2403.neglected[v2404] then

					end;
					local l_neglected_1 = v2403.neglected;
					local v2413 = l_neglected_1[v2404];
					if v2413 then
						v2407 = v2413;
					else
						local v2414 = {};
						l_neglected_1[v2404] = v2414;
						v2407 = v2414;
					end;
					table.insert(v2407, v2408);
				end;
				v2010 = {};
				v2018 = function(v2415, v2416, v2417, v2418) --[[ Line: 6849 ]] --[[ Name: process_insts ]]
					-- upvalues: v2010 (copy), v1903 (ref), v1990 (copy), v1980 (copy), v301 (ref), v1985 (copy), v1955 (copy)
					local l_reg_has_var_0 = v2415.reg_has_var;
					if v2418 and not v2010[v2417] then
						table.insert(v2417, v2418.code);
						v2010[v2417] = true;
					end;
					local v2420 = {};
					for _, v2422 in ipairs(v2417) do
						v1903[v2422.index] = v2416;
						local v2423 = {};
						local v2424 = v2415.demands[v2422.index];
						if v2424 then
							for v2425 = #v2424, 1, -1 do
								local v2426 = v2424[v2425];
								if v2426.type == "define variable" then
									local l_register_range_3 = v2426.info.register_range;
									for v2428 = l_register_range_3.beginning, l_register_range_3.ending do
										local v2429 = v2415.reg_forced_var[v2428];
										local v2430 = {
											register_range = l_register_range_3, 
											beginning = v2422.index, 
											definition_location = v2426.info.definition_location, 
											start_of_use = v2426.info.start_of_use
										};
										if v2429 then
											table.insert(v2429, v2430);
										elseif v2426.info.is_predefinition then
											assert(not v2426.info.no_definition);
											v1990(v2415, l_register_range_3, v2422.code_index, true, true);
											v1980(v2415, v2430, v2422.code_index);
										elseif v2426.info.no_definition then
											v1980(v2415, v2430, v2422.code_index);
										else
											table.insert(v2423, v2430);
										end;
									end;
								else
									error((("Unknown demand %*"):format(v2426.type)));
								end;
							end;
							v2415.demands[v2422.index] = nil;
						end;
						local v2431, v2432, _ = v301(v2422);
						local v2434 = {};
						local v2435 = {};
						for _, v2437 in ipairs(v2431) do
							v2435[v2437] = true;
							local v2438 = v1985(v2415, v2437, v2422.code_index);
							if v2438 then
								v2434[v2437] = v2438;
								l_reg_has_var_0[v2437] = v2438.register_range;
							end;
						end;
						for _, v2440 in ipairs(v2432) do
							if not v2435[v2440] then
								local v2441 = v1985(v2415, v2440, v2422.code_index);
								if v2441 then
									v2434[v2440] = v2441;
									l_reg_has_var_0[v2440] = v2441.register_range;
								end;
							end;
						end;
						for v2442 in pairs(v2420) do
							if not v2434[v2442] then

							end;
						end;
						v2420 = table.clone(v2434);
						v2435 = nil;
						if #v2432 > 1 then
							local v2443 = true;
							local v2444 = v2432[1];
							for v2445 = 2, #v2432 do
								v2444 = v2444 + 1;
								if v2432[v2445] ~= v2444 then
									v2443 = nil;
									break;
								end;
							end;
							if v2443 then
								local v2446 = v2432[1];
								local v2447 = v2432[#v2432];
								v2435 = if v2447 then {
									beginning = v2446, 
									ending = v2447
								} else {
										beginning = v2446, 
										ending = v2446
									};
							end;
						elseif #v2432 == 1 then
							local v2448 = v2432[1];
							v2435 = {
								beginning = v2448, 
								ending = v2448
							};
						end;
						if #v2431 == 0 then
							for _, v2450 in ipairs(v2432) do
								if l_reg_has_var_0[v2450] and not v2434[v2450] then
									local v2451 = v2415.reg_has_var[v2450];
									for v2452 = v2451.beginning, v2451.ending do
										v2415.reg_has_var[v2452] = nil;
									end;
								end;
								v2415.uncertain_regs[v2450] = nil;
								local v2453 = {
									code = v2422, 
									location = v2415.location, 
									reg_range = v2435
								};
								local l_reg_writes_2 = v2415.reg_writes;
								local v2455 = l_reg_writes_2[v2450];
								local v2456;
								if v2455 then
									v2456 = v2455;
								else
									local v2457 = {};
									l_reg_writes_2[v2450] = v2457;
									v2456 = v2457;
								end;
								table.insert(v2456, v2453);
								l_reg_writes_2 = v2415.reg_writes_global;
								v2455 = l_reg_writes_2[v2450];
								if v2455 then
									v2456 = v2455;
								else
									local v2458 = {};
									l_reg_writes_2[v2450] = v2458;
									v2456 = v2458;
								end;
								table.insert(v2456, v2453);
								local l_code_5 = v2453.code;
								v2456 = {
									hl_index = v2415.location.hl_index, 
									start_code = l_code_5, 
									register = v2450
								};
								if v2415.neglected[v2450] then

								end;
								local l_neglected_2 = v2415.neglected;
								local v2461 = l_neglected_2[v2450];
								if v2461 then
									v2455 = v2461;
								else
									local v2462 = {};
									l_neglected_2[v2450] = v2462;
									v2455 = v2462;
								end;
								table.insert(v2455, v2456);
							end;
						else
							for _, v2464 in ipairs(v2431) do
								if not v2434[v2464] then
									local v2465 = v2415.uncertain_regs[v2464];
									if v2465 then
										local l_location_4 = v2415.location;
										local l_location_5 = v2465.location;
										local v2468;
										if l_location_4.depth < l_location_5.depth then
											v2468 = false;
										else
											local l_l_location_4_0 = l_location_4;
											while true do
												if l_l_location_4_0.depth ~= l_location_5.depth then
													l_l_location_4_0 = l_l_location_4_0.parent;
													if not l_l_location_4_0 then
														v2468 = false;
														break;
													end;
												else
													v2468 = l_l_location_4_0.hl_index == l_location_5.hl_index;
													break;
												end;
											end;
										end;
										if not v2468 then
											v1955(v2415, v2465);
										end;
									else
										local v2470 = v2415.reg_writes_global[v2464];
										if v2470 and #v2470 > 0 then
											local v2471 = v2470[#v2470];
											local l_last_loop_0 = v2415.location.last_loop;
											if l_last_loop_0 then
												local l_location_6 = v2415.location;
												local v2474;
												if l_location_6.depth < l_last_loop_0.depth then
													v2474 = false;
												else
													local l_l_location_6_0 = l_location_6;
													while true do
														if l_l_location_6_0.depth ~= l_last_loop_0.depth then
															l_l_location_6_0 = l_l_location_6_0.parent;
															if not l_l_location_6_0 then
																v2474 = false;
																break;
															end;
														else
															v2474 = l_l_location_6_0.hl_index == l_last_loop_0.hl_index;
															break;
														end;
													end;
												end;
												if v2474 then
													local l_location_7 = v2471.location;
													if l_location_7.depth < l_last_loop_0.depth then
														v2474 = false;
													else
														local l_l_location_7_0 = l_location_7;
														while true do
															if l_l_location_7_0.depth ~= l_last_loop_0.depth then
																l_l_location_7_0 = l_l_location_7_0.parent;
																if not l_l_location_7_0 then
																	v2474 = false;
																	break;
																end;
															else
																v2474 = l_l_location_7_0.hl_index == l_last_loop_0.hl_index;
																break;
															end;
														end;
													end;
													if not v2474 then
														v2474 = {
															index = v2422.index, 
															location = l_location_6, 
															register_range = {
																beginning = v2464, 
																ending = v2464
															}
														};
														v1955(v2415, v2474, v2471, true);
													end;
												end;
											end;
										end;
									end;
								end;
								if not l_reg_has_var_0[v2464] and not v2434[v2464] then
									local l_reg_reads_global_1 = v2415.reg_reads_global;
									local v2479 = l_reg_reads_global_1[v2464];
									local v2480;
									if v2479 then
										v2480 = v2479;
									else
										local v2481 = {};
										l_reg_reads_global_1[v2464] = v2481;
										v2480 = v2481;
									end;
									if #v2480 > 0 then
										v2479 = v2415.reg_writes_global;
										local v2482 = v2479[v2464];
										if v2482 then
											l_reg_reads_global_1 = v2482;
										else
											local v2483 = {};
											v2479[v2464] = v2483;
											l_reg_reads_global_1 = v2483;
										end;
										v2479 = v2480[#v2480];
										v2482 = l_reg_reads_global_1[#l_reg_reads_global_1];
										if v2482 and v2482.code.opname ~= "NAMECALL" and v2479.code.index > v2482.code.index then
											v1990(v2415, v2482.reg_range, v2482.code.code_index);
										end;
									end;
								end;
								local v2484 = {
									code = v2422, 
									location = v2415.location, 
									reg_range = {
										beginning = v2464, 
										ending = v2464
									}
								};
								local l_reg_reads_1 = v2415.reg_reads;
								local v2486 = l_reg_reads_1[v2464];
								local v2487;
								if v2486 then
									v2487 = v2486;
								else
									local v2488 = {};
									l_reg_reads_1[v2464] = v2488;
									v2487 = v2488;
								end;
								table.insert(v2487, v2484);
								l_reg_reads_1 = v2415.reg_reads_global;
								v2486 = l_reg_reads_1[v2464];
								if v2486 then
									v2487 = v2486;
								else
									local v2489 = {};
									l_reg_reads_1[v2464] = v2489;
									v2487 = v2489;
								end;
								table.insert(v2487, v2484);
								local _ = v2484.code;
								v2487 = v2415.neglected[v2464];
								if v2487 then
									for _ = #v2487, 1, -1 do

									end;
								end;
							end;
							for _, v2493 in ipairs(v2432) do
								if l_reg_has_var_0[v2493] and not v2434[v2493] then
									local v2494 = v2415.reg_has_var[v2493];
									for v2495 = v2494.beginning, v2494.ending do
										v2415.reg_has_var[v2495] = nil;
									end;
								end;
								v2415.uncertain_regs[v2493] = nil;
								local v2496 = {
									code = v2422, 
									location = v2415.location, 
									reg_range = v2435
								};
								local l_reg_writes_3 = v2415.reg_writes;
								local v2498 = l_reg_writes_3[v2493];
								local v2499;
								if v2498 then
									v2499 = v2498;
								else
									local v2500 = {};
									l_reg_writes_3[v2493] = v2500;
									v2499 = v2500;
								end;
								table.insert(v2499, v2496);
								l_reg_writes_3 = v2415.reg_writes_global;
								v2498 = l_reg_writes_3[v2493];
								if v2498 then
									v2499 = v2498;
								else
									local v2501 = {};
									l_reg_writes_3[v2493] = v2501;
									v2499 = v2501;
								end;
								table.insert(v2499, v2496);
								local l_code_7 = v2496.code;
								v2499 = {
									hl_index = v2415.location.hl_index, 
									start_code = l_code_7, 
									register = v2493
								};
								if v2415.neglected[v2493] then

								end;
								local l_neglected_3 = v2415.neglected;
								local v2504 = l_neglected_3[v2493];
								if v2504 then
									v2498 = v2504;
								else
									local v2505 = {};
									l_neglected_3[v2493] = v2505;
									v2498 = v2505;
								end;
								table.insert(v2498, v2499);
							end;
						end;
						if #v2432 > 1 and v2422.opname ~= "NAMECALL" then
							v1990(v2415, v2435);
						end;
						for _, v2507 in ipairs(v2432) do
							if #v2423 > 0 then
								for _, v2509 in ipairs(v2423) do
									local l_register_range_4 = v2509.register_range;
									local l_beginning_9 = l_register_range_4.beginning;
									local l_ending_6 = l_register_range_4.ending;
									local v2513 = false;
									if l_beginning_9 <= v2507 then
										v2513 = v2507 <= l_ending_6;
									end;
									if v2513 then
										v1990(v2415, v2509.register_range, v2422.code_index, nil, true);
									end;
									v1980(v2415, v2509, v2422.code_index);
								end;
								table.clear(v2423);
							elseif not v2434[v2507] then

							end;
						end;
						if #v2423 > 0 then
							print(v2423);
							error("Failed to handle forcedef");
						end;
					end;
				end;
				v2024 = function(v2514) --[[ Line: 7122 ]] --[[ Name: clone_vpstate_for_nest ]]
					-- upvalues: v109 (ref)
					local v2515 = v109(v2514.reg_reads);
					local v2516 = v109(v2514.reg_reads_global);
					return {
						reg_has_var = table.clone(v2514.reg_has_var), 
						reg_forced_var = v2514.reg_forced_var, 
						reg_reads = v2515, 
						reg_reads_global = v2516, 
						reg_writes = {}, 
						reg_writes_global = v2514.reg_writes_global, 
						demands = v2514.demands, 
						observations = v2514.observations, 
						uncertain_regs = v2514.uncertain_regs, 
						preprocess_task_index = v2514.preprocess_task_index, 
						neglected = {}, 
						location = v2514.location
					};
				end;
				v2025 = function(v2517, v2518) --[[ Line: 7148 ]] --[[ Name: process_vpstate_nest ]]
					for v2519, v2520 in pairs(v2518.neglected) do
						v2517.neglected[v2519] = v2520;
					end;
					for v2521, v2522 in pairs(v2518.reg_writes) do
						if #v2522 > 0 and not v2518.reg_has_var[v2521] then
							v2517.uncertain_regs[v2521] = {
								register_range = {
									beginning = v2521, 
									ending = v2521
								}, 
								index = v2522[1].code.index, 
								location = v2518.location
							};
						end;
					end;
					for v2523, v2524 in pairs(v2518.reg_reads) do
						local l_reg_reads_global_2 = v2517.reg_reads_global;
						local v2526 = l_reg_reads_global_2[v2523];
						local v2527;
						if v2526 then
							v2527 = v2526;
						else
							local v2528 = {};
							l_reg_reads_global_2[v2523] = v2528;
							v2527 = v2528;
						end;
						for _, v2530 in ipairs(v2524) do
							table.insert(v2527, v2530);
						end;
					end;
				end;
				v2033 = nil;
				v2045 = 0;
				v2052 = 0;
				v2057 = #v1366;
				v2068 = {};
				v2073 = function(v2531, v2532, v2533, v2534, v2535) --[[ Line: 7179 ]] --[[ Name: process_hl_block ]]
					-- upvalues: v2052 (ref), v33 (ref), v2057 (copy), v2045 (ref), v1885 (ref), v1886 (ref), v1884 (ref), v2073 (copy), v1366 (copy), v2018 (copy), v2033 (ref), v2024 (copy), v2025 (copy), v1225 (ref), v1197 (ref), v1215 (ref), v1208 (ref), v1143 (ref), v2068 (ref), v1963 (copy), v1902 (ref)
					v2052 = v2052 + 1;
					v33(v2052, v2057, "<VarAnalysisCycle" .. v2045 .. ">");
					local l_hl_index_8 = v2532.hl_index;
					local l_location_8 = v2531.location;
					local v2538 = {
						hl_index = l_hl_index_8, 
						depth = if v2534 then l_location_8.depth + 1 else l_location_8.depth, 
						parent = if v2534 then l_location_8 else l_location_8.parent, 
						last_loop = l_location_8.last_loop
					};
					if v2535 then
						v2538.last_loop = v2538;
					end;
					v2531.location = v2538;
					if v2533 then
						v1885[v2532.hl_index] = v2533.hl_index;
					end;
					if not v1886[v2532.hl_index] then
						v1886[v2532.hl_index] = v2531.location;
					end;
					if v2532.type == "sequential" then
						for _, v2540 in ipairs(v2532.data) do
							v1884[v2540] = v1884[v2532.hl_index];
							v2073(v2531, v1366[v2540], v2533);
						end;
					elseif v2532.type == "single" then
						v2018(v2531, v2532.hl_index, v2532.data, v2532._visitor);
					elseif v2532.type == "ifthen" or v2532.type == "ifthenelse" then
						local l_data_5 = v2532.data;
						v2531.location = v2033(v2531, l_data_5.condition, v2532);
						l_hl_index_8 = v2024(v2531);
						l_location_8 = nil;
						if l_data_5.else_ then
							l_location_8 = v2024(v2531);
							v1884[l_data_5.else_] = v2532.hl_index;
							l_location_8.neglected = {};
							v2073(l_location_8, v1366[l_data_5.else_], v2532, true);
						end;
						v1884[l_data_5.pass] = v2532.hl_index;
						l_hl_index_8.neglected = {};
						v2073(l_hl_index_8, v1366[l_data_5.pass], v2532, true);
						v2025(v2531, l_hl_index_8);
						if l_data_5.else_ then
							v2025(v2531, l_location_8);
						end;
					elseif v2532.type == "oneblockwhile" then
						local v2542 = v2024(v2531);
						v2542.neglected = {};
						l_hl_index_8 = v2532.data;
						v1884[l_hl_index_8.code] = v2532.hl_index;
						l_location_8 = l_hl_index_8.for_info;
						if l_location_8 and not l_location_8.variables then
							v2538 = nil;
							if l_location_8.type == "numeric" then
								local l_index_reg_0 = l_location_8.args.index_reg;
								local v2544 = {
									beginning = l_index_reg_0, 
									ending = l_index_reg_0
								};
								l_index_reg_0 = {};
								local v2545 = {};
								local l_v1225_8 = v1225;
								local v2547 = "var" .. tostring(v1197);
								local v2548 = v1215[v2547];
								local l_v2547_0 = v2547;
								local v2550 = v2548 or 1;
								while v1208[l_v2547_0] or v1143[l_v2547_0] do
									v2550 = v2550 + 1;
									l_v2547_0 = v2547 .. "_" .. v2550;
								end;
								v1215[v2547] = v2550;
								local l_l_v2547_0_0 = l_v2547_0;
								v1197 = v1197 + 1;
								local v2552 = l_v1225_8(l_l_v2547_0_0, v2544, v2545);
								v6(l_index_reg_0, 1, v2552);
								v2538 = l_index_reg_0;
							elseif l_location_8.type == "generic" then
								local _ = l_location_8.args;
								local v2554 = {};
								local l_variable_count_0 = l_location_8.variable_count;
								v2538 = table.create(l_variable_count_0);
								for _ = 1, l_variable_count_0 do
									local l_variables_reg_range_0 = l_location_8.variables_reg_range;
									local l_v1225_9 = v1225;
									local v2559 = "var" .. tostring(v1197);
									local v2560 = v1215[v2559];
									local l_v2559_0 = v2559;
									local v2562 = v2560 or 1;
									while v1208[l_v2559_0] or v1143[l_v2559_0] do
										v2562 = v2562 + 1;
										l_v2559_0 = v2559 .. "_" .. v2562;
									end;
									v1215[v2559] = v2562;
									local l_l_v2559_0_0 = l_v2559_0;
									v1197 = v1197 + 1;
									table.insert(v2538, (l_v1225_9(l_l_v2559_0_0, l_variables_reg_range_0, v2554)));
								end;
							else
								error((("Unknown for_info type \"%*\""):format(l_location_8.type)));
							end;
							l_location_8.variables = v2538;
							v2068[l_location_8] = true;
							v1963(v2542.demands, l_location_8.variables_reg_range, v2532.index, v2531.location, nil, true);
						end;
						v2073(v2542, v1366[l_hl_index_8.code], v2532, true, true);
						v2025(v2531, v2542);
					else
						error((("Unknown hl_block type %*"):format(v2532.type)));
					end;
					v1902[v2532.hl_index] = v2531;
				end;
				v2078 = function(v2564, v2565, v2566, v2567) --[[ Line: 7270 ]] --[[ Name: process_condition ]]
					-- upvalues: v1366 (copy), v2073 (copy), v2078 (copy), v2024 (copy), v2025 (copy)
					local v2568 = nil;
					if v2565.type == "reg" then
						assert(v2565.code);
						local v2569 = v1366[v2565.code];
						local l_hl_index_9 = v2569.hl_index;
						local l_location_9 = v2564.location;
						v2568 = {
							hl_index = l_hl_index_9, 
							depth = if v2567 then l_location_9.depth + 1 else l_location_9.depth, 
							parent = if v2567 then l_location_9 else l_location_9.parent, 
							last_loop = l_location_9.last_loop
						};
						v2564.location = v2568;
						v2073(v2564, v2569, v2566, nil);
						return v2568;
					else
						local l_hl_index_10 = v2564.location.hl_index;
						local l_location_10 = v2564.location;
						v2568 = {
							hl_index = l_hl_index_10, 
							depth = if v2567 then l_location_10.depth + 1 else l_location_10.depth, 
							parent = if v2567 then l_location_10 else l_location_10.parent, 
							last_loop = l_location_10.last_loop
						};
						v2564.location = v2568;
						l_hl_index_10 = v2565.lhs;
						if type(l_hl_index_10) == "table" then
							if l_hl_index_10.is_full_condition_t then
								v2078(v2564, l_hl_index_10, v2566, v2565.type == "and");
							end;
							l_location_10 = v2565.rhs;
							if type(l_location_10) == "table" and l_location_10.is_full_condition_t then
								if v2565.type == "and" then
									local v2574 = v2024(v2564);
									v2568 = v2078(v2574, l_location_10, v2566, nil);
									v2025(v2564, v2574);
									return v2568;
								else
									v2078(v2564, l_location_10, v2566);
								end;
							end;
						end;
						return v2568;
					end;
				end;
				v2033 = v2078;
				v2095 = v1876();
				v2099 = false;
				v2143 = {};
				v2144 = {};
				while true do
					v2165 = {};
					v2045 = v2045 + 1;
					v2052 = 0;
					if v2045 > 1 then
						v1359 = {};
					end;
					v1902 = {};
					v1884 = {};
					v1885 = {};
					v1886 = {};
					v1903 = {};
					v1904 = 0;
					v1905 = {};
					v2144 = {};
					for v2575 in pairs(v2068) do
						v2575.variables = nil;
					end;
					v2068 = {};
					local v2576 = {
						hl_index = v2095.hl_index, 
						depth = 0, 
						parent = nil
					};
					v2073({
						reg_src = {}, 
						reg_all_src = {}, 
						reg_has_var = {}, 
						reg_forced_var = {}, 
						reg_reads = {}, 
						reg_reads_global = {}, 
						reg_writes = {}, 
						reg_writes_global = {}, 
						demands = v2143, 
						observations = v2144, 
						uncertain_regs = {}, 
						preprocess_task_index = v1904, 
						neglected = v2165, 
						location = v2576
					}, v2095, v2095, true);
					if not next(v2143) then
						for _, v2578 in ipairs(v2144) do
							local _ = v2578.location.parent.hl_index;
							if not v2143[v2578.info.wanted_definition_point] then
								v1963(v2143, v2578.info.register_range, v2578.info.wanted_definition_point, v2578.info.definition_location, v2578.info.is_predefinition);
							end;
						end;
						if v2045 >= 4 then
							v2099 = true;
							break;
						elseif #v2144 == 0 then
							break;
						end;
					else
						break;
					end;
				end;
				if v2099 then
					v1376(1, l_prefix_warning_1 .. ": Variable analysis failed. Output will have some incorrect variable assignments");
				end;
				for v2580, v2581 in pairs(v1359) do
					assert(#v2581 > 0);
					local v2582 = table.create(#v2581);
					local v2583 = {};
					local v2584 = {};
					local v2585 = {};
					for v2586 = #v2581, 1, -1 do
						local v2587 = v2581[v2586];
						local l_type_5 = v2587.type;
						if l_type_5 == "defvar" then
							table.insert(v2583, v2587);
						elseif l_type_5 == "lockvar" then
							table.insert(v2584, v2587);
						else
							table.insert(v2585, v2587);
						end;
					end;
					for _, v2590 in ipairs(v2583) do
						table.insert(v2582, v2590);
					end;
					for _, v2592 in ipairs(v2584) do
						table.insert(v2582, v2592);
					end;
					for _, v2594 in ipairs(v2585) do
						table.insert(v2582, v2594);
					end;
					v1359[v2580] = v2582;
				end;
				v1350:end_benchmark("Stack Incantation");
				v1350:start_benchmark("AST Generation");
				v2165 = function(v2595, v2596) --[[ Line: 7419 ]] --[[ Name: move_internal ]]
					-- upvalues: v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1358 (copy)
					local v2597;
					if v1391[v2596] then
						v2597 = v1390(v2596, v1391[v2596]);
					else
						local v2598 = v1357[v2596];
						if not v2598 then
							v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2596) .. "]");
							v2598 = v1377(v2596, (v1285(true)));
						end;
						v2597 = v2598;
					end;
					v1357[v2595] = v2597;
					v1358[v2597] = v2595;
				end;
				local function v2600(_) --[[ Line: 7425 ]] --[[ Name: SKIPPED_INST ]]
					-- upvalues: v1522 (copy)
					v1522();
				end;
				local function v2602(_) --[[ Line: 7428 ]] --[[ Name: UNHANDLED_INST ]]
					-- upvalues: v1489 (ref)
					v1489 = true;
				end;
				local v2603 = nil;
				v2603 = {
					FASTCALL = v2600, 
					FASTCALL1 = v2600, 
					FASTCALL2 = v2600, 
					FASTCALL2K = v2600, 
					FASTCALL3 = v2600, 
					FORNPREP = v2600, 
					FORGPREP = v2600, 
					FORGPREP_NEXT = v2600, 
					FORGPREP_INEXT = v2600, 
					PREPVARARGS = v2600, 
					JUMP = v2602, 
					JUMPBACK = v2602, 
					JUMPX = v2602, 
					JUMPIF = v2602, 
					JUMPIFNOT = v2602, 
					JUMPIFEQ = v2602, 
					JUMPIFLE = v2602, 
					JUMPIFLT = v2602, 
					JUMPIFNOTEQ = v2602, 
					JUMPIFNOTLE = v2602, 
					JUMPIFNOTLT = v2602, 
					JUMPXEQKNIL = v2602, 
					JUMPXEQKB = v2602, 
					JUMPXEQKN = v2602, 
					JUMPXEQKS = v2602, 
					FORNLOOP = v2602, 
					FORGLOOP = v2602, 
					GETVARARGS = function(v2604) --[[ Line: 7463 ]] --[[ Name: GETVARARGS ]]
						-- upvalues: v1373 (copy), l_prefix_warning_1 (ref), v297 (ref), v1518 (copy), v1542 (copy)
						local v2605 = bit32.band(bit32.rshift(v2604, 8), 255);
						local v2606 = bit32.band(bit32.rshift(v2604, 16), 255) - 1;
						if v2606 == 0 then
							v1373(l_prefix_warning_1 .. ": Malformed varargs");
							return;
						else
							if v2606 == -1 then
								v297 = v2605;
							end;
							v1518(v2605, v1542(v2605));
							return;
						end;
					end, 
					MOVE = function(v2607) --[[ Line: 7476 ]] --[[ Name: MOVE ]]
						-- upvalues: v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1358 (copy), v1518 (copy), v1412 (copy)
						local v2608 = bit32.band(bit32.rshift(v2607, 8), 255);
						local v2609 = bit32.band(bit32.rshift(v2607, 16), 255);
						local v2610;
						if v1391[v2609] then
							v2610 = v1390(v2609, v1391[v2609]);
						else
							local v2611 = v1357[v2609];
							if not v2611 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2609) .. "]");
								v2611 = v1377(v2609, (v1285(true)));
							end;
							v2610 = v2611;
						end;
						v1357[v2608] = v2610;
						v1358[v2610] = v2608;
						v1518(v2608, v1412(v2609));
					end, 
					LOADK = function(v2612) --[[ Line: 7483 ]] --[[ Name: LOADK ]]
						-- upvalues: l_constants_1 (copy), v1518 (copy), v1550 (copy)
						local v2613 = bit32.band(bit32.rshift(v2612, 8), 255);
						local v2614 = l_constants_1[bit32.band(bit32.rshift(v2612, 16), 65535)];
						v1518(v2613, v1550(v2613, v2614));
					end, 
					LOADKX = function(v2615) --[[ Line: 7490 ]] --[[ Name: LOADKX ]]
						-- upvalues: l_code_1 (copy), v1360 (ref), l_constants_1 (copy), v1518 (copy), v1550 (copy)
						local v2616 = bit32.band(bit32.rshift(v2615, 8), 255);
						local v2617 = l_code_1[v1360 + 1];
						if not v2617 then
							error("Expected aux");
						end;
						v2617 = l_constants_1[v2617];
						v1518(v2616, v1550(v2616, v2617));
					end, 
					LOADN = function(v2618) --[[ Line: 7497 ]] --[[ Name: LOADN ]]
						-- upvalues: v44 (ref), v1518 (copy), v1550 (copy)
						local v2619 = bit32.band(bit32.rshift(v2618, 8), 255);
						buffer.writeu16(v44, 0, (bit32.band(bit32.rshift(v2618, 16), 65535)));
						local v2620 = buffer.readi16(v44, 0);
						v1518(v2619, v1550(v2619, {
							type = 2, 
							value = v2620
						}));
					end, 
					LOADNIL = function(v2621) --[[ Line: 7506 ]] --[[ Name: LOADNIL ]]
						-- upvalues: v1518 (copy), v1380 (copy)
						local v2622 = bit32.band(bit32.rshift(v2621, 8), 255);
						v1518(v2622, v1380(v2622));
					end, 
					LOADB = function(v2623) --[[ Line: 7511 ]] --[[ Name: LOADB ]]
						-- upvalues: v1518 (copy), v1562 (copy)
						local v2624 = bit32.band(bit32.rshift(v2623, 8), 255);
						local v2625 = bit32.band(bit32.rshift(v2623, 16), 255);
						assert(v2625 <= 1);
						v1518(v2624, v1562(v2624, v2625 == 1));
					end, 
					NEWTABLE = function(v2626) --[[ Line: 7518 ]] --[[ Name: NEWTABLE ]]
						-- upvalues: v1518 (copy), v1552 (copy)
						local v2627 = bit32.band(bit32.rshift(v2626, 8), 255);
						v1518(v2627, v1552(v2627));
					end, 
					DUPTABLE = function(v2628) --[[ Line: 7523 ]] --[[ Name: DUPTABLE ]]
						-- upvalues: v1518 (copy), v1552 (copy)
						local v2629 = bit32.band(bit32.rshift(v2628, 8), 255);
						v1518(v2629, v1552(v2629));
					end, 
					SETTABLE = function(v2630) --[[ Line: 7528 ]] --[[ Name: SETTABLE ]]
						-- upvalues: v1448 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1367 (copy), v1522 (copy)
						local v2631 = bit32.band(bit32.rshift(v2630, 8), 255);
						local v2632 = bit32.band(bit32.rshift(v2630, 16), 255);
						local v2633 = bit32.band(bit32.rshift(v2630, 24), 255);
						local l_v1448_0 = v1448;
						local l_v2632_0 = v2632;
						local v2636;
						if v1391[v2633] then
							v2636 = v1390(v2633, v1391[v2633]);
						else
							local v2637 = v1357[v2633];
							if not v2637 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2633) .. "]");
								v2637 = v1377(v2633, (v1285(true)));
							end;
							v2636 = v2637;
						end;
						if v1333[v2636] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2636] = true;
						end;
						local l_v2636_0 = v2636;
						local v2639;
						if v1391[v2631] then
							v2639 = v1390(v2631, v1391[v2631]);
						else
							local v2640 = v1357[v2631];
							if not v2640 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2631) .. "]");
								v2640 = v1377(v2631, (v1285(true)));
							end;
							v2639 = v2640;
						end;
						if v1333[v2639] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2639] = true;
						end;
						l_v1448_0(l_v2632_0, l_v2636_0, v2639);
						v1367();
						v1522();
					end, 
					SETTABLEKS = function(v2641) --[[ Line: 7537 ]] --[[ Name: SETTABLEKS ]]
						-- upvalues: l_constants_1 (copy), l_code_1 (copy), v1360 (ref), v1448 (copy), v1550 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1367 (copy), v1522 (copy)
						local v2642 = bit32.band(bit32.rshift(v2641, 8), 255);
						local v2643 = bit32.band(bit32.rshift(v2641, 16), 255);
						local l_l_constants_1_0 = l_constants_1;
						local v2645 = l_code_1[v1360 + 1];
						if not v2645 then
							error("Expected aux");
						end;
						local v2646 = l_l_constants_1_0[v2645];
						l_l_constants_1_0 = v1448;
						local l_v2643_0 = v2643;
						v2645 = v1550(nil, v2646);
						local v2648;
						if v1391[v2642] then
							v2648 = v1390(v2642, v1391[v2642]);
						else
							local v2649 = v1357[v2642];
							if not v2649 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2642) .. "]");
								v2649 = v1377(v2642, (v1285(true)));
							end;
							v2648 = v2649;
						end;
						if v1333[v2648] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2648] = true;
						end;
						l_l_constants_1_0(l_v2643_0, v2645, v2648);
						v1367();
						v1522();
					end, 
					SETTABLEN = function(v2650) --[[ Line: 7546 ]] --[[ Name: SETTABLEN ]]
						-- upvalues: v1448 (copy), v1550 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1367 (copy), v1522 (copy)
						local v2651 = bit32.band(bit32.rshift(v2650, 8), 255);
						local v2652 = bit32.band(bit32.rshift(v2650, 16), 255);
						local v2653 = bit32.band(bit32.rshift(v2650, 24), 255) + 1;
						local l_v1448_1 = v1448;
						local l_v2652_0 = v2652;
						local v2656 = v1550(nil, {
							type = 2, 
							value = v2653
						});
						local v2657;
						if v1391[v2651] then
							v2657 = v1390(v2651, v1391[v2651]);
						else
							local v2658 = v1357[v2651];
							if not v2658 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2651) .. "]");
								v2658 = v1377(v2651, (v1285(true)));
							end;
							v2657 = v2658;
						end;
						if v1333[v2657] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2657] = true;
						end;
						l_v1448_1(l_v2652_0, v2656, v2657);
						v1367();
						v1522();
					end, 
					GETTABLE = function(v2659) --[[ Line: 7558 ]] --[[ Name: GETTABLE ]]
						-- upvalues: v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1518 (copy), v1692 (copy)
						local v2660 = bit32.band(bit32.rshift(v2659, 8), 255);
						local v2661 = bit32.band(bit32.rshift(v2659, 16), 255);
						local v2662;
						if v1391[v2661] then
							v2662 = v1390(v2661, v1391[v2661]);
						else
							local v2663 = v1357[v2661];
							if not v2663 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2661) .. "]");
								v2663 = v1377(v2661, (v1285(true)));
							end;
							v2662 = v2663;
						end;
						if v1333[v2662] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2662] = true;
						end;
						local l_v2662_0 = v2662;
						local v2665 = bit32.band(bit32.rshift(v2659, 24), 255);
						if v1391[v2665] then
							v2661 = v1390(v2665, v1391[v2665]);
						else
							local v2666 = v1357[v2665];
							if not v2666 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2665) .. "]");
								v2666 = v1377(v2665, (v1285(true)));
							end;
							v2661 = v2666;
						end;
						if v1333[v2661] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2661] = true;
						end;
						v1518(v2660, v1692(v2660, l_v2662_0, v2661));
					end, 
					GETTABLEKS = function(v2667) --[[ Line: 7565 ]] --[[ Name: GETTABLEKS ]]
						-- upvalues: v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), l_constants_1 (copy), l_code_1 (copy), v1518 (copy), v1692 (copy), v1550 (copy)
						local v2668 = bit32.band(bit32.rshift(v2667, 8), 255);
						local v2669 = bit32.band(bit32.rshift(v2667, 16), 255);
						local v2670;
						if v1391[v2669] then
							v2670 = v1390(v2669, v1391[v2669]);
						else
							local v2671 = v1357[v2669];
							if not v2671 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2669) .. "]");
								v2671 = v1377(v2669, (v1285(true)));
							end;
							v2670 = v2671;
						end;
						if v1333[v2670] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2670] = true;
						end;
						local l_v2670_0 = v2670;
						v2669 = l_constants_1;
						local v2673 = l_code_1[v1360 + 1];
						if not v2673 then
							error("Expected aux");
						end;
						v2670 = v2669[v2673];
						v1518(v2668, v1692(v2668, l_v2670_0, v1550(nil, v2670)));
					end, 
					GETTABLEN = function(v2674) --[[ Line: 7572 ]] --[[ Name: GETTABLEN ]]
						-- upvalues: v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1518 (copy), v1692 (copy), v1550 (copy)
						local v2675 = bit32.band(bit32.rshift(v2674, 8), 255);
						local v2676 = bit32.band(bit32.rshift(v2674, 16), 255);
						local v2677;
						if v1391[v2676] then
							v2677 = v1390(v2676, v1391[v2676]);
						else
							local v2678 = v1357[v2676];
							if not v2678 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2676) .. "]");
								v2678 = v1377(v2676, (v1285(true)));
							end;
							v2677 = v2678;
						end;
						if v1333[v2677] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2677] = true;
						end;
						local l_v2677_0 = v2677;
						v2677 = bit32.band(bit32.rshift(v2674, 24), 255) + 1;
						v1518(v2675, v1692(v2675, l_v2677_0, v1550(nil, {
							type = 2, 
							value = v2677
						})));
					end, 
					SETLIST = function(v2680) --[[ Line: 7582 ]] --[[ Name: SETLIST ]]
						-- upvalues: l_code_1 (copy), v1360 (ref), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1377 (ref), v1285 (ref), v297 (ref), v1448 (copy), v1550 (copy), v1333 (ref), l_prefix_error_1 (ref), v1367 (copy), v1522 (copy)
						local v2681 = bit32.band(bit32.rshift(v2680, 8), 255);
						local v2682 = bit32.band(bit32.rshift(v2680, 16), 255);
						local v2683 = bit32.band(bit32.rshift(v2680, 24), 255) - 1;
						local v2684 = l_code_1[v1360 + 1];
						if not v2684 then
							error("Expected aux");
						end;
						local l_v2684_0 = v2684;
						if v1391[v2681] then
							v2684 = v1390(v2681, v1391[v2681]);
						else
							local v2686 = v1357[v2681];
							if not v2686 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2681) .. "]");
								v2686 = v1377(v2681, (v1285(true)));
							end;
							v2684 = v2686;
						end;
						local l_v2682_0 = v2682;
						local v2688 = if v2683 == -1 then v297 else v2682 + v2683 - 1;
						for v2689 = l_v2682_0, v2688 do
							local l_v1448_2 = v1448;
							local l_v2681_0 = v2681;
							local v2692 = v1550(nil, {
								type = 2, 
								value = l_v2684_0
							});
							local v2693;
							if v1391[v2689] then
								v2693 = v1390(v2689, v1391[v2689]);
							else
								local v2694 = v1357[v2689];
								if not v2694 then
									v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2689) .. "]");
									v2694 = v1377(v2689, (v1285(true)));
								end;
								v2693 = v2694;
							end;
							if v1333[v2693] then
								v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
							else
								v1333[v2693] = true;
							end;
							l_v1448_2(l_v2681_0, v2692, v2693);
							v1367();
							l_v2684_0 = l_v2684_0 + 1;
						end;
						v1377(v2681, v2684);
						v1522();
					end, 
					GETUPVAL = function(v2695) --[[ Line: 7602 ]] --[[ Name: GETUPVAL ]]
						-- upvalues: v1349 (copy), v1518 (copy), v1390 (ref)
						local v2696 = bit32.band(bit32.rshift(v2695, 8), 255);
						local v2697 = bit32.band(bit32.rshift(v2695, 16), 255);
						assert(v1349);
						local v2698 = v1349.upvalues[v2697];
						v1518(v2696, v1390(v2696, v2698.name));
					end, 
					SETUPVAL = function(v2699) --[[ Line: 7610 ]] --[[ Name: SETUPVAL ]]
						-- upvalues: v1349 (copy), v1437 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1367 (copy), v1522 (copy)
						local v2700 = bit32.band(bit32.rshift(v2699, 8), 255);
						local v2701 = bit32.band(bit32.rshift(v2699, 16), 255);
						assert(v1349);
						local v2702 = v1349.upvalues[v2701];
						local l_v1437_0 = v1437;
						local l_name_8 = v2702.name;
						local v2705;
						if v1391[v2700] then
							v2705 = v1390(v2700, v1391[v2700]);
						else
							local v2706 = v1357[v2700];
							if not v2706 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2700) .. "]");
								v2706 = v1377(v2700, (v1285(true)));
							end;
							v2705 = v2706;
						end;
						if v1333[v2705] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2705] = true;
						end;
						l_v1437_0(l_name_8, v2705);
						v1367();
						v1522();
					end, 
					GETIMPORT = function(v2707) --[[ Line: 7620 ]] --[[ Name: GETIMPORT ]]
						-- upvalues: l_code_1 (copy), v1360 (ref), v1700 (copy), v1518 (copy)
						local v2708 = bit32.band(bit32.rshift(v2707, 8), 255);
						local v2709 = l_code_1[v1360 + 1];
						if not v2709 then
							error("Expected aux");
						end;
						v2709 = v1700(v2708, v2709);
						assert(v2709);
						v1518(v2708, v2709);
					end, 
					GETGLOBAL = function(v2710) --[[ Line: 7628 ]] --[[ Name: GETGLOBAL ]]
						-- upvalues: l_constants_1 (copy), l_code_1 (copy), v1360 (ref), v1518 (copy), v1545 (copy)
						local v2711 = bit32.band(bit32.rshift(v2710, 8), 255);
						local l_l_constants_1_1 = l_constants_1;
						local v2713 = l_code_1[v1360 + 1];
						if not v2713 then
							error("Expected aux");
						end;
						local v2714 = l_l_constants_1_1[v2713];
						v1518(v2711, v1545(v2711, v2714));
					end, 
					SETGLOBAL = function(v2715) --[[ Line: 7634 ]] --[[ Name: SETGLOBAL ]]
						-- upvalues: l_constants_1 (copy), l_code_1 (copy), v1360 (ref), v1441 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1367 (copy), v1522 (copy)
						local v2716 = bit32.band(bit32.rshift(v2715, 8), 255);
						local l_l_constants_1_2 = l_constants_1;
						local v2718 = l_code_1[v1360 + 1];
						if not v2718 then
							error("Expected aux");
						end;
						local v2719 = l_l_constants_1_2[v2718];
						l_l_constants_1_2 = v1441;
						local l_v2719_0 = v2719;
						local v2721;
						if v1391[v2716] then
							v2721 = v1390(v2716, v1391[v2716]);
						else
							local v2722 = v1357[v2716];
							if not v2722 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2716) .. "]");
								v2722 = v1377(v2716, (v1285(true)));
							end;
							v2721 = v2722;
						end;
						if v1333[v2721] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2721] = true;
						end;
						l_l_constants_1_2(l_v2719_0, v2721);
						v1367();
						v1522();
					end, 
					NAMECALL = function(v2723) --[[ Line: 7642 ]] --[[ Name: NAMECALL ]]
						-- upvalues: v1523 (ref), l_constants_1 (copy), l_code_1 (copy), v1360 (ref), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1377 (ref), v1285 (ref), v1358 (copy), v1557 (copy), v1518 (copy)
						local v2724 = bit32.band(bit32.rshift(v2723, 8), 255);
						local v2725 = bit32.band(bit32.rshift(v2723, 16), 255);
						local l_l_constants_1_3 = l_constants_1;
						local v2727 = l_code_1[v1360 + 1];
						if not v2727 then
							error("Expected aux");
						end;
						v1523 = l_l_constants_1_3[v2727] or {
							type = 3, 
							value = "<UNK>"
						};
						assert(v1523);
						local v2728;
						if v1391[v2725] then
							v2728 = v1390(v2725, v1391[v2725]);
						else
							local v2729 = v1357[v2725];
							if not v2729 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2725) .. "]");
								v2729 = v1377(v2725, (v1285(true)));
							end;
							v2728 = v2729;
						end;
						v1357[v2724] = v2728;
						v1358[v2728] = v2724;
						if v1391[v2725] then
							v2728 = v1390(v2725, v1391[v2725]);
						else
							local v2730 = v1357[v2725];
							if not v2730 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2725) .. "]");
								v2730 = v1377(v2725, (v1285(true)));
							end;
							v2728 = v2730;
						end;
						l_l_constants_1_3 = v1557(v2724, v2728, v1523, true);
						assert(l_l_constants_1_3);
						v1518(v2724, l_l_constants_1_3);
					end, 
					RETURN = function(v2731) --[[ Line: 7657 ]] --[[ Name: RETURN ]]
						-- upvalues: v1361 (ref), v1364 (copy), v1339 (ref), v1205 (ref), v1522 (copy), v1461 (copy), v1367 (copy)
						local v2732 = bit32.band(bit32.rshift(v2731, 8), 255);
						local v2733 = bit32.band(bit32.rshift(v2731, 16), 255) - 1;
						if v2733 == 0 and v1361 == #v1364 then
							v1339[v1205] = true;
							v1522();
							return;
						else
							v1461(v2732, v2733);
							v1367();
							v1522();
							return;
						end;
					end, 
					CALL = function(v2734) --[[ Line: 7670 ]] --[[ Name: CALL ]]
						-- upvalues: v297 (ref), v1717 (copy), v1523 (ref), v1518 (copy), v1205 (ref), v1189 (ref), v1365 (ref), v1367 (copy), v1522 (copy)
						local v2735 = bit32.band(bit32.rshift(v2734, 8), 255);
						local v2736 = bit32.band(bit32.rshift(v2734, 16), 255) - 1;
						local v2737 = bit32.band(bit32.rshift(v2734, 24), 255) - 1;
						if v2736 == -1 then
							v2736 = v297 - v2735;
						end;
						local v2738 = v1717(v2735, v2736, v2737, v1523 and v1523.value);
						v1523 = nil;
						if v2737 == -1 then
							v297 = v2735;
						end;
						if v2737 ~= 0 then
							v1518(v2735, v2738);
							return;
						else
							if v2738.t == "name" then
								print(debug.traceback());
							else
								local v2739 = {
									t = "call", 
									lines = v1205, 
									reads = {}, 
									writes = {}, 
									func = v2738.func, 
									args = v2738.args
								};
								v1189(v2739, v2738.func);
								for _, v2741 in ipairs(v2738.args) do
									v1189(v2739, v2741);
								end;
								v1365 = v2739;
								v1367();
							end;
							v1522();
							return;
						end;
					end, 
					CLOSEUPVALS = function(v2742) --[[ Line: 7709 ]] --[[ Name: CLOSEUPVALS ]]
						-- upvalues: v1718 (copy), v1392 (copy), v1522 (copy)
						local v2743 = bit32.band(bit32.rshift(v2742, 8), 255);
						for v2744 in pairs(table.clone(v1718)) do
							if v2743 <= v2744 then
								v1392[v2744] = nil;
								v1718[v2744] = nil;
							end;
						end;
						v1522();
					end, 
					DUPCLOSURE = function(v2745) --[[ Line: 7720 ]] --[[ Name: DUPCLOSURE ]]
						-- upvalues: l_constants_1 (copy), v551 (ref), v1140 (ref), v1798 (copy)
						local v2746 = bit32.band(bit32.rshift(v2745, 8), 255);
						local v2747 = l_constants_1[bit32.band(bit32.rshift(v2745, 16), 65535)];
						if v2747.type ~= 6 then
							v551 = v551 + 1;
							error("Invalid DUPCLOSURE");
						end;
						local v2748 = v1140[v2747.value];
						v1798(v2746, v2748);
					end, 
					NEWCLOSURE = function(v2749) --[[ Line: 7731 ]] --[[ Name: NEWCLOSURE ]]
						-- upvalues: l_protos_1 (copy), v1798 (copy)
						local v2750 = bit32.band(bit32.rshift(v2749, 8), 255);
						local v2751 = l_protos_1[bit32.band(bit32.rshift(v2749, 16), 65535)];
						v1798(v2750, v2751);
					end, 
					ADD = function(v2752) --[[ Line: 7739 ]] --[[ Name: ADD ]]
						-- upvalues: v1518 (copy), v1593 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref)
						local v2753 = bit32.band(bit32.rshift(v2752, 8), 255);
						local v2754 = bit32.band(bit32.rshift(v2752, 16), 255);
						local v2755 = bit32.band(bit32.rshift(v2752, 24), 255);
						local l_v1518_0 = v1518;
						local l_v2753_0 = v2753;
						local l_v1593_0 = v1593;
						local l_v2753_1 = v2753;
						local v2760;
						if v1391[v2754] then
							v2760 = v1390(v2754, v1391[v2754]);
						else
							local v2761 = v1357[v2754];
							if not v2761 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2754) .. "]");
								v2761 = v1377(v2754, (v1285(true)));
							end;
							v2760 = v2761;
						end;
						if v1333[v2760] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2760] = true;
						end;
						local l_v2760_0 = v2760;
						local v2763;
						if v1391[v2755] then
							v2763 = v1390(v2755, v1391[v2755]);
						else
							local v2764 = v1357[v2755];
							if not v2764 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2755) .. "]");
								v2764 = v1377(v2755, (v1285(true)));
							end;
							v2763 = v2764;
						end;
						if v1333[v2763] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2763] = true;
						end;
						l_v1518_0(l_v2753_0, l_v1593_0(l_v2753_1, l_v2760_0, v2763));
					end, 
					ADDK = function(v2765) --[[ Line: 7746 ]] --[[ Name: ADDK ]]
						-- upvalues: l_constants_1 (copy), v1373 (copy), l_prefix_warning_1 (ref), v1518 (copy), v1593 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1550 (copy)
						local v2766 = bit32.band(bit32.rshift(v2765, 8), 255);
						local v2767 = bit32.band(bit32.rshift(v2765, 16), 255);
						local v2768 = l_constants_1[bit32.band(bit32.rshift(v2765, 24), 255)];
						if v2768.type ~= 2 then
							v1373(l_prefix_warning_1 .. ": Malformed ADDK (constant wasn't a number)");
						end;
						local l_v1518_1 = v1518;
						local l_v2766_0 = v2766;
						local l_v1593_1 = v1593;
						local l_v2766_1 = v2766;
						local v2773;
						if v1391[v2767] then
							v2773 = v1390(v2767, v1391[v2767]);
						else
							local v2774 = v1357[v2767];
							if not v2774 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2767) .. "]");
								v2774 = v1377(v2767, (v1285(true)));
							end;
							v2773 = v2774;
						end;
						if v1333[v2773] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2773] = true;
						end;
						l_v1518_1(l_v2766_0, l_v1593_1(l_v2766_1, v2773, v1550(nil, v2768)));
					end, 
					SUB = function(v2775) --[[ Line: 7756 ]] --[[ Name: SUB ]]
						-- upvalues: v1518 (copy), v1604 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref)
						local v2776 = bit32.band(bit32.rshift(v2775, 8), 255);
						local v2777 = bit32.band(bit32.rshift(v2775, 16), 255);
						local v2778 = bit32.band(bit32.rshift(v2775, 24), 255);
						local l_v1518_2 = v1518;
						local l_v2776_0 = v2776;
						local l_v1604_0 = v1604;
						local l_v2776_1 = v2776;
						local v2783;
						if v1391[v2777] then
							v2783 = v1390(v2777, v1391[v2777]);
						else
							local v2784 = v1357[v2777];
							if not v2784 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2777) .. "]");
								v2784 = v1377(v2777, (v1285(true)));
							end;
							v2783 = v2784;
						end;
						if v1333[v2783] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2783] = true;
						end;
						local l_v2783_0 = v2783;
						local v2786;
						if v1391[v2778] then
							v2786 = v1390(v2778, v1391[v2778]);
						else
							local v2787 = v1357[v2778];
							if not v2787 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2778) .. "]");
								v2787 = v1377(v2778, (v1285(true)));
							end;
							v2786 = v2787;
						end;
						if v1333[v2786] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2786] = true;
						end;
						l_v1518_2(l_v2776_0, l_v1604_0(l_v2776_1, l_v2783_0, v2786));
					end, 
					SUBK = function(v2788) --[[ Line: 7763 ]] --[[ Name: SUBK ]]
						-- upvalues: l_constants_1 (copy), v1373 (copy), l_prefix_warning_1 (ref), v1518 (copy), v1604 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1550 (copy)
						local v2789 = bit32.band(bit32.rshift(v2788, 8), 255);
						local v2790 = bit32.band(bit32.rshift(v2788, 16), 255);
						local v2791 = l_constants_1[bit32.band(bit32.rshift(v2788, 24), 255)];
						if v2791.type ~= 2 then
							v1373(l_prefix_warning_1 .. ": Malformed SUBK (constant wasn't a number)");
						end;
						local l_v1518_3 = v1518;
						local l_v2789_0 = v2789;
						local l_v1604_1 = v1604;
						local l_v2789_1 = v2789;
						local v2796;
						if v1391[v2790] then
							v2796 = v1390(v2790, v1391[v2790]);
						else
							local v2797 = v1357[v2790];
							if not v2797 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2790) .. "]");
								v2797 = v1377(v2790, (v1285(true)));
							end;
							v2796 = v2797;
						end;
						if v1333[v2796] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2796] = true;
						end;
						l_v1518_3(l_v2789_0, l_v1604_1(l_v2789_1, v2796, v1550(nil, v2791)));
					end, 
					MUL = function(v2798) --[[ Line: 7773 ]] --[[ Name: MUL ]]
						-- upvalues: v1518 (copy), v1615 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref)
						local v2799 = bit32.band(bit32.rshift(v2798, 8), 255);
						local v2800 = bit32.band(bit32.rshift(v2798, 16), 255);
						local v2801 = bit32.band(bit32.rshift(v2798, 24), 255);
						local l_v1518_4 = v1518;
						local l_v2799_0 = v2799;
						local l_v1615_0 = v1615;
						local l_v2799_1 = v2799;
						local v2806;
						if v1391[v2800] then
							v2806 = v1390(v2800, v1391[v2800]);
						else
							local v2807 = v1357[v2800];
							if not v2807 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2800) .. "]");
								v2807 = v1377(v2800, (v1285(true)));
							end;
							v2806 = v2807;
						end;
						if v1333[v2806] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2806] = true;
						end;
						local l_v2806_0 = v2806;
						local v2809;
						if v1391[v2801] then
							v2809 = v1390(v2801, v1391[v2801]);
						else
							local v2810 = v1357[v2801];
							if not v2810 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2801) .. "]");
								v2810 = v1377(v2801, (v1285(true)));
							end;
							v2809 = v2810;
						end;
						if v1333[v2809] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2809] = true;
						end;
						l_v1518_4(l_v2799_0, l_v1615_0(l_v2799_1, l_v2806_0, v2809));
					end, 
					MULK = function(v2811) --[[ Line: 7780 ]] --[[ Name: MULK ]]
						-- upvalues: l_constants_1 (copy), v1373 (copy), l_prefix_warning_1 (ref), v1518 (copy), v1615 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1550 (copy)
						local v2812 = bit32.band(bit32.rshift(v2811, 8), 255);
						local v2813 = bit32.band(bit32.rshift(v2811, 16), 255);
						local v2814 = l_constants_1[bit32.band(bit32.rshift(v2811, 24), 255)];
						if v2814.type ~= 2 then
							v1373(l_prefix_warning_1 .. ": Malformed MULK (constant wasn't a number)");
						end;
						local l_v1518_5 = v1518;
						local l_v2812_0 = v2812;
						local l_v1615_1 = v1615;
						local l_v2812_1 = v2812;
						local v2819;
						if v1391[v2813] then
							v2819 = v1390(v2813, v1391[v2813]);
						else
							local v2820 = v1357[v2813];
							if not v2820 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2813) .. "]");
								v2820 = v1377(v2813, (v1285(true)));
							end;
							v2819 = v2820;
						end;
						if v1333[v2819] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2819] = true;
						end;
						l_v1518_5(l_v2812_0, l_v1615_1(l_v2812_1, v2819, v1550(nil, v2814)));
					end, 
					DIV = function(v2821) --[[ Line: 7790 ]] --[[ Name: DIV ]]
						-- upvalues: v1518 (copy), v1626 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref)
						local v2822 = bit32.band(bit32.rshift(v2821, 8), 255);
						local v2823 = bit32.band(bit32.rshift(v2821, 16), 255);
						local v2824 = bit32.band(bit32.rshift(v2821, 24), 255);
						local l_v1518_6 = v1518;
						local l_v2822_0 = v2822;
						local l_v1626_0 = v1626;
						local l_v2822_1 = v2822;
						local v2829;
						if v1391[v2823] then
							v2829 = v1390(v2823, v1391[v2823]);
						else
							local v2830 = v1357[v2823];
							if not v2830 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2823) .. "]");
								v2830 = v1377(v2823, (v1285(true)));
							end;
							v2829 = v2830;
						end;
						if v1333[v2829] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2829] = true;
						end;
						local l_v2829_0 = v2829;
						local v2832;
						if v1391[v2824] then
							v2832 = v1390(v2824, v1391[v2824]);
						else
							local v2833 = v1357[v2824];
							if not v2833 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2824) .. "]");
								v2833 = v1377(v2824, (v1285(true)));
							end;
							v2832 = v2833;
						end;
						if v1333[v2832] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2832] = true;
						end;
						l_v1518_6(l_v2822_0, l_v1626_0(l_v2822_1, l_v2829_0, v2832));
					end, 
					DIVK = function(v2834) --[[ Line: 7797 ]] --[[ Name: DIVK ]]
						-- upvalues: l_constants_1 (copy), v1373 (copy), l_prefix_warning_1 (ref), v1518 (copy), v1626 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1550 (copy)
						local v2835 = bit32.band(bit32.rshift(v2834, 8), 255);
						local v2836 = bit32.band(bit32.rshift(v2834, 16), 255);
						local v2837 = l_constants_1[bit32.band(bit32.rshift(v2834, 24), 255)];
						if v2837.type ~= 2 then
							v1373(l_prefix_warning_1 .. ": Malformed DIVK (constant wasn't a number)");
						end;
						local l_v1518_7 = v1518;
						local l_v2835_0 = v2835;
						local l_v1626_1 = v1626;
						local l_v2835_1 = v2835;
						local v2842;
						if v1391[v2836] then
							v2842 = v1390(v2836, v1391[v2836]);
						else
							local v2843 = v1357[v2836];
							if not v2843 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2836) .. "]");
								v2843 = v1377(v2836, (v1285(true)));
							end;
							v2842 = v2843;
						end;
						if v1333[v2842] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2842] = true;
						end;
						l_v1518_7(l_v2835_0, l_v1626_1(l_v2835_1, v2842, v1550(nil, v2837)));
					end, 
					SUBRK = function(v2844) --[[ Line: 7807 ]] --[[ Name: SUBRK ]]
						-- upvalues: l_constants_1 (copy), v1373 (copy), l_prefix_warning_1 (ref), v1518 (copy), v1604 (copy), v1550 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref)
						local v2845 = bit32.band(bit32.rshift(v2844, 8), 255);
						local v2846 = l_constants_1[bit32.band(bit32.rshift(v2844, 16), 255)];
						local v2847 = bit32.band(bit32.rshift(v2844, 24), 255);
						if v2846.type ~= 2 then
							v1373(l_prefix_warning_1 .. ": Malformed SUBRK (constant wasn't a number)");
						end;
						local l_v1518_8 = v1518;
						local l_v2845_0 = v2845;
						local l_v1604_2 = v1604;
						local l_v2845_1 = v2845;
						local v2852 = v1550(nil, v2846);
						local v2853;
						if v1391[v2847] then
							v2853 = v1390(v2847, v1391[v2847]);
						else
							local v2854 = v1357[v2847];
							if not v2854 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2847) .. "]");
								v2854 = v1377(v2847, (v1285(true)));
							end;
							v2853 = v2854;
						end;
						if v1333[v2853] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2853] = true;
						end;
						l_v1518_8(l_v2845_0, l_v1604_2(l_v2845_1, v2852, v2853));
					end, 
					DIVRK = function(v2855) --[[ Line: 7817 ]] --[[ Name: DIVRK ]]
						-- upvalues: l_constants_1 (copy), v1373 (copy), l_prefix_warning_1 (ref), v1518 (copy), v1626 (copy), v1550 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref)
						local v2856 = bit32.band(bit32.rshift(v2855, 8), 255);
						local v2857 = l_constants_1[bit32.band(bit32.rshift(v2855, 16), 255)];
						local v2858 = bit32.band(bit32.rshift(v2855, 24), 255);
						if v2857.type ~= 2 then
							v1373(l_prefix_warning_1 .. ": Malformed DIVRK (constant wasn't a number)");
						end;
						local l_v1518_9 = v1518;
						local l_v2856_0 = v2856;
						local l_v1626_2 = v1626;
						local l_v2856_1 = v2856;
						local v2863 = v1550(nil, v2857);
						local v2864;
						if v1391[v2858] then
							v2864 = v1390(v2858, v1391[v2858]);
						else
							local v2865 = v1357[v2858];
							if not v2865 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2858) .. "]");
								v2865 = v1377(v2858, (v1285(true)));
							end;
							v2864 = v2865;
						end;
						if v1333[v2864] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2864] = true;
						end;
						l_v1518_9(l_v2856_0, l_v1626_2(l_v2856_1, v2863, v2864));
					end, 
					IDIV = function(v2866) --[[ Line: 7827 ]] --[[ Name: IDIV ]]
						-- upvalues: v1518 (copy), v1637 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref)
						local v2867 = bit32.band(bit32.rshift(v2866, 8), 255);
						local v2868 = bit32.band(bit32.rshift(v2866, 16), 255);
						local v2869 = bit32.band(bit32.rshift(v2866, 24), 255);
						local l_v1518_10 = v1518;
						local l_v2867_0 = v2867;
						local l_v1637_0 = v1637;
						local l_v2867_1 = v2867;
						local v2874;
						if v1391[v2868] then
							v2874 = v1390(v2868, v1391[v2868]);
						else
							local v2875 = v1357[v2868];
							if not v2875 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2868) .. "]");
								v2875 = v1377(v2868, (v1285(true)));
							end;
							v2874 = v2875;
						end;
						if v1333[v2874] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2874] = true;
						end;
						local l_v2874_0 = v2874;
						local v2877;
						if v1391[v2869] then
							v2877 = v1390(v2869, v1391[v2869]);
						else
							local v2878 = v1357[v2869];
							if not v2878 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2869) .. "]");
								v2878 = v1377(v2869, (v1285(true)));
							end;
							v2877 = v2878;
						end;
						if v1333[v2877] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2877] = true;
						end;
						l_v1518_10(l_v2867_0, l_v1637_0(l_v2867_1, l_v2874_0, v2877));
					end, 
					IDIVK = function(v2879) --[[ Line: 7834 ]] --[[ Name: IDIVK ]]
						-- upvalues: l_constants_1 (copy), v1373 (copy), l_prefix_warning_1 (ref), v1518 (copy), v1637 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1550 (copy)
						local v2880 = bit32.band(bit32.rshift(v2879, 8), 255);
						local v2881 = bit32.band(bit32.rshift(v2879, 16), 255);
						local v2882 = l_constants_1[bit32.band(bit32.rshift(v2879, 24), 255)];
						if v2882.type ~= 2 then
							v1373(l_prefix_warning_1 .. ": Malformed DIVK (constant wasn't a number)");
						end;
						local l_v1518_11 = v1518;
						local l_v2880_0 = v2880;
						local l_v1637_1 = v1637;
						local l_v2880_1 = v2880;
						local v2887;
						if v1391[v2881] then
							v2887 = v1390(v2881, v1391[v2881]);
						else
							local v2888 = v1357[v2881];
							if not v2888 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2881) .. "]");
								v2888 = v1377(v2881, (v1285(true)));
							end;
							v2887 = v2888;
						end;
						if v1333[v2887] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2887] = true;
						end;
						l_v1518_11(l_v2880_0, l_v1637_1(l_v2880_1, v2887, v1550(nil, v2882)));
					end, 
					POW = function(v2889) --[[ Line: 7844 ]] --[[ Name: POW ]]
						-- upvalues: v1518 (copy), v1668 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref)
						local v2890 = bit32.band(bit32.rshift(v2889, 8), 255);
						local v2891 = bit32.band(bit32.rshift(v2889, 16), 255);
						local v2892 = bit32.band(bit32.rshift(v2889, 24), 255);
						local l_v1518_12 = v1518;
						local l_v2890_0 = v2890;
						local l_v1668_0 = v1668;
						local l_v2890_1 = v2890;
						local v2897;
						if v1391[v2891] then
							v2897 = v1390(v2891, v1391[v2891]);
						else
							local v2898 = v1357[v2891];
							if not v2898 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2891) .. "]");
								v2898 = v1377(v2891, (v1285(true)));
							end;
							v2897 = v2898;
						end;
						if v1333[v2897] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2897] = true;
						end;
						local l_v2897_0 = v2897;
						local v2900;
						if v1391[v2892] then
							v2900 = v1390(v2892, v1391[v2892]);
						else
							local v2901 = v1357[v2892];
							if not v2901 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2892) .. "]");
								v2901 = v1377(v2892, (v1285(true)));
							end;
							v2900 = v2901;
						end;
						if v1333[v2900] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2900] = true;
						end;
						l_v1518_12(l_v2890_0, l_v1668_0(l_v2890_1, l_v2897_0, v2900));
					end, 
					POWK = function(v2902) --[[ Line: 7851 ]] --[[ Name: POWK ]]
						-- upvalues: l_constants_1 (copy), v1373 (copy), l_prefix_warning_1 (ref), v1518 (copy), v1668 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1550 (copy)
						local v2903 = bit32.band(bit32.rshift(v2902, 8), 255);
						local v2904 = bit32.band(bit32.rshift(v2902, 16), 255);
						local v2905 = l_constants_1[bit32.band(bit32.rshift(v2902, 24), 255)];
						if v2905.type ~= 2 then
							v1373(l_prefix_warning_1 .. ": Malformed POWK (constant wasn't a number)");
						end;
						local l_v1518_13 = v1518;
						local l_v2903_0 = v2903;
						local l_v1668_1 = v1668;
						local l_v2903_1 = v2903;
						local v2910;
						if v1391[v2904] then
							v2910 = v1390(v2904, v1391[v2904]);
						else
							local v2911 = v1357[v2904];
							if not v2911 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2904) .. "]");
								v2911 = v1377(v2904, (v1285(true)));
							end;
							v2910 = v2911;
						end;
						if v1333[v2910] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2910] = true;
						end;
						l_v1518_13(l_v2903_0, l_v1668_1(l_v2903_1, v2910, v1550(nil, v2905)));
					end, 
					MOD = function(v2912) --[[ Line: 7861 ]] --[[ Name: MOD ]]
						-- upvalues: v1518 (copy), v1648 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref)
						local v2913 = bit32.band(bit32.rshift(v2912, 8), 255);
						local v2914 = bit32.band(bit32.rshift(v2912, 16), 255);
						local v2915 = bit32.band(bit32.rshift(v2912, 24), 255);
						local l_v1518_14 = v1518;
						local l_v2913_0 = v2913;
						local l_v1648_0 = v1648;
						local l_v2913_1 = v2913;
						local v2920;
						if v1391[v2914] then
							v2920 = v1390(v2914, v1391[v2914]);
						else
							local v2921 = v1357[v2914];
							if not v2921 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2914) .. "]");
								v2921 = v1377(v2914, (v1285(true)));
							end;
							v2920 = v2921;
						end;
						if v1333[v2920] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2920] = true;
						end;
						local l_v2920_0 = v2920;
						local v2923;
						if v1391[v2915] then
							v2923 = v1390(v2915, v1391[v2915]);
						else
							local v2924 = v1357[v2915];
							if not v2924 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2915) .. "]");
								v2924 = v1377(v2915, (v1285(true)));
							end;
							v2923 = v2924;
						end;
						if v1333[v2923] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2923] = true;
						end;
						l_v1518_14(l_v2913_0, l_v1648_0(l_v2913_1, l_v2920_0, v2923));
					end, 
					MODK = function(v2925) --[[ Line: 7868 ]] --[[ Name: MODK ]]
						-- upvalues: l_constants_1 (copy), v1373 (copy), l_prefix_warning_1 (ref), v1518 (copy), v1648 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1550 (copy)
						local v2926 = bit32.band(bit32.rshift(v2925, 8), 255);
						local v2927 = bit32.band(bit32.rshift(v2925, 16), 255);
						local v2928 = l_constants_1[bit32.band(bit32.rshift(v2925, 24), 255)];
						if v2928.type ~= 2 then
							v1373(l_prefix_warning_1 .. ": Malformed MODK (constant wasn't a number)");
						end;
						local l_v1518_15 = v1518;
						local l_v2926_0 = v2926;
						local l_v1648_1 = v1648;
						local l_v2926_1 = v2926;
						local v2933;
						if v1391[v2927] then
							v2933 = v1390(v2927, v1391[v2927]);
						else
							local v2934 = v1357[v2927];
							if not v2934 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2927) .. "]");
								v2934 = v1377(v2927, (v1285(true)));
							end;
							v2933 = v2934;
						end;
						if v1333[v2933] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2933] = true;
						end;
						l_v1518_15(l_v2926_0, l_v1648_1(l_v2926_1, v2933, v1550(nil, v2928)));
					end, 
					AND = function(v2935) --[[ Line: 7878 ]] --[[ Name: AND ]]
						-- upvalues: v1518 (copy), v1577 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref)
						local v2936 = bit32.band(bit32.rshift(v2935, 8), 255);
						local v2937 = bit32.band(bit32.rshift(v2935, 16), 255);
						local v2938 = bit32.band(bit32.rshift(v2935, 24), 255);
						local l_v1518_16 = v1518;
						local l_v2936_0 = v2936;
						local l_v1577_0 = v1577;
						local l_v2936_1 = v2936;
						local v2943;
						if v1391[v2937] then
							v2943 = v1390(v2937, v1391[v2937]);
						else
							local v2944 = v1357[v2937];
							if not v2944 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2937) .. "]");
								v2944 = v1377(v2937, (v1285(true)));
							end;
							v2943 = v2944;
						end;
						if v1333[v2943] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2943] = true;
						end;
						local l_v2943_0 = v2943;
						local v2946;
						if v1391[v2938] then
							v2946 = v1390(v2938, v1391[v2938]);
						else
							local v2947 = v1357[v2938];
							if not v2947 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2938) .. "]");
								v2947 = v1377(v2938, (v1285(true)));
							end;
							v2946 = v2947;
						end;
						if v1333[v2946] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2946] = true;
						end;
						l_v1518_16(l_v2936_0, l_v1577_0(l_v2936_1, l_v2943_0, v2946));
					end, 
					ANDK = function(v2948) --[[ Line: 7885 ]] --[[ Name: ANDK ]]
						-- upvalues: l_constants_1 (copy), v1518 (copy), v1577 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1550 (copy)
						local v2949 = bit32.band(bit32.rshift(v2948, 8), 255);
						local v2950 = bit32.band(bit32.rshift(v2948, 16), 255);
						local v2951 = l_constants_1[bit32.band(bit32.rshift(v2948, 24), 255)];
						local l_v1518_17 = v1518;
						local l_v2949_0 = v2949;
						local l_v1577_1 = v1577;
						local l_v2949_1 = v2949;
						local v2956;
						if v1391[v2950] then
							v2956 = v1390(v2950, v1391[v2950]);
						else
							local v2957 = v1357[v2950];
							if not v2957 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2950) .. "]");
								v2957 = v1377(v2950, (v1285(true)));
							end;
							v2956 = v2957;
						end;
						if v1333[v2956] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2956] = true;
						end;
						l_v1518_17(l_v2949_0, l_v1577_1(l_v2949_1, v2956, v1550(nil, v2951)));
					end, 
					OR = function(v2958) --[[ Line: 7892 ]] --[[ Name: OR ]]
						-- upvalues: v1518 (copy), v1573 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref)
						local v2959 = bit32.band(bit32.rshift(v2958, 8), 255);
						local v2960 = bit32.band(bit32.rshift(v2958, 16), 255);
						local v2961 = bit32.band(bit32.rshift(v2958, 24), 255);
						local l_v1518_18 = v1518;
						local l_v2959_0 = v2959;
						local l_v1573_0 = v1573;
						local l_v2959_1 = v2959;
						local v2966;
						if v1391[v2960] then
							v2966 = v1390(v2960, v1391[v2960]);
						else
							local v2967 = v1357[v2960];
							if not v2967 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2960) .. "]");
								v2967 = v1377(v2960, (v1285(true)));
							end;
							v2966 = v2967;
						end;
						if v1333[v2966] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2966] = true;
						end;
						local l_v2966_0 = v2966;
						local v2969;
						if v1391[v2961] then
							v2969 = v1390(v2961, v1391[v2961]);
						else
							local v2970 = v1357[v2961];
							if not v2970 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2961) .. "]");
								v2970 = v1377(v2961, (v1285(true)));
							end;
							v2969 = v2970;
						end;
						if v1333[v2969] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2969] = true;
						end;
						l_v1518_18(l_v2959_0, l_v1573_0(l_v2959_1, l_v2966_0, v2969));
					end, 
					ORK = function(v2971) --[[ Line: 7899 ]] --[[ Name: ORK ]]
						-- upvalues: l_constants_1 (copy), v1518 (copy), v1573 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1550 (copy)
						local v2972 = bit32.band(bit32.rshift(v2971, 8), 255);
						local v2973 = bit32.band(bit32.rshift(v2971, 16), 255);
						local v2974 = l_constants_1[bit32.band(bit32.rshift(v2971, 24), 255)];
						local l_v1518_19 = v1518;
						local l_v2972_0 = v2972;
						local l_v1573_1 = v1573;
						local l_v2972_1 = v2972;
						local v2979;
						if v1391[v2973] then
							v2979 = v1390(v2973, v1391[v2973]);
						else
							local v2980 = v1357[v2973];
							if not v2980 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2973) .. "]");
								v2980 = v1377(v2973, (v1285(true)));
							end;
							v2979 = v2980;
						end;
						if v1333[v2979] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2979] = true;
						end;
						l_v1518_19(l_v2972_0, l_v1573_1(l_v2972_1, v2979, v1550(nil, v2974)));
					end, 
					CONCAT = function(v2981) --[[ Line: 7906 ]] --[[ Name: CONCAT ]]
						-- upvalues: v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1518 (copy), v1681 (copy)
						local v2982 = bit32.band(bit32.rshift(v2981, 8), 255);
						local v2983 = bit32.band(bit32.rshift(v2981, 16), 255);
						local v2984 = bit32.band(bit32.rshift(v2981, 24), 255);
						local v2985 = {};
						for v2986 = v2983, v2984 do
							local v2987;
							if v1391[v2986] then
								v2987 = v1390(v2986, v1391[v2986]);
							else
								local v2988 = v1357[v2986];
								if not v2988 then
									v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2986) .. "]");
									v2988 = v1377(v2986, (v1285(true)));
								end;
								v2987 = v2988;
							end;
							if v1333[v2987] then
								v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
							else
								v1333[v2987] = true;
							end;
							table.insert(v2985, v2987);
						end;
						v1518(v2982, v1681(v2982, v2985));
					end, 
					NOT = function(v2989) --[[ Line: 7917 ]] --[[ Name: NOT ]]
						-- upvalues: v1518 (copy), v1651 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref)
						local v2990 = bit32.band(bit32.rshift(v2989, 8), 255);
						local v2991 = bit32.band(bit32.rshift(v2989, 16), 255);
						local l_v1518_20 = v1518;
						local l_v2990_0 = v2990;
						local l_v1651_0 = v1651;
						local l_v2990_1 = v2990;
						local v2996;
						if v1391[v2991] then
							v2996 = v1390(v2991, v1391[v2991]);
						else
							local v2997 = v1357[v2991];
							if not v2997 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v2991) .. "]");
								v2997 = v1377(v2991, (v1285(true)));
							end;
							v2996 = v2997;
						end;
						if v1333[v2996] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v2996] = true;
						end;
						l_v1518_20(l_v2990_0, l_v1651_0(l_v2990_1, v2996));
					end, 
					MINUS = function(v2998) --[[ Line: 7923 ]] --[[ Name: MINUS ]]
						-- upvalues: v1518 (copy), v1654 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref)
						local v2999 = bit32.band(bit32.rshift(v2998, 8), 255);
						local v3000 = bit32.band(bit32.rshift(v2998, 16), 255);
						local l_v1518_21 = v1518;
						local l_v2999_0 = v2999;
						local l_v1654_0 = v1654;
						local l_v2999_1 = v2999;
						local v3005;
						if v1391[v3000] then
							v3005 = v1390(v3000, v1391[v3000]);
						else
							local v3006 = v1357[v3000];
							if not v3006 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v3000) .. "]");
								v3006 = v1377(v3000, (v1285(true)));
							end;
							v3005 = v3006;
						end;
						if v1333[v3005] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v3005] = true;
						end;
						l_v1518_21(l_v2999_0, l_v1654_0(l_v2999_1, v3005));
					end, 
					LENGTH = function(v3007) --[[ Line: 7929 ]] --[[ Name: LENGTH ]]
						-- upvalues: v1518 (copy), v1657 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref)
						local v3008 = bit32.band(bit32.rshift(v3007, 8), 255);
						local v3009 = bit32.band(bit32.rshift(v3007, 16), 255);
						local l_v1518_22 = v1518;
						local l_v3008_0 = v3008;
						local l_v1657_0 = v1657;
						local l_v3008_1 = v3008;
						local v3014;
						if v1391[v3009] then
							v3014 = v1390(v3009, v1391[v3009]);
						else
							local v3015 = v1357[v3009];
							if not v3015 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v3009) .. "]");
								v3015 = v1377(v3009, (v1285(true)));
							end;
							v3014 = v3015;
						end;
						if v1333[v3014] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v3014] = true;
						end;
						l_v1518_22(l_v3008_0, l_v1657_0(l_v3008_1, v3014));
					end, 
					NATIVECALL = function(_) --[[ Line: 7935 ]] --[[ Name: NATIVECALL ]]
						-- upvalues: v1205 (ref), v1365 (ref), v1207 (ref), v1367 (copy), v1522 (copy)
						local v3017 = v1205[#v1205];
						if v3017 and v3017.t == "comment" and string.sub(v3017.text, 1, 12) == "<NATIVECALL>" then
							v3017.stack = v3017.stack + 1;
							v3017.text = "<NATIVECALL>" .. " (x" .. v3017.stack .. ")";
						else
							v1365 = v1207("<NATIVECALL>");
							v1367();
						end;
						v1522();
					end, 
					BREAK = function(_) --[[ Line: 7940 ]] --[[ Name: BREAK ]]
						-- upvalues: v1205 (ref), v1365 (ref), v1207 (ref), v1367 (copy), v1522 (copy)
						local v3019 = v1205[#v1205];
						if v3019 and v3019.t == "comment" and string.sub(v3019.text, 1, 12) == "<DEBUGBREAK>" then
							v3019.stack = v3019.stack + 1;
							v3019.text = "<DEBUGBREAK>" .. " (x" .. v3019.stack .. ")";
						else
							v1365 = v1207("<DEBUGBREAK>");
							v1367();
						end;
						v1522();
					end, 
					NOP = function(_) --[[ Line: 7945 ]] --[[ Name: NOP ]]
						-- upvalues: v1205 (ref), v1365 (ref), v1207 (ref), v1367 (copy), v1522 (copy)
						local v3021 = v1205[#v1205];
						if v3021 and v3021.t == "comment" and string.sub(v3021.text, 1, 5) == "<NOP>" then
							v3021.stack = v3021.stack + 1;
							v3021.text = "<NOP>" .. " (x" .. v3021.stack .. ")";
						else
							v1365 = v1207("<NOP>");
							v1367();
						end;
						v1522();
					end, 
					COVERAGE = function(_) --[[ Line: 7950 ]] --[[ Name: COVERAGE ]]
						-- upvalues: v1205 (ref), v1365 (ref), v1207 (ref), v1367 (copy), v1522 (copy)
						local v3023 = v1205[#v1205];
						if v3023 and v3023.t == "comment" and string.sub(v3023.text, 1, 10) == "<COVERAGE>" then
							v3023.stack = v3023.stack + 1;
							v3023.text = "<COVERAGE>" .. " (x" .. v3023.stack .. ")";
						else
							v1365 = v1207("<COVERAGE>");
							v1367();
						end;
						v1522();
					end
				};
				local v3024 = {};
				for v3025, v3026 in pairs(v2603) do
					local v3027 = v180[v3025];
					if v3027 then
						v3024[v3027.opcode] = v3026;
					end;
				end;
				local _ = {};
				local function v3036(v3029, v3030) --[[ Line: 7964 ]] --[[ Name: gen_from_insts ]]
					-- upvalues: v1205 (ref), v1361 (ref), v1360 (ref), v1364 (copy), v3024 (copy), v1498 (copy), v1489 (ref), v1373 (copy), l_prefix_warning_1 (ref)
					local l_v1205_2 = v1205;
					v1205 = v3029;
					for _, v3033 in ipairs(v3030) do
						if v1361 < v3033.index then
							v1361 = v3033.index;
							v1360 = v3033.code_index;
							local v3034 = v1364[v1361];
							local v3035 = v3024[v3034.opcode];
							if v3035 then
								v1498();
								v3035(v3034.inst);
								if not v1489 then
									error(v3034.opname);
								end;
							else
								v1373((("%*: Skipped instruction %*"):format(l_prefix_warning_1, v3034.opname)));
							end;
						end;
					end;
					v1205 = l_v1205_2;
				end;
				local v3037 = nil;
				local function v3040(_, _) --[[ Line: 7987 ]] --[[ Name: CF_JUMP ]]
					-- upvalues: v1522 (copy)
					v1522();
				end;
				local function v3049(v3041, _) --[[ Line: 7990 ]] --[[ Name: CF_JUMPIF ]]
					-- upvalues: v1282 (ref), v1360 (ref), v1189 (ref), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1522 (copy)
					local v3043 = bit32.band(bit32.rshift(v3041, 8), 255);
					local v3044 = v1282[v1360];
					local l_v1189_0 = v1189;
					local l_v3044_0 = v3044;
					local v3047;
					if v1391[v3043] then
						v3047 = v1390(v3043, v1391[v3043]);
					else
						local v3048 = v1357[v3043];
						if not v3048 then
							v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v3043) .. "]");
							v3048 = v1377(v3043, (v1285(true)));
						end;
						v3047 = v3048;
					end;
					if v1333[v3047] then
						v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
					else
						v1333[v3047] = true;
					end;
					l_v1189_0(l_v3044_0, v3047);
					v1522();
				end;
				local function v3060(v3050, _) --[[ Line: 7997 ]] --[[ Name: CF_JUMPIFEQ ]]
					-- upvalues: l_code_1 (copy), v1360 (ref), v1282 (ref), v1189 (ref), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1522 (copy)
					local v3052 = bit32.band(bit32.rshift(v3050, 8), 255);
					local v3053 = l_code_1[v1360 + 1];
					if not v3053 then
						error("Expected aux");
					end;
					local l_v3053_0 = v3053;
					v3053 = v1282[v1360];
					local l_v1189_1 = v1189;
					local l_v3053_1 = v3053;
					local v3057;
					if v1391[v3052] then
						v3057 = v1390(v3052, v1391[v3052]);
					else
						local v3058 = v1357[v3052];
						if not v3058 then
							v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v3052) .. "]");
							v3058 = v1377(v3052, (v1285(true)));
						end;
						v3057 = v3058;
					end;
					if v1333[v3057] then
						v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
					else
						v1333[v3057] = true;
					end;
					l_v1189_1(l_v3053_1, v3057);
					l_v1189_1 = v1189;
					l_v3053_1 = v3053;
					if v1391[l_v3053_0] then
						v3057 = v1390(l_v3053_0, v1391[l_v3053_0]);
					else
						local v3059 = v1357[l_v3053_0];
						if not v3059 then
							v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(l_v3053_0) .. "]");
							v3059 = v1377(l_v3053_0, (v1285(true)));
						end;
						v3057 = v3059;
					end;
					if v1333[v3057] then
						v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
					else
						v1333[v3057] = true;
					end;
					l_v1189_1(l_v3053_1, v3057);
					v1522();
				end;
				local function v3069(v3061, _) --[[ Line: 8006 ]] --[[ Name: CF_JUMPXEQKNIL ]]
					-- upvalues: l_code_1 (copy), v1360 (ref), v1282 (ref), v1189 (ref), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1522 (copy)
					local v3063 = bit32.band(bit32.rshift(v3061, 8), 255);
					if not l_code_1[v1360 + 1] then
						error("Expected aux");
					end;
					local v3064 = v1282[v1360];
					local l_v1189_2 = v1189;
					local l_v3064_0 = v3064;
					local v3067;
					if v1391[v3063] then
						v3067 = v1390(v3063, v1391[v3063]);
					else
						local v3068 = v1357[v3063];
						if not v3068 then
							v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v3063) .. "]");
							v3068 = v1377(v3063, (v1285(true)));
						end;
						v3067 = v3068;
					end;
					if v1333[v3067] then
						v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
					else
						v1333[v3067] = true;
					end;
					l_v1189_2(l_v3064_0, v3067);
					v1522();
				end;
				local function v3080(v3070, _) --[[ Line: 8014 ]] --[[ Name: CF_FORNLOOP ]]
					-- upvalues: v1282 (ref), v1360 (ref), v1189 (ref), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1522 (copy)
					local v3072 = bit32.band(bit32.rshift(v3070, 8), 255);
					local v3073 = v1282[v1360];
					local l_v1189_3 = v1189;
					local l_v3073_0 = v3073;
					local v3076;
					if v1391[v3072] then
						v3076 = v1390(v3072, v1391[v3072]);
					else
						local v3077 = v1357[v3072];
						if not v3077 then
							v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v3072) .. "]");
							v3077 = v1377(v3072, (v1285(true)));
						end;
						v3076 = v3077;
					end;
					if v1333[v3076] then
						v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
					else
						v1333[v3076] = true;
					end;
					l_v1189_3(l_v3073_0, v3076);
					l_v1189_3 = v1189;
					l_v3073_0 = v3073;
					local v3078 = v3072 + 1;
					if v1391[v3078] then
						v3076 = v1390(v3078, v1391[v3078]);
					else
						local v3079 = v1357[v3078];
						if not v3079 then
							v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v3078) .. "]");
							v3079 = v1377(v3078, (v1285(true)));
						end;
						v3076 = v3079;
					end;
					if v1333[v3076] then
						v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
					else
						v1333[v3076] = true;
					end;
					l_v1189_3(l_v3073_0, v3076);
					v1522();
				end;
				local function v3093(v3081, v3082) --[[ Line: 8024 ]] --[[ Name: CF_FORGLOOP ]]
					-- upvalues: v1282 (ref), v1360 (ref), v1189 (ref), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1377 (ref), v1285 (ref), v1333 (ref), l_prefix_error_1 (ref), v1522 (copy)
					local v3083 = bit32.band(bit32.rshift(v3081, 8), 255);
					local v3084 = v1282[v1360];
					local l_v1189_4 = v1189;
					local l_v3084_0 = v3084;
					local v3087;
					if v1391[v3083] then
						v3087 = v1390(v3083, v1391[v3083]);
					else
						local v3088 = v1357[v3083];
						if not v3088 then
							v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v3083) .. "]");
							v3088 = v1377(v3083, (v1285(true)));
						end;
						v3087 = v3088;
					end;
					if v1333[v3087] then
						v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
					else
						v1333[v3087] = true;
					end;
					l_v1189_4(l_v3084_0, v3087);
					l_v1189_4 = v1189;
					l_v3084_0 = v3084;
					local v3089 = v3083 + 1;
					if v1391[v3089] then
						v3087 = v1390(v3089, v1391[v3089]);
					else
						local v3090 = v1357[v3089];
						if not v3090 then
							v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v3089) .. "]");
							v3090 = v1377(v3089, (v1285(true)));
						end;
						v3087 = v3090;
					end;
					if v1333[v3087] then
						v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
					else
						v1333[v3087] = true;
					end;
					l_v1189_4(l_v3084_0, v3087);
					l_v1189_4 = v1189;
					l_v3084_0 = v3084;
					v3089 = v3083 + 2;
					if v1391[v3089] then
						v3087 = v1390(v3089, v1391[v3089]);
					else
						local v3091 = v1357[v3089];
						if not v3091 then
							v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(v3089) .. "]");
							v3091 = v1377(v3089, (v1285(true)));
						end;
						v3087 = v3091;
					end;
					if v1333[v3087] then
						v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
					else
						v1333[v3087] = true;
					end;
					l_v1189_4(l_v3084_0, v3087);
					assert(v3082);
					for _ = 1, bit32.band(v3082, 255) do

					end;
					v1522();
				end;
				local v3094 = {
					JUMP = v3040, 
					JUMPX = v3040, 
					JUMPBACK = v3040, 
					JUMPIF = v3049, 
					JUMPIFNOT = v3049, 
					JUMPIFEQ = v3060, 
					JUMPIFLE = v3060, 
					JUMPIFLT = v3060, 
					JUMPIFNOTEQ = v3060, 
					JUMPIFNOTLE = v3060, 
					JUMPIFNOTLT = v3060, 
					JUMPXEQKNIL = v3069, 
					JUMPXEQKB = v3069, 
					JUMPXEQKN = v3069, 
					JUMPXEQKS = v3069, 
					FORNLOOP = v3080, 
					FORGLOOP = v3093
				};
				local function v3095(v3096, v3097, v3098) --[[ Line: 8056 ]] --[[ Name: gen_from_hl_block ]]
					-- upvalues: v1205 (ref), v1352 (ref), v1373 (copy), l_prefix_error_1 (ref), v3036 (copy), v3094 (copy), v1498 (copy), v1391 (copy), v1390 (ref), v1357 (ref), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1189 (ref), v1282 (ref), v3095 (copy), v1366 (copy), v3037 (ref), v1462 (copy), v1463 (copy), v1465 (copy), v1367 (copy), v1829 (copy), v1830 (copy)
					local v3099 = nil;
					if v3098 then
						v3099 = v1205;
						v1205 = v3096;
						v1352 = v1352 + 1;
					end;
					local v3100 = false;
					if v3097.analysis_failed then
						if v3097.type == "single" and #v3097.data == 0 and not v3097.jump then
							v3100 = true;
						else
							v1373((("%*: [%*] %*. Error Block %* start (CF ANALYSIS FAILED)"):format(l_prefix_error_1, v3097.actual_code_index, v3097.actual_index, v3097.hl_index)));
						end;
					end;
					if not v3100 then
						if v3097.type == "single" then
							v3036(v3096, v3097.data);
							local l__visitor_9 = v3097._visitor;
							if l__visitor_9 then
								local l_code_8 = l__visitor_9.code;
								local v3103 = v3094[l_code_8.opname];
								if v3103 then
									v1498();
									v3103(l_code_8.inst, l_code_8.aux);
								end;
							end;
						elseif v3097.type == "oneblockwhile" then
							local v3104 = {};
							local l_data_6 = v3097.data;
							local v3106 = nil;
							local l_for_info_0 = l_data_6.for_info;
							if l_for_info_0 then
								v3106 = {
									t = "for", 
									lines = v1205, 
									reads = {}, 
									writes = {}, 
									code = v3104, 
									for_info = l_for_info_0
								};
								local l_variables_0 = l_for_info_0.variables;
								assert(l_variables_0);
								for v3109, v3110 in ipairs(l_variables_0) do
									v3110.init_expr = v3106;
									v3110.var_num = v3109;
									local l_v3106_0 = v3106;
									table.insert(l_v3106_0.writes, v3110);
									table.insert(v3110.writes, l_v3106_0);
								end;
								local l_type_6 = l_for_info_0.type;
								if l_type_6 == "numeric" then
									local l_args_1 = l_for_info_0.args;
									local l_index_reg_1 = l_args_1.index_reg;
									local v3115;
									if v1391[l_index_reg_1] then
										v3115 = v1390(l_index_reg_1, v1391[l_index_reg_1]);
									else
										local v3116 = v1357[l_index_reg_1];
										if not v3116 then
											v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(l_index_reg_1) .. "]");
											v3116 = v1377(l_index_reg_1, (v1285(true)));
										end;
										v3115 = v3116;
									end;
									l_args_1.index_expr = v3115;
									assert(l_args_1.index_expr);
									v1189(v3106, l_args_1.index_expr);
									l_index_reg_1 = l_args_1.end_reg;
									if v1391[l_index_reg_1] then
										v3115 = v1390(l_index_reg_1, v1391[l_index_reg_1]);
									else
										local v3117 = v1357[l_index_reg_1];
										if not v3117 then
											v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(l_index_reg_1) .. "]");
											v3117 = v1377(l_index_reg_1, (v1285(true)));
										end;
										v3115 = v3117;
									end;
									l_args_1.end_expr = v3115;
									assert(l_args_1.end_expr);
									v1189(v3106, l_args_1.end_expr);
									l_index_reg_1 = l_args_1.step_reg;
									if v1391[l_index_reg_1] then
										v3115 = v1390(l_index_reg_1, v1391[l_index_reg_1]);
									else
										local v3118 = v1357[l_index_reg_1];
										if not v3118 then
											v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(l_index_reg_1) .. "]");
											v3118 = v1377(l_index_reg_1, (v1285(true)));
										end;
										v3115 = v3118;
									end;
									l_args_1.step_expr = v3115;
									assert(l_args_1.step_expr);
									v1189(v3106, l_args_1.step_expr);
									assert(#l_variables_0 == 1);
									v1391[l_args_1.index_reg] = l_variables_0[1];
								elseif l_type_6 == "generic" then
									local l_args_2 = l_for_info_0.args;
									local l_generator_reg_0 = l_args_2.generator_reg;
									local v3121;
									if v1391[l_generator_reg_0] then
										v3121 = v1390(l_generator_reg_0, v1391[l_generator_reg_0]);
									else
										local v3122 = v1357[l_generator_reg_0];
										if not v3122 then
											v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(l_generator_reg_0) .. "]");
											v3122 = v1377(l_generator_reg_0, (v1285(true)));
										end;
										v3121 = v3122;
									end;
									l_args_2.generator_expr = v3121;
									l_generator_reg_0 = l_args_2.state_reg;
									if v1391[l_generator_reg_0] then
										v3121 = v1390(l_generator_reg_0, v1391[l_generator_reg_0]);
									else
										local v3123 = v1357[l_generator_reg_0];
										if not v3123 then
											v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(l_generator_reg_0) .. "]");
											v3123 = v1377(l_generator_reg_0, (v1285(true)));
										end;
										v3121 = v3123;
									end;
									l_args_2.state_expr = v3121;
									l_generator_reg_0 = l_args_2.index_reg;
									if v1391[l_generator_reg_0] then
										v3121 = v1390(l_generator_reg_0, v1391[l_generator_reg_0]);
									else
										local v3124 = v1357[l_generator_reg_0];
										if not v3124 then
											v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(l_generator_reg_0) .. "]");
											v3124 = v1377(l_generator_reg_0, (v1285(true)));
										end;
										v3121 = v3124;
									end;
									l_args_2.index_expr = v3121;
									for v3125, v3126 in ipairs(l_variables_0) do
										assert(v3126.var_num == v3125);
										v1391[l_for_info_0.variables_reg_range.beginning + v3125 - 1] = v3126;
									end;
								else
									error((("Unknown for loop type %*"):format(l_type_6)));
								end;
								local l__visitor_10 = v3097._visitor;
								assert(l__visitor_10);
								local v3128 = v1282[l__visitor_10.code.code_index];
								local l_v3106_1 = v3106;
								table.clear(v3128);
								for v3130, v3131 in pairs(l_v3106_1) do
									v3128[v3130] = v3131;
								end;
								v3095(v3104, v1366[l_data_6.code], true);
							else
								v3106 = {
									t = "while", 
									lines = v1205, 
									reads = {}, 
									writes = {}, 
									code = v3104, 
									expr = nil
								};
								v3095(v3104, v1366[l_data_6.code], true);
							end;
							for _, v3133 in ipairs(v3104) do
								v3133.parent = v3106;
							end;
							table.insert(v1205, v3106);
						elseif v3097.type == "sequential" then
							for _, v3135 in ipairs(v3097.data) do
								v3095(v3096, v1366[v3135]);
							end;
						elseif v3097.type == "ifthen" or v3097.type == "ifthenelse" then
							local l_data_7 = v3097.data;
							local v3137 = true;
							local l_condition_5 = l_data_7.condition;
							while true do
								if l_condition_5.type == "and" then
									local l_lhs_1 = l_condition_5.lhs;
									if type(l_lhs_1) == "table" and l_lhs_1.type ~= "reg" then
										v3137 = nil;
										break;
									else
										local l_rhs_3 = l_condition_5.rhs;
										if type(l_rhs_3) == "table" then
											if l_rhs_3.type == "and" then
												l_condition_5 = l_rhs_3;
											elseif l_rhs_3.type ~= "reg" then
												v3137 = nil;
												break;
											else
												break;
											end;
										else
											break;
										end;
									end;
								else
									v3137 = nil;
									break;
								end;
							end;
							local v3141 = v3037(v3096, l_data_7.condition, v3137, true);
							local v3142 = {};
							v3095(v3142, v1366[l_data_7.pass], true);
							local v3143 = nil;
							if l_data_7.else_ then
								v3143 = {};
								v3095(v3143, v1366[l_data_7.else_], true);
							end;
							local v3144 = {
								t = "if", 
								lines = v1205, 
								reads = {}, 
								writes = {}, 
								pass = v3142, 
								elseifs = {}, 
								else_ = v3143, 
								expr = v3141
							};
							for _, v3146 in ipairs(v3142) do
								v3146.parent = v3144;
							end;
							if v3143 then
								for _, v3148 in ipairs(v3143) do
									v3148.parent = v3144;
								end;
							end;
							table.insert(v1205, v3144);
						else
							error((("Unknown hl_block type \"%*\""):format(v3097.type)));
						end;
						local l_jump_7 = v3097.jump;
						if l_jump_7 then
							local l_type_7 = l_jump_7.type;
							if l_type_7 == "break" then
								v1462();
							elseif l_type_7 == "continue" then
								v1463();
							elseif l_type_7 == "goto" then
								v1465(l_jump_7.destination);
							else
								error((("Unknown jump_type \"%*\""):format(l_type_7)));
							end;
							v1367();
						end;
						if v3097.analysis_failed then
							v1373((("%*: [%*] %*. Error Block %* end (CF ANALYSIS FAILED)"):format(l_prefix_error_1, v1829[v3097.code_index], v1830[v3097.index], v3097.hl_index)));
						end;
					end;
					if v3098 then
						v1205 = v3099;
						v1352 = v1352 - 1;
					end;
				end;
				v3037 = function(v3151, v3152, v3153, v3154) --[[ Line: 8242 ]] --[[ Name: gen_condition ]]
					-- upvalues: v1205 (ref), v3095 (copy), v1366 (copy), v1391 (copy), v1390 (ref), v1357 (ref), v1373 (copy), l_prefix_warning_1 (ref), v1360 (ref), v1377 (ref), v1285 (ref), v1873 (copy), v1340 (ref), v1341 (ref), v1320 (ref), v1330 (ref), v1215 (ref), v1208 (ref), v1143 (ref), v1225 (ref), v1299 (ref), v1327 (ref), v1333 (ref), l_prefix_error_1 (ref), v3037 (ref), v1311 (ref), v1573 (copy), v1582 (copy), v1651 (copy)
					if v3152.type == "reg" then
						assert(v3152.code);
						assert(type(v3152.lhs) == "number");
						local v3155 = #v1205;
						local v3156 = v1205[#v1205];
						v3095(v3151, v1366[v3152.code]);
						local v3157;
						if type(v3152.lhs) == "number" then
							local l_lhs_2 = v3152.lhs;
							if v1391[l_lhs_2] then
								v3157 = v1390(l_lhs_2, v1391[l_lhs_2]);
							else
								local v3159 = v1357[l_lhs_2];
								if not v3159 then
									v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(l_lhs_2) .. "]");
									v3159 = v1377(l_lhs_2, (v1285(true)));
								end;
								v3157 = v3159;
							end;
						else
							v3157 = v3152.lhs;
						end;
						local v3160 = nil;
						if v3152.rhs then
							if type(v3152.rhs) == "number" then
								local l_rhs_4 = v3152.rhs;
								if v1391[l_rhs_4] then
									v3160 = v1390(l_rhs_4, v1391[l_rhs_4]);
								else
									local v3162 = v1357[l_rhs_4];
									if not v3162 then
										v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(l_rhs_4) .. "]");
										v3162 = v1377(l_rhs_4, (v1285(true)));
									end;
									v3160 = v3162;
								end;
							else
								v3160 = v3152.rhs;
							end;
						end;
						if not v3154 and v3155 < #v1205 and v3156 ~= v1205[#v1205] then
							if v3153 then
								v1340[v1873[v1366[v3152.code].index].index] = true;
								v1341 = v1341 + 1;
							else
								local v3163 = {};
								while v3155 < #v1205 do
									local v3164 = table.remove(v1205);
									assert(v3164);
									local l_v3164_0 = v3164;
									l_v3164_0.lines = v3163;
									table.insert(v3163, l_v3164_0);
								end;
								local l_v3157_0 = v3157;
								if v3160 then
									local l_v3157_1 = v3157;
									local l_condition_6 = v3152.condition;
									l_v3157_0 = v1377(nil, (v1320(l_v3157_1, l_condition_6, v3160)));
									v3152.condition = "exist";
									v3152.rhs = nil;
									v3160 = nil;
								end;
								table.insert(v3163, (v1330(v3163, {
									l_v3157_0
								})));
								local l_INLINED_0 = v1215.INLINED;
								local v3170 = "INLINED";
								local v3171 = l_INLINED_0 or 1;
								while v1208[v3170] or v1143[v3170] do
									v3171 = v3171 + 1;
									v3170 = "INLINED" .. "_" .. v3171;
								end;
								v1215.INLINED = v3171;
								local l_v3170_0 = v3170;
								l_INLINED_0 = v1225(l_v3170_0, {
									beginning = -1, 
									ending = -1
								}, {});
								v3157 = v1299(v1390(nil, l_INLINED_0), {}, false);
								v3170 = {
									t = "function", 
									reads = {}, 
									writes = {}, 
									contributors = {}, 
									is_self_referencing = false, 
									name = l_v3170_0, 
									varname = l_INLINED_0, 
									name_known = true, 
									args = {}, 
									is_vararg = false, 
									line_defined = -1, 
									upvalues_count = 0, 
									upvalues = {}, 
									ast = v3163
								};
								table.insert(v3170.writes, l_INLINED_0);
								table.insert(v1205, (v1327(v1205, v3170, l_INLINED_0, "local")));
							end;
						end;
						v3152.lhs = v3157;
						v3152.rhs = v3160;
					end;
					local v3173 = nil;
					local l_lhs_3 = v3152.lhs;
					assert(l_lhs_3);
					if type(l_lhs_3) == "number" then
						local v3175;
						if v1391[l_lhs_3] then
							v3175 = v1390(l_lhs_3, v1391[l_lhs_3]);
						else
							local v3176 = v1357[l_lhs_3];
							if not v3176 then
								v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(l_lhs_3) .. "]");
								v3176 = v1377(l_lhs_3, (v1285(true)));
							end;
							v3175 = v3176;
						end;
						if v1333[v3175] then
							v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
						else
							v1333[v3175] = true;
						end;
						v3173 = v3175;
						error("messgage");
					else
						v3173 = if l_lhs_3.is_full_condition_t then v3037(v3151, l_lhs_3, v3153, v3154) else l_lhs_3;
					end;
					v3152.lhs = v3173;
					local v3177 = nil;
					local l_rhs_5 = v3152.rhs;
					if l_rhs_5 then
						if type(l_rhs_5) == "number" then
							local v3179;
							if v1391[l_rhs_5] then
								v3179 = v1390(l_rhs_5, v1391[l_rhs_5]);
							else
								local v3180 = v1357[l_rhs_5];
								if not v3180 then
									v1373(l_prefix_warning_1 .. ": Failed to evaluate expression, replaced with nil [" .. tostring(v1360) .. "." .. tostring(l_rhs_5) .. "]");
									v3180 = v1377(l_rhs_5, (v1285(true)));
								end;
								v3179 = v3180;
							end;
							if v1333[v3179] then
								v1373(l_prefix_error_1 .. ": Expression was reused, decompilation is incorrect");
							else
								v1333[v3179] = true;
							end;
							v3177 = v3179;
							error("messagee");
						else
							v3177 = if l_rhs_5.is_full_condition_t then v3037(v3151, l_rhs_5, v3153) else l_rhs_5;
						end;
					end;
					if v3152.type ~= "reg" then
						assert(v3177);
						if v3152.type == "and" then
							v3173 = v1377(nil, (v1311(v3173, v3177)));
						elseif v3152.type == "or" then
							v3173 = v1573(nil, v3173, v3177);
						else
							error("Impossible!!!!!!!!!!!!!!!!!!!!!!!!!");
						end;
						v3177 = nil;
					end;
					if v3177 then
						return v1582(nil, v3173, v3152.condition, v3177);
					elseif v3152.condition == "not exist" then
						return v1651(nil, v3173);
					else
						return v3173;
					end;
				end;
				v3095(v1205, v1876());
				for _, v3182 in l_constants_1 do
					if v3182.type == 4 and type(v3182.value) == "number" then
						v3182.value = v1700(nil, v3182.value);
					end;
				end;
				v1350:end_benchmark("AST Generation");
				v300 = l_v300_0;
				v1350:print_all_times();
				return v1205;
			end;
		end;
		v1347 = function(v3184, v3185) --[[ Line: 8377 ]] --[[ Name: astgen_protected ]]
			-- upvalues: v1344 (copy), v3183 (copy), v1340 (ref), v1341 (ref), v551 (ref), v1144 (ref), v1205 (ref), v1334 (ref), v1335 (ref), v1336 (ref), v1337 (ref), v1338 (ref), v1339 (ref), v1347 (ref), v1207 (copy), l_prefix_error_1 (copy)
			local v3186 = v1344();
			local v3188, v3189 = xpcall(v3183, function(v3187) --[[ Line: 8379 ]]
				return tostring(v3187) .. "\nTraceback:\n" .. debug.traceback(nil, 2);
			end, v3184, v3185);
			local l_v1340_0 = v1340;
			if v3188 then
				if v1341 > v3186.marked_condition_stop_points then
					v551 = v3186.global_failed_instructions_count;
					v1144 = v3186.notices;
					v1205 = v3186.lines;
					v1334 = v3186.variable_mapped_long_string_constants;
					v1335 = v3186.variable_mapped_long_string_constants_order;
					v1336 = v3186.long_string_usage_counts;
					v1337 = v3186.long_string_constant_already_used;
					v1338 = v3186.long_string_variable_count;
					v1339 = v3186.lines_had_skipped_return;
					v1340 = v3186.condition_stop_points;
					v1341 = v3186.marked_condition_stop_points;
					v1340 = l_v1340_0;
					return v1347(v3184, v3185);
				else
					return v3189;
				end;
			else
				v551 = v3186.global_failed_instructions_count;
				v1144 = v3186.notices;
				v1205 = v3186.lines;
				v1334 = v3186.variable_mapped_long_string_constants;
				v1335 = v3186.variable_mapped_long_string_constants_order;
				v1336 = v3186.long_string_usage_counts;
				v1337 = v3186.long_string_constant_already_used;
				v1338 = v3186.long_string_variable_count;
				v1339 = v3186.lines_had_skipped_return;
				v1340 = v3186.condition_stop_points;
				v1341 = v3186.marked_condition_stop_points;
				if v3184.debug_name then
					return {
						(v1207(l_prefix_error_1 .. ": Failed to generate AST for function `" .. tostring(v3184.debug_name) .. "`:\n" .. tostring(v3189)))
					};
				else
					return {
						(v1207(l_prefix_error_1 .. ": Failed to generate AST for unnamed function:\n" .. tostring(v3189)))
					};
				end;
			end;
		end;
		v1130:end_benchmark("Global Initialization");
		v1130:start_benchmark("Global Mapping");
		for _, v3192 in pairs(v1140) do
			local v3193 = 0;
			local l_code_9 = v3192.code;
			local v3195 = #l_code_9;
			while v3193 < v3195 do
				local v3196 = v181[bit32.band(l_code_9[v3193], 255)];
				if v3196 then
					if v3196.opname == "SETGLOBAL" then
						local v3197 = l_code_9[v3193 + 1];
						local v3198 = v3192.constants[v3197];
						if v3198 then
							if v3198.type == 3 then
								v1143[v3198.value] = true;
							else
								local v3199 = v24[v3198.type];
								if v3199 then
									local v3200 = ("A SETGLOBAL instruction specified a%* %* constant. Expected a string."):format(v61[string.sub(v3199, 1, 1)] and "n" or "", v3199);
									local v3201 = {
										type = "warning", 
										content = v3200
									};
									table.insert(v1144, v3201);
								else
									local v3202 = {
										type = "warning", 
										content = "A SETGLOBAL instruction specified a constant with an invalid type."
									};
									table.insert(v1144, v3202);
								end;
							end;
						else
							local v3203 = {
								type = "warning", 
								content = "A SETGLOBAL instruction specified an invalid constant."
							};
							table.insert(v1144, v3203);
						end;
					end;
					v3193 = v3193 + v3196.size;
				else
					v3193 = v3193 + 1;
				end;
			end;
		end;
		v1130:end_benchmark("Global Mapping");
		v1130:start_benchmark("Global Decompilation");
		local v3204 = v1347(v1139);
		v1130:end_benchmark("Global Decompilation");
		v1130:start_benchmark("Global High Level Reductions");
		local v3205 = nil;
		local function _() --[[ Line: 8445 ]] --[[ Name: reduction_made ]]
			-- upvalues: v3205 (ref)
			v3205 = v3205 + 1;
		end;
		local v3207 = nil;
		local v3208 = nil;
		local v3209 = nil;
		local function v3211(v3210) --[[ Line: 8450 ]] --[[ Name: reduce_binary_expr ]]
			-- upvalues: v3208 (ref)
			v3208(v3210.lhs);
			if v3210.rhs then
				v3208(v3210.rhs);
			end;
		end;
		local function v3213(v3212) --[[ Line: 8456 ]] --[[ Name: reduce_unary_expr ]]
			-- upvalues: v3208 (ref)
			v3208(v3212.rhs);
		end;
		local function v3215(_) --[[ Line: 8459 ]] --[[ Name: reduce_skipped_expr ]]

		end;
		local v3216 = nil;
		local v3238 = {
			["nil"] = v3215, 
			boolean = v3215, 
			global = v3215, 
			varargs = v3215, 
			addition = v3211, 
			subtraction = v3211, 
			multiplication = v3211, 
			division = v3211, 
			exponentiation = v3211, 
			["floor division"] = v3211, 
			modulus = v3211, 
			["and"] = v3211, 
			["or"] = v3211, 
			condition = v3211, 
			negate = v3213, 
			["not"] = function(v3217) --[[ Line: 8480 ]]
				-- upvalues: v3208 (ref)
				local v3218 = 1;
				local l_v3217_0 = v3217;
				while l_v3217_0.rhs.t == "not" do
					v3218 = v3218 + 1;
					l_v3217_0 = l_v3217_0.rhs;
				end;
				local l_rhs_6 = l_v3217_0.rhs;
				if v3218 > 2 then
					if v3218 % 2 == 0 then
						v3217.rhs.rhs = l_rhs_6;
					else
						v3217.rhs = l_rhs_6;
					end;
				end;
				v3208(v3217.rhs);
			end, 
			length = v3213, 
			concatenation = function(v3221) --[[ Line: 8499 ]]
				-- upvalues: v3208 (ref)
				for _, v3223 in ipairs(v3221.exprs) do
					v3208(v3223);
				end;
			end, 
			name = function(v3224) --[[ Line: 8505 ]]
				-- upvalues: v3208 (ref)
				local l_override_expr_2 = v3224.name.override_expr;
				if l_override_expr_2 then
					v3208(l_override_expr_2);
				end;
			end, 
			constant = function(v3226) --[[ Line: 8511 ]]
				-- upvalues: v3208 (ref)
				local l_const_0 = v3226.const;
				if l_const_0.type == 4 then
					v3208(l_const_0.value);
				end;
			end, 
			["constant index"] = function(v3228) --[[ Line: 8517 ]]
				-- upvalues: v3208 (ref)
				local l_index_4 = v3228.index;
				if l_index_4.type == 4 then
					v3208(l_index_4.value);
				end;
				v3208(v3228.table);
			end, 
			["new table"] = function(v3230) --[[ Line: 8524 ]]
				-- upvalues: v3208 (ref)
				for v3231, v3232 in pairs(v3230.initializers) do
					if type(v3231) == "table" then
						v3208(v3231);
						v3208(v3232);
					else
						v3208(v3232);
					end;
				end;
			end, 
			["function"] = function(v3233) --[[ Line: 8534 ]]
				-- upvalues: v3207 (ref)
				v3207(v3233.ast);
			end, 
			call = function(v3234) --[[ Line: 8537 ]]
				-- upvalues: v3208 (ref)
				v3208(v3234.func);
				for _, v3236 in ipairs(v3234.args) do
					v3208(v3236);
				end;
			end, 
			["get table"] = function(v3237) --[[ Line: 8543 ]]
				-- upvalues: v3208 (ref)
				v3208(v3237.table);
				v3208(v3237.index);
			end
		};
		v3208 = function(v3239) --[[ Line: 8548 ]] --[[ Name: try_reduce_expr ]]
			-- upvalues: v3216 (ref), v3238 (copy)
			if v3216[v3239] then
				return;
			else
				v3216[v3239] = true;
				local v3240 = v3238[v3239.t];
				if v3240 then
					v3240(v3239);
					return;
				else
					print(v3239);
					error((("Unknown expr type %*"):format(v3239.t)));
					return;
				end;
			end;
		end;
		local function v3241(v3242) --[[ Line: 8563 ]] --[[ Name: try_reduce_condition ]]
			-- upvalues: v3241 (copy), v3208 (ref)
			local l_condition_7 = v3242.condition;
			if l_condition_7 ~= "exist" and l_condition_7 ~= "not exist" then
				local l_rhs_7 = v3242.rhs;
				if type(l_rhs_7) == "number" then
					error("This should NOT have happened");
					return;
				elseif l_rhs_7.is_full_condition_t then
					v3241(l_rhs_7);
					return;
				else
					v3208(l_rhs_7);
				end;
			end;
		end;
		local function v3261(v3245, v3246, v3247, v3248, v3249) --[[ Line: 8579 ]] --[[ Name: make_define_function ]]
			-- upvalues: v1327 (copy), v3205 (ref)
			local l_lines_0 = v3245.lines;
			local v3251 = table.find(l_lines_0, v3245);
			assert(v3251);
			assert(v3246.t == "function");
			if v3249 then
				assert(v3245.t == "set table");
			end;
			local v3252 = v1327(l_lines_0, v3246, v3247, v3248, v3249);
			v3252.reads = v3245.reads;
			v3252.writes = v3245.writes;
			for _, v3254 in ipairs(v3245.reads) do
				local l_reads_0 = v3254.reads;
				local v3256 = table.find(l_reads_0, v3245);
				assert(v3256);
				l_reads_0[v3256] = v3252;
			end;
			for _, v3258 in ipairs(v3245.writes) do
				local l_writes_0 = v3258.writes;
				local v3260 = table.find(l_writes_0, v3245);
				assert(v3260);
				l_writes_0[v3260] = v3252;
			end;
			l_lines_0[v3251] = v3252;
			v3205 = v3205 + 1;
		end;
		local function v3263(_) --[[ Line: 8605 ]] --[[ Name: line_case_skipped ]]

		end;
		local function v3279(v3264) --[[ Line: 8607 ]] --[[ Name: define_variable_table_routine ]]
			-- upvalues: v3209 (ref), v1177 (copy), v3205 (ref)
			local l_value_2 = v3264.value;
			while l_value_2.t == "name" do
				local l_override_expr_3 = l_value_2.name.override_expr;
				if l_override_expr_3 then
					l_value_2 = l_override_expr_3;
				else
					break;
				end;
			end;
			local l_l_value_2_0 = l_value_2;
			l_value_2 = v3264.lines;
			assert(l_value_2[v3209] == v3264);
			local v3268 = v3209 + 1;
			while true do
				local v3269 = l_value_2[v3268];
				if v3269 and v3269.t == "set table" then
					local l_table_0 = v3269.table;
					while l_table_0.t == "name" do
						local l_override_expr_4 = l_table_0.name.override_expr;
						if l_override_expr_4 then
							l_table_0 = l_override_expr_4;
						else
							break;
						end;
					end;
					local l_l_table_0_0 = l_table_0;
					if l_l_table_0_0.t == "name" then
						l_table_0 = l_l_table_0_0.name;
						if l_l_value_2_0 == l_table_0.init_expr then
							local l_value_3 = v3269.value;
							while l_value_3.t == "name" do
								local l_override_expr_5 = l_value_3.name.override_expr;
								if l_override_expr_5 then
									l_value_3 = l_override_expr_5;
								else
									break;
								end;
							end;
							local l_l_value_3_0 = l_value_3;
							if l_l_value_3_0.t == "name" then
								if not l_l_value_3_0.name.init_expr or l_l_value_3_0.name == l_table_0 then
									break;
								end;
							elseif l_l_value_3_0.contributors[l_l_value_2_0] then
								break;
							end;
							local l_key_0 = v3269.key;
							while l_key_0.t == "name" do
								local l_override_expr_6 = l_key_0.name.override_expr;
								if l_override_expr_6 then
									l_key_0 = l_override_expr_6;
								else
									break;
								end;
							end;
							l_value_3 = l_key_0;
							if not l_value_3.contributors[l_l_value_2_0] then
								if l_value_3.t == "constant" then
									l_key_0 = l_value_3.const;
									if l_key_0.type == 2 then
										local l_value_4 = l_key_0.value;
										table.insert(l_l_value_2_0.initializers_order, l_value_4);
										l_l_value_2_0.initializers[l_value_4] = l_l_value_3_0;
										table.remove(l_value_2, v3268);
										v1177(v3269, l_table_0);
										v3205 = v3205 + 1;
										continue;
									end;
								end;
								table.insert(l_l_value_2_0.initializers_order, l_value_3);
								l_l_value_2_0.initializers[l_value_3] = l_l_value_3_0;
								table.remove(l_value_2, v3268);
								v1177(v3269, l_table_0);
								v3205 = v3205 + 1;
							else
								break;
							end;
						else
							break;
						end;
					else
						break;
					end;
				else
					break;
				end;
			end;
		end;
		local function _(v3280) --[[ Line: 8652 ]] --[[ Name: is_if_break ]]
			if v3280.t == "if" and not v3280.else_ and #v3280.elseifs == 0 then
				local l_pass_0 = v3280.pass;
				if #l_pass_0 == 1 and l_pass_0[1].t == "break" then
					return true;
				end;
			end;
		end;
		local function v3283(v3284) --[[ Line: 8661 ]] --[[ Name: will_code_exit ]]
			-- upvalues: v1339 (ref), v3283 (copy)
			if v1339[v3284] then
				return true;
			elseif #v3284 == 0 then
				return false;
			else
				local v3285 = v3284[#v3284];
				if v3285.t == "return" or v3285.t == "break" or v3285.t == "continue" then
					return true, v3285;
				elseif v3285.t == "do" then
					return v3283(v3285.content);
				else
					return false;
				end;
			end;
		end;
		local function _(v3286) --[[ Line: 8677 ]] --[[ Name: evaluate_exit_type ]]
			if not v3286 then
				return "empty return";
			else
				local l_t_1 = v3286.t;
				if l_t_1 == "return" then
					if #v3286.values == 0 then
						return "empty return";
					end;
				elseif l_t_1 == "break" then
					return "break";
				elseif l_t_1 == "continue" then
					return "continue";
				end;
				return;
			end;
		end;
		local v3289 = {};
		local v3385 = {
			comment = v3263, 
			["break"] = v3263, 
			continue = v3263, 
			["unknown jump"] = v3263, 
			["define variable"] = function(v3290) --[[ Line: 8701 ]]
				-- upvalues: v3279 (copy), v3208 (ref)
				local l_value_5 = v3290.value;
				while l_value_5.t == "name" do
					local l_override_expr_7 = l_value_5.name.override_expr;
					if l_override_expr_7 then
						l_value_5 = l_override_expr_7;
					else
						break;
					end;
				end;
				local l_l_value_5_0 = l_value_5;
				if l_l_value_5_0.t == "new table" then
					v3279(v3290);
				end;
				v3208(l_l_value_5_0);
			end, 
			["set global"] = function(v3294) --[[ Line: 8708 ]]
				-- upvalues: v3208 (ref)
				v3208(v3294.value);
			end, 
			["define function"] = function(v3295) --[[ Line: 8711 ]]
				-- upvalues: v3208 (ref)
				v3208(v3295.func);
			end, 
			call = function(v3296) --[[ Line: 8714 ]]
				-- upvalues: v3208 (ref)
				v3208(v3296.func);
				for _, v3298 in ipairs(v3296.args) do
					v3208(v3298);
				end;
			end, 
			["set table"] = function(v3299) --[[ Line: 8720 ]]
				-- upvalues: v3208 (ref)
				v3208(v3299.table);
				v3208(v3299.key);
				v3208(v3299.value);
			end, 
			["set variable"] = function(v3300) --[[ Line: 8725 ]]
				-- upvalues: v3208 (ref)
				v3208(v3300.value);
			end, 
			["return"] = function(v3301) --[[ Line: 8728 ]]
				-- upvalues: v1339 (ref), v3205 (ref), v3208 (ref)
				local l_lines_1 = v3301.lines;
				local v3303 = table.find(l_lines_1, v3301);
				assert(v3303);
				if l_lines_1[v3303 + 1] or v1339[l_lines_1] then
					local v3304 = {
						v3301
					};
					l_lines_1[v3303] = {
						t = "do", 
						lines = l_lines_1, 
						reads = {}, 
						writes = {}, 
						content = v3304
					};
					v3301.lines = v3304;
					v3205 = v3205 + 1;
				end;
				for _, v3306 in ipairs(v3301.values) do
					v3208(v3306);
				end;
			end, 
			["if"] = function(v3307) --[[ Line: 8748 ]]
				-- upvalues: v3208 (ref), v3207 (ref), v3205 (ref), v1131 (copy), v1339 (ref), v3283 (copy)
				v3208(v3307.expr);
				v3207(v3307.pass);
				for _, v3309 in ipairs(v3307.elseifs) do
					v3208(v3309.expr);
					v3207(v3309.code);
				end;
				local l_else__3 = v3307.else_;
				if l_else__3 then
					if #l_else__3 == 1 then
						local v3311 = l_else__3[1];
						while v3311.t == "if" do
							table.insert(v3307.elseifs, {
								expr = v3311.expr, 
								code = v3311.pass
							});
							v3205 = v3205 + 1;
							l_else__3 = v3311.else_;
							v3307.else_ = l_else__3;
							if l_else__3 and #l_else__3 == 1 then
								v3311 = l_else__3[1];
							else
								break;
							end;
						end;
						return;
					else
						v3207(l_else__3);
						return;
					end;
				else
					if v1131.assume_if_else then
						local l_lines_2 = v3307.lines;
						local v3313 = table.find(l_lines_2, v3307);
						assert(v3313);
						if v3313 < #l_lines_2 then
							local l_pass_1 = v3307.pass;
							local v3315, v3316;
							if v1339[l_pass_1] then
								v3315 = true;
								v3316 = nil;
							elseif #l_pass_1 == 0 then
								v3315 = false;
								v3316 = nil;
							else
								local v3317 = l_pass_1[#l_pass_1];
								if v3317.t == "return" or v3317.t == "break" or v3317.t == "continue" then
									v3315 = true;
									v3316 = v3317;
								elseif v3317.t == "do" then
									local v3318, v3319 = v3283(v3317.content);
									v3315 = v3318;
									v3316 = v3319;
								else
									v3315 = false;
									v3316 = nil;
								end;
							end;
							if v3315 then
								local v3320;
								if v1339[l_lines_2] then
									l_pass_1 = true;
									v3320 = nil;
								elseif #l_lines_2 == 0 then
									l_pass_1 = false;
									v3320 = nil;
								else
									local v3321 = l_lines_2[#l_lines_2];
									if v3321.t == "return" or v3321.t == "break" or v3321.t == "continue" then
										l_pass_1 = true;
										v3320 = v3321;
									elseif v3321.t == "do" then
										local v3322, v3323 = v3283(v3321.content);
										l_pass_1 = v3322;
										v3320 = v3323;
									else
										l_pass_1 = false;
										v3320 = nil;
									end;
								end;
								if l_pass_1 then
									local v3324;
									if not v3316 then
										v3324 = "empty return";
									else
										local l_t_2 = v3316.t;
										v3324 = if l_t_2 == "return" then #v3316.values == 0 and "empty return" or nil else l_t_2 == "break" and "break" or l_t_2 == "continue" and "continue" or nil;
									end;
									if v3324 then
										if #v3307.pass == 1 then
											return;
										else
											local v3326;
											if not v3320 then
												v3326 = "empty return";
											else
												local l_t_3 = v3320.t;
												v3326 = if l_t_3 == "return" then #v3320.values == 0 and "empty return" or nil else l_t_3 == "break" and "break" or l_t_3 == "continue" and "continue" or nil;
											end;
											if v3326 and v3324 == v3326 then
												local v3328 = {};
												local v3329 = v3313 + 1;
												if v3316 then
													local l_remove_0 = table.remove;
													local l_lines_3 = v3316.lines;
													local v3332 = table.find(v3316.lines, v3316);
													assert(v3332);
													l_remove_0(l_lines_3, v3332);
												end;
												if v3320 then
													local l_remove_1 = table.remove;
													local l_lines_4 = v3320.lines;
													local v3335 = table.find(v3320.lines, v3320);
													assert(v3335);
													l_remove_1(l_lines_4, v3335);
												end;
												while l_lines_2[v3329] do
													local v3336 = l_lines_2[v3329];
													assert(v3336);
													local l_v3336_0 = v3336;
													table.remove(l_lines_2, v3329);
													if v3316 and l_v3336_0 == v3316 then
														assert(not l_lines_2[v3329]);
														break;
													else
														l_v3336_0.lines = v3328;
														table.insert(v3328, l_v3336_0);
													end;
												end;
												v3307.else_ = v3328;
												if v3324 ~= "empty return" then
													if v3316 then
														table.insert(l_lines_2, v3316);
														return;
													elseif v3320 then
														table.insert(l_lines_2, v3320);
													end;
												end;
											end;
										end;
									end;
								end;
							end;
						end;
					end;
					return;
				end;
			end, 
			["while"] = function(v3338) --[[ Line: 8827 ]]
				-- upvalues: v215 (ref), v1303 (copy), v1311 (copy), v3208 (ref), v3207 (ref)
				local v3339 = false;
				local v3340 = false;
				if not v3338.expr then
					local v3341 = nil;
					local v3342 = {};
					local l_code_10 = v3338.code;
					local v3344 = {};
					for v3345 = #l_code_10, 1, -1 do
						local v3346 = l_code_10[v3345];
						local v3347;
						if v3346.t == "if" and not v3346.else_ and #v3346.elseifs == 0 then
							local l_pass_2 = v3346.pass;
							if #l_pass_2 == 1 and l_pass_2[1].t == "break" then
								v3347 = true;
								v3339 = true;
							end;
						end;
						if not v3339 then
							v3347 = nil;
						end;
						v3339 = false;
						if v3347 then
							table.insert(v3344, v3346.expr);
							l_code_10[v3345] = nil;
						else
							break;
						end;
					end;
					for v3349 = #v3344, 1, -1 do
						table.insert(v3342, v3344[v3349]);
					end;
					if #v3342 > 0 then
						v3341 = true;
					else
						for _, v3351 in ipairs(l_code_10) do
							local v3352;
							if v3351.t == "if" and not v3351.else_ and #v3351.elseifs == 0 then
								local l_pass_3 = v3351.pass;
								if #l_pass_3 == 1 and l_pass_3[1].t == "break" then
									v3352 = true;
									v3340 = true;
								end;
							end;
							if not v3340 then
								v3352 = nil;
							end;
							v3340 = false;
							if v3352 then
								local l_expr_0 = v3351.expr;
								local v3355;
								if l_expr_0.t == "condition" then
									l_expr_0.condition = v215[l_expr_0.condition];
									v3355 = l_expr_0;
								else
									v3355 = if l_expr_0.t == "not" then l_expr_0.rhs else v1303(l_expr_0);
								end;
								table.insert(v3342, v3355);
							else
								break;
							end;
						end;
						for _ = 1, #v3342 do
							table.remove(l_code_10, 1);
						end;
					end;
					if #v3342 > 0 then
						if #v3342 == 1 then
							v3338.expr = v3342[1];
						else
							v3344 = v3342[1];
							for v3357 = 2, #v3342 do
								v3344 = v1311(v3344, v3342[v3357]);
							end;
							v3338.expr = v3344;
						end;
						if v3341 then
							v3338.t = "repeat";
						end;
					end;
				end;
				if v3338.expr then
					v3208(v3338.expr);
				end;
				v3207(v3338.code);
			end, 
			["repeat"] = function(v3358) --[[ Line: 8881 ]]
				-- upvalues: v3208 (ref), v3207 (ref)
				if v3358.expr then
					v3208(v3358.expr);
				end;
				v3207(v3358.code);
			end, 
			["do"] = function(v3359) --[[ Line: 8887 ]]
				-- upvalues: v3207 (ref)
				v3207(v3359.content);
			end, 
			["for"] = function(v3360) --[[ Line: 8890 ]]
				-- upvalues: v3289 (copy), v1215 (copy), v1208 (copy), v1143 (copy), v3208 (ref), v3207 (ref)
				local l_for_info_1 = v3360.for_info;
				local l_variables_1 = l_for_info_1.variables;
				assert(l_variables_1);
				local l_type_8 = l_for_info_1.type;
				if l_type_8 == "numeric" then
					assert(#l_variables_1 == 1);
					if not v3289[v3360] then
						v3289[v3360] = true;
						local v3364 = l_variables_1[1];
						local l_i_0 = v1215.i;
						local v3366 = "i";
						local v3367 = l_i_0 or 1;
						while v1208[v3366] or v1143[v3366] do
							v3367 = v3367 + 1;
							v3366 = "i" .. "_" .. v3367;
						end;
						v1215.i = v3367;
						local l_v3366_0 = v3366;
						l_i_0 = v3364.name;
						if not v1208[l_i_0] then
							error((("[write] Variable %* not allocated"):format(l_i_0)));
						end;
						v1208[l_i_0] = nil;
						v3364.name = l_v3366_0;
						v1208[l_v3366_0] = v3364;
						v3364.attributes.renamed = true;
					end;
					local l_args_3 = l_for_info_1.args;
					local l_index_expr_0 = l_args_3.index_expr;
					assert(l_index_expr_0);
					v3208(l_index_expr_0);
					local l_end_expr_0 = l_args_3.end_expr;
					assert(l_end_expr_0);
					v3208(l_end_expr_0);
					local l_step_expr_0 = l_args_3.step_expr;
					assert(l_step_expr_0);
					v3208(l_step_expr_0);
				elseif l_type_8 == "generic" then
					assert(#l_variables_1 > 0);
					if not v3289[v3360] then
						v3289[v3360] = true;
						local v3373 = l_variables_1[1];
						local l_i_1 = v1215.i;
						local v3375 = "i";
						local v3376 = l_i_1 or 1;
						while v1208[v3375] or v1143[v3375] do
							v3376 = v3376 + 1;
							v3375 = "i" .. "_" .. v3376;
						end;
						v1215.i = v3376;
						local l_v3375_0 = v3375;
						l_i_1 = v3373.name;
						if not v1208[l_i_1] then
							error((("[write] Variable %* not allocated"):format(l_i_1)));
						end;
						v1208[l_i_1] = nil;
						v3373.name = l_v3375_0;
						v1208[l_v3375_0] = v3373;
						v3373.attributes.renamed = true;
						if #l_variables_1 == 2 then
							v3373 = l_variables_1[2];
							l_i_1 = v1215.v;
							v3375 = "v";
							v3376 = l_i_1 or 1;
							while v1208[v3375] or v1143[v3375] do
								v3376 = v3376 + 1;
								v3375 = "v" .. "_" .. v3376;
							end;
							v1215.v = v3376;
							l_v3375_0 = v3375;
							l_i_1 = v3373.name;
							if not v1208[l_i_1] then
								error((("[write] Variable %* not allocated"):format(l_i_1)));
							end;
							v1208[l_i_1] = nil;
							v3373.name = l_v3375_0;
							v1208[l_v3375_0] = v3373;
							v3373.attributes.renamed = true;
						else
							for v3378 = 2, #l_variables_1 do
								v3375 = l_variables_1[v3378];
								local v3379 = "v" .. v3378 - 1;
								local v3380 = v1215[v3379];
								local l_v3379_0 = v3379;
								local v3382 = v3380 or 1;
								while v1208[l_v3379_0] or v1143[l_v3379_0] do
									v3382 = v3382 + 1;
									l_v3379_0 = v3379 .. "_" .. v3382;
								end;
								v1215[v3379] = v3382;
								v3376 = l_v3379_0;
								v3379 = v3375.name;
								if not v1208[v3379] then
									error((("[write] Variable %* not allocated"):format(v3379)));
								end;
								v1208[v3379] = nil;
								v3375.name = v3376;
								v1208[v3376] = v3375;
								v3375.attributes.renamed = true;
							end;
						end;
					end;
					local l_args_4 = l_for_info_1.args;
					local l_generator_expr_0 = l_args_4.generator_expr;
					assert(l_generator_expr_0);
					v3208(l_generator_expr_0);
					if l_args_4.state_expr then
						v3208(l_args_4.state_expr);
					end;
					if l_args_4.index_expr then
						v3208(l_args_4.index_expr);
					end;
				else
					error((("Unknown for_type \"%*\""):format(l_type_8)));
				end;
				v3207(v3360.code);
			end
		};
		local v3427 = {
			{}, 
			{
				["define variable"] = function(v3386) --[[ Line: 8940 ]]
					-- upvalues: v3279 (copy), v1208 (copy), v3261 (copy), v3208 (ref)
					local l_value_6 = v3386.value;
					while l_value_6.t == "name" do
						local l_override_expr_8 = l_value_6.name.override_expr;
						if l_override_expr_8 then
							l_value_6 = l_override_expr_8;
						else
							break;
						end;
					end;
					local l_l_value_6_0 = l_value_6;
					if l_l_value_6_0.t == "new table" then
						v3279(v3386);
					elseif l_l_value_6_0.t == "function" then
						assert(#v3386.names == 1);
						l_value_6 = v3386.names[1];
						assert(l_value_6 == l_l_value_6_0.varname);
						local l_name_9 = l_l_value_6_0.name;
						local l_name_10 = l_value_6.name;
						if not v1208[l_name_10] then
							error((("[write] Variable %* not allocated"):format(l_name_10)));
						end;
						v1208[l_name_10] = nil;
						l_value_6.name = l_name_9;
						v1208[l_name_9] = l_value_6;
						l_value_6.attributes.renamed = true;
						v3261(v3386, l_l_value_6_0, l_value_6, "local");
					end;
					v3208(l_l_value_6_0);
				end, 
				["set variable"] = function(v3392) --[[ Line: 8954 ]]
					-- upvalues: v1131 (copy), v1208 (copy), v3261 (copy), v3208 (ref)
					local l_value_7 = v3392.value;
					while l_value_7.t == "name" do
						local l_override_expr_9 = l_value_7.name.override_expr;
						if l_override_expr_9 then
							l_value_7 = l_override_expr_9;
						else
							break;
						end;
					end;
					local l_l_value_7_0 = l_value_7;
					if l_l_value_7_0.t == "function" then
						l_value_7 = v3392.name;
						local l_name_11 = l_l_value_7_0.name;
						if v1131.smart_var_level >= 2 then
							local l_name_12 = l_value_7.name;
							if not v1208[l_name_12] then
								error((("[write] Variable %* not allocated"):format(l_name_12)));
							end;
							v1208[l_name_12] = nil;
							l_value_7.name = l_name_11;
							v1208[l_name_11] = l_value_7;
							l_value_7.attributes.renamed = true;
						end;
						v3261(v3392, l_l_value_7_0, l_value_7, "global");
					end;
					v3208(v3392.value);
				end, 
				["set global"] = function(v3398) --[[ Line: 8966 ]]
					-- upvalues: v3261 (copy), v1208 (copy), v1225 (copy), v3208 (ref)
					local l_value_8 = v3398.value;
					while l_value_8.t == "name" do
						local l_override_expr_10 = l_value_8.name.override_expr;
						if l_override_expr_10 then
							l_value_8 = l_override_expr_10;
						else
							break;
						end;
					end;
					local l_l_value_8_0 = l_value_8;
					if l_l_value_8_0.t == "function" then
						l_value_8 = v3398.name;
						if l_value_8.type == 3 then
							local l_v3261_0 = v3261;
							local l_v3398_0 = v3398;
							local l_l_l_value_8_0_0 = l_l_value_8_0;
							local l_value_9 = l_value_8.value;
							l_v3261_0(l_v3398_0, l_l_l_value_8_0_0, v1208[l_value_9] or v1225(l_value_9, {
								beginning = -1, 
								ending = -1
							}, {}), "global");
						end;
					end;
					v3208(l_l_value_8_0);
				end, 
				["set table"] = function(v3406) --[[ Line: 8976 ]]
					-- upvalues: v538 (ref), v3261 (copy), v1208 (copy), v1225 (copy), v3208 (ref)
					local l_value_10 = v3406.value;
					while l_value_10.t == "name" do
						local l_override_expr_11 = l_value_10.name.override_expr;
						if l_override_expr_11 then
							l_value_10 = l_override_expr_11;
						else
							break;
						end;
					end;
					local l_l_value_10_0 = l_value_10;
					if l_l_value_10_0.t == "function" then
						local l_table_1 = v3406.table;
						while l_table_1.t == "name" do
							local l_override_expr_12 = l_table_1.name.override_expr;
							if l_override_expr_12 then
								l_table_1 = l_override_expr_12;
							else
								break;
							end;
						end;
						l_value_10 = l_table_1;
						l_table_1 = l_value_10.t;
						local v3412 = nil;
						if l_table_1 == "global" then
							local l_name_13 = l_value_10.name;
							if l_name_13.type == 3 then
								v3412 = l_name_13.value;
							end;
						elseif l_table_1 == "name" then
							v3412 = l_value_10.name.name;
						end;
						if v3412 and v538(v3412) then
							local v3414 = nil;
							local l_key_1 = v3406.key;
							if l_key_1.t == "constant" then
								local l_const_1 = l_key_1.const;
								if l_const_1.type == 3 then
									local l_value_11 = l_const_1.value;
									if v538(l_value_11) then
										assert(type(l_value_11) == "string");
										v3414 = l_value_11;
									end;
								end;
							end;
							if v3414 then
								local l_v3261_1 = v3261;
								local l_v3406_0 = v3406;
								local l_l_l_value_10_0_0 = l_l_value_10_0;
								local l_v3414_0 = v3414;
								local v3422 = v1208[l_v3414_0] or v1225(l_v3414_0, {
									beginning = -1, 
									ending = -1
								}, {});
								l_v3414_0 = "table";
								local v3423 = {};
								local l_v3412_0 = v3412;
								local v3425 = v1208[l_v3412_0] or v1225(l_v3412_0, {
									beginning = -1, 
									ending = -1
								}, {});
								local l_v3414_1 = v3414;
								l_v3412_0 = v1208[l_v3414_1] or v1225(l_v3414_1, {
									beginning = -1, 
									ending = -1
								}, {});
								v6(v3423, 1, v3425, l_v3412_0);
								l_v3261_1(l_v3406_0, l_l_l_value_10_0_0, v3422, l_v3414_0, v3423);
							end;
						end;
						v3208(l_value_10);
						v3208(v3406.key);
						v3208(l_l_value_10_0);
						return;
					else
						v3208(v3406.table);
						v3208(v3406.key);
						v3208(l_l_value_10_0);
						return;
					end;
				end
			}
		};
		assert(#v3427 > 0);
		local v3428 = nil;
		v3207 = function(v3429) --[[ Line: 9023 ]] --[[ Name: try_reduce_lines ]]
			-- upvalues: v1205 (ref), v3209 (ref), v3216 (ref), v3428 (ref)
			local l_v1205_3 = v1205;
			local l_v3209_0 = v3209;
			v1205 = v3429;
			v3209 = 1;
			while true do
				if v3209 <= #v3429 then
					local v3432 = v3429[v3209];
					if v3216[v3432] then
						return;
					else
						v3216[v3432] = true;
						local v3433 = v3428[v3432.t];
						if v3433 then
							v3433(v3432);
							v3209 = v3209 + 1;
						else
							print(v3432);
							error((("Unknown line type %*"):format(v3432.t)));
						end;
					end;
				else
					v1205 = l_v1205_3;
					v3209 = l_v3209_0;
					return;
				end;
			end;
		end;
		local function _() --[[ Line: 9049 ]] --[[ Name: reset_reductions ]]
			-- upvalues: v3205 (ref)
			v3205 = 0;
		end;
		local function v3474() --[[ Line: 9052 ]] --[[ Name: var_reductions_single ]]
			-- upvalues: v3205 (ref), v1208 (copy), v1177 (copy), v1182 (copy), v218 (ref)
			v3205 = 0;
			local v3435 = {};
			for _, v3437 in pairs(table.clone(v1208)) do
				if v3437.init_expr then
					assert(v3437.init_expr);
					local l_attributes_0 = v3437.attributes;
					if not l_attributes_0.no_inline and not l_attributes_0.is_upvalue then
						local v3439 = #v3437.reads;
						if v3439 == 1 then
							if #v3437.writes == 1 then
								if l_attributes_0.multireg then
									local v3440 = v3437.reads[1];
									if not v3435[v3440] and v3440.t == "for" then
										v3435[v3440] = true;
										local l_var_list_1 = v3437.var_list;
										assert(#l_var_list_1 > 1);
										if #l_var_list_1 < 4 then
											local v3442 = v3437.writes[1];
											local l_init_expr_0 = v3437.init_expr;
											assert(l_init_expr_0);
											local v3444 = true;
											for _, v3446 in ipairs(l_var_list_1) do
												if v3446 ~= v3437 then
													if #v3446.reads ~= 1 or #v3446.writes ~= 1 or v3446.reads[1] ~= v3440 then
														v3444 = false;
														break;
													else
														assert(v3446.writes[1] == v3442);
														assert(v3446.init_expr == l_init_expr_0);
													end;
												end;
											end;
											if v3444 then
												local l_for_info_2 = v3440.for_info;
												assert(l_for_info_2.type == "generic");
												local l_args_5 = l_for_info_2.args;
												local l_generator_expr_1 = l_args_5.generator_expr;
												local l_state_expr_0 = l_args_5.state_expr;
												local l_index_expr_1 = l_args_5.index_expr;
												for v3452, v3453 in ipairs(l_var_list_1) do
													assert(v3453.var_num == v3452);
												end;
												v3444 = false;
												if #l_var_list_1 == 2 then
													if l_state_expr_0 then
														local l_l_state_expr_0_0 = l_state_expr_0;
														local v3455 = l_var_list_1[1];
														local l_l_l_state_expr_0_0_0 = l_l_state_expr_0_0;
														while l_l_l_state_expr_0_0_0.t == "name" do
															local l_override_expr_13 = l_l_l_state_expr_0_0_0.name.override_expr;
															if l_override_expr_13 then
																l_l_l_state_expr_0_0_0 = l_override_expr_13;
															else
																break;
															end;
														end;
														l_l_state_expr_0_0 = l_l_l_state_expr_0_0_0;
														if l_l_state_expr_0_0.t == "name" and l_l_state_expr_0_0.name == v3455 and l_index_expr_1 then
															l_l_state_expr_0_0 = l_index_expr_1;
															v3455 = l_var_list_1[2];
															l_l_l_state_expr_0_0_0 = l_l_state_expr_0_0;
															while l_l_l_state_expr_0_0_0.t == "name" do
																local l_override_expr_14 = l_l_l_state_expr_0_0_0.name.override_expr;
																if l_override_expr_14 then
																	l_l_l_state_expr_0_0_0 = l_override_expr_14;
																else
																	break;
																end;
															end;
															l_l_state_expr_0_0 = l_l_l_state_expr_0_0_0;
															if l_l_state_expr_0_0.t == "name" and l_l_state_expr_0_0.name == v3455 then
																v3444 = true;
																l_args_5.state_expr = l_init_expr_0;
																l_args_5.index_expr = nil;
															end;
														end;
													end;
												elseif l_generator_expr_1 then
													local l_l_generator_expr_1_0 = l_generator_expr_1;
													local v3460 = l_var_list_1[1];
													local l_l_l_generator_expr_1_0_0 = l_l_generator_expr_1_0;
													while l_l_l_generator_expr_1_0_0.t == "name" do
														local l_override_expr_15 = l_l_l_generator_expr_1_0_0.name.override_expr;
														if l_override_expr_15 then
															l_l_l_generator_expr_1_0_0 = l_override_expr_15;
														else
															break;
														end;
													end;
													l_l_generator_expr_1_0 = l_l_l_generator_expr_1_0_0;
													if l_l_generator_expr_1_0.t == "name" and l_l_generator_expr_1_0.name == v3460 and l_state_expr_0 then
														l_l_generator_expr_1_0 = l_state_expr_0;
														v3460 = l_var_list_1[2];
														l_l_l_generator_expr_1_0_0 = l_l_generator_expr_1_0;
														while l_l_l_generator_expr_1_0_0.t == "name" do
															local l_override_expr_16 = l_l_l_generator_expr_1_0_0.name.override_expr;
															if l_override_expr_16 then
																l_l_l_generator_expr_1_0_0 = l_override_expr_16;
															else
																break;
															end;
														end;
														l_l_generator_expr_1_0 = l_l_l_generator_expr_1_0_0;
														if l_l_generator_expr_1_0.t == "name" and l_l_generator_expr_1_0.name == v3460 and l_index_expr_1 then
															l_l_generator_expr_1_0 = l_index_expr_1;
															v3460 = l_var_list_1[3];
															l_l_l_generator_expr_1_0_0 = l_l_generator_expr_1_0;
															while l_l_l_generator_expr_1_0_0.t == "name" do
																local l_override_expr_17 = l_l_l_generator_expr_1_0_0.name.override_expr;
																if l_override_expr_17 then
																	l_l_l_generator_expr_1_0_0 = l_override_expr_17;
																else
																	break;
																end;
															end;
															l_l_generator_expr_1_0 = l_l_l_generator_expr_1_0_0;
															if l_l_generator_expr_1_0.t == "name" and l_l_generator_expr_1_0.name == v3460 then
																v3444 = true;
																l_args_5.generator_expr = l_init_expr_0;
																l_args_5.state_expr = nil;
																l_args_5.index_expr = nil;
															end;
														end;
													end;
												end;
												if v3444 then
													local l_lines_5 = v3442.lines;
													local v3466 = table.find(l_lines_5, v3442);
													assert(v3466);
													v1177(v3440, v3437);
													v1182(v3442, v3437);
													table.remove(l_lines_5, v3466);
													assert(v3437.init_expr);
													v3205 = v3205 + 1;
												end;
											end;
										end;
									end;
								else
									local v3467 = v3437.reads[1];
									local v3468 = v3437.writes[1];
									if not v218[v3468.t] then
										local l_lines_6 = v3468.lines;
										local v3470 = table.find(l_lines_6, v3468);
										assert(v3470);
										v1177(v3467, v3437);
										v1182(v3468, v3437);
										table.remove(l_lines_6, v3470);
										local l_init_expr_1 = v3437.init_expr;
										local l_name_14 = v3437.name;
										if not v1208[l_name_14] then
											error((("[write] Variable %* not allocated"):format(l_name_14)));
										end;
										v1208[l_name_14] = nil;
										v3437.override_expr = l_init_expr_1;
										v3205 = v3205 + 1;
									end;
								end;
							end;
						elseif v3439 == 0 and not l_attributes_0._ then
							local l_name_15 = v3437.name;
							if not v1208[l_name_15] then
								error((("[write] Variable %* not allocated"):format(l_name_15)));
							end;
							v1208[l_name_15] = nil;
							v3437.name = "_";
							v1208._ = v3437;
							v3437.attributes.renamed = true;
							l_attributes_0._ = true;
							v3205 = v3205 + 1;
						end;
					end;
				end;
			end;
		end;
		local function v3479() --[[ Line: 9160 ]] --[[ Name: line_reductions_single ]]
			-- upvalues: v3205 (ref), v3428 (ref), v3385 (copy), v3427 (copy), v3216 (ref), v3207 (ref), v1205 (ref)
			v3205 = 0;
			v3428 = table.clone(v3385);
			for _, v3476 in ipairs(v3427) do
				for v3477, v3478 in pairs(v3476) do
					v3428[v3477] = v3478;
				end;
				while true do
					v3216 = {};
					v3207(v1205);
					if v3205 ~= 0 then
						v3205 = 0;
					else
						break;
					end;
				end;
				v3205 = 0;
			end;
		end;
		local function _() --[[ Line: 9181 ]] --[[ Name: var_reductions_cycle ]]
			-- upvalues: v3474 (copy), v3205 (ref)
			local v3480 = -1;
			repeat
				v3480 = v3480 + 1;
				v3474();
			until v3205 == 0;
			return v3480;
		end;
		local function _() --[[ Line: 9189 ]] --[[ Name: line_reductions_cycle ]]
			-- upvalues: v3479 (copy), v3205 (ref)
			local v3482 = -1;
			repeat
				v3482 = v3482 + 1;
				v3479();
			until v3205 == 0;
			return v3482;
		end;
		local v3484 = nil;
		repeat
			v3484 = 0;
			local v3485 = -1;
			repeat
				v3485 = v3485 + 1;
				v3479();
			until v3205 == 0;
			v3484 = v3484 + v3485;
			v3485 = -1;
			repeat
				v3485 = v3485 + 1;
				v3474();
			until v3205 == 0;
		until v3484 + v3485 == 0;
		v1130:end_benchmark("Global High Level Reductions");
		v1130:start_benchmark("Smart Naming");
		local v3486 = v1131.smart_var_level >= 3 and "NONE" or nil;
		local v3487 = v1131.smart_var_extensive_prefixes and true or nil;
		local function _(v3488) --[[ Line: 9208 ]] --[[ Name: prefix ]]
			-- upvalues: v3487 (copy)
			if v3487 then
				return v3488;
			else
				return "";
			end;
		end;
		local function _(v3490) --[[ Line: 9215 ]] --[[ Name: is_likely_module ]]
			-- upvalues: v1131 (copy)
			local l_reads_1 = v3490.reads;
			local v3492 = l_reads_1[#l_reads_1];
			if v3492 and v3492.t == "return" then
				local v3493 = {};
				local l_values_0 = v3492.values;
				if v1131.smart_var_level == 3 then
					return true;
				elseif #v3493 == 1 then
					v3493 = l_values_0;
					return;
				else
					return;
				end;
			else
				return;
			end;
		end;
		local function v3501(v3496) --[[ Line: 9235 ]] --[[ Name: get_path ]]
			-- upvalues: v550 (ref), v1131 (copy)
			local v3497 = true;
			if v3496.t ~= "constant index" then
				v3497 = v3496.t == "get table";
			end;
			assert(v3497);
			local v3498 = "";
			v3497 = nil;
			local v3499, v3500;
			while true do
				if v3496.t == "constant index" then
					v3498 = "." .. v3496.index.value .. v3498;
				elseif v3496.t == "get table" then
					v3500 = v3496.index;
					if v3500.t == "constant" then
						v3498 = "." .. v550(v3500.const, v1131.string_quotes_behavior, true) .. v3498;
					else
						v3498 = ".any" .. v3498;
					end;
				else
					assert(nil);
				end;
				v3500 = v3496.table;
				v3499 = v3500.t;
				if v3499 == "constant index" or v3499.t == "get table" then
					v3496 = v3500;
				else
					break;
				end;
			end;
			if v3499 == "global" then
				return v550(v3500.name, v1131.string_quotes_behavior, true) .. v3498, v3497;
			else
				return "any" .. v3498, true;
			end;
		end;
		local _ = function(v3502) --[[ Line: 9269 ]] --[[ Name: get_end_of_path ]]
			local _ = nil;
			local v3504 = string.reverse(v3502);
			local v3505 = string.find(v3504, "%.");
			if v3505 then
				return (string.sub(v3502, #v3502 - v3505 + 2, #v3502));
			else
				return v3502;
			end;
		end;
		local v3571 = {
			GetMouse = function(v3507, _) --[[ Line: 9282 ]] --[[ Name: GetMouse ]]
				-- upvalues: v1131 (copy), v3486 (copy)
				if v1131.smart_var_level >= 3 then
					local l_var_num_1 = v3507.var_num;
					assert(l_var_num_1);
					if l_var_num_1 > 1 then
						return v3486;
					end;
				end;
				return "mouse";
			end, 
			Clone = function(v3510, _) --[[ Line: 9288 ]] --[[ Name: Clone ]]
				-- upvalues: v1131 (copy), v3486 (copy)
				if v1131.smart_var_level >= 3 then
					local l_var_num_2 = v3510.var_num;
					assert(l_var_num_2);
					if l_var_num_2 > 1 then
						return v3486;
					end;
				end;
				return "clone";
			end, 
			GetChildren = function(v3513, _) --[[ Line: 9294 ]] --[[ Name: GetChildren ]]
				-- upvalues: v1131 (copy), v3486 (copy)
				if v1131.smart_var_level >= 3 then
					local l_var_num_3 = v3513.var_num;
					assert(l_var_num_3);
					if l_var_num_3 > 1 then
						return v3486;
					end;
				end;
				return "children";
			end, 
			GetDescendants = function(v3516, _) --[[ Line: 9300 ]] --[[ Name: GetDescendants ]]
				-- upvalues: v1131 (copy), v3486 (copy)
				if v1131.smart_var_level >= 3 then
					local l_var_num_4 = v3516.var_num;
					assert(l_var_num_4);
					if l_var_num_4 > 1 then
						return v3486;
					end;
				end;
				return "descendants";
			end, 
			GetPlayers = function(v3519, _) --[[ Line: 9306 ]] --[[ Name: GetPlayers ]]
				-- upvalues: v1131 (copy), v3486 (copy)
				if v1131.smart_var_level >= 3 then
					local l_var_num_5 = v3519.var_num;
					assert(l_var_num_5);
					if l_var_num_5 > 1 then
						return v3486;
					end;
				end;
				return "players";
			end, 
			format = function(v3522, v3523) --[[ Line: 9312 ]] --[[ Name: format ]]
				-- upvalues: v1131 (copy), v3486 (copy), v3487 (copy)
				if v1131.smart_var_level >= 3 then
					local l_var_num_6 = v3522.var_num;
					assert(l_var_num_6);
					if l_var_num_6 > 1 then
						return v3486;
					end;
				end;
				if v3487 then
					local v3525 = #v3523.args;
					if v3525 == 1 then
						return "formatted_1_value";
					else
						return "formatted_" .. v3525 .. "_values";
					end;
				else
					return "formatted";
				end;
			end, 
			IsA = function(v3526, _) --[[ Line: 9327 ]] --[[ Name: IsA ]]
				-- upvalues: v1131 (copy), v3486 (copy)
				if v1131.smart_var_level >= 3 then
					local l_var_num_7 = v3526.var_num;
					assert(l_var_num_7);
					if l_var_num_7 > 1 then
						return v3486;
					end;
				end;
				return "children";
			end, 
			WaitForChild = function(v3529, v3530) --[[ Line: 9333 ]] --[[ Name: WaitForChild ]]
				-- upvalues: v1131 (copy), v3486 (copy), v3487 (copy), v545 (ref)
				if v1131.smart_var_level >= 3 then
					local l_var_num_8 = v3529.var_num;
					assert(l_var_num_8);
					if l_var_num_8 > 1 then
						return v3486;
					end;
				end;
				local l_args_6 = v3530.args;
				if v1131.smart_var_level >= 3 and #l_args_6 == 0 then
					return (v3487 and "instance_" or "") .. "NEVER";
				else
					local v3533 = nil;
					local v3534 = l_args_6[1];
					if v3534.t == "constant" and v1131.smart_var_level >= 2 then
						local l_const_2 = v3534.const;
						if l_const_2.type == 3 then
							return (v3487 and "instance_" or "") .. v545(l_const_2.value, true, true);
						elseif v1131.smart_var_level >= 3 then
							v3533 = true;
						end;
					end;
					if v3533 then
						return (v3487 and "instance_" or "") .. "NEVER";
					elseif v1131.smart_var_level >= 3 then
						return (v3487 and "instance_" or "") .. "SOME";
					elseif v1131.smart_var_level >= 2 then
						return "instance";
					else
						return;
					end;
				end;
			end, 
			FindFirstChildOfClass = function(v3536, v3537) --[[ Line: 9361 ]] --[[ Name: FindFirstChildOfClass ]]
				-- upvalues: v1131 (copy), v3486 (copy), v3487 (copy), v545 (ref)
				if v1131.smart_var_level >= 3 then
					local l_var_num_9 = v3536.var_num;
					assert(l_var_num_9);
					if l_var_num_9 > 1 then
						return v3486;
					end;
				end;
				local l_args_7 = v3537.args;
				if v1131.smart_var_level >= 3 and #l_args_7 == 0 then
					return (v3487 and "instance_" or "") .. "NEVER";
				else
					local v3540 = nil;
					local v3541 = l_args_7[1];
					if v3541.t == "constant" and v1131.smart_var_level >= 2 then
						local l_const_3 = v3541.const;
						if l_const_3.type == 3 then
							return (v3487 and "instance_with_" or "") .. "class_" .. v545(l_const_3.value, true, true);
						elseif v1131.smart_var_level >= 3 then
							v3540 = true;
						end;
					end;
					if v3540 then
						return (v3487 and "instance_" or "") .. "NEVER";
					elseif v1131.smart_var_level >= 2 then
						return "instance";
					else
						return;
					end;
				end;
			end, 
			FindFirstChildWhichIsA = function(v3543, v3544) --[[ Line: 9387 ]] --[[ Name: FindFirstChildWhichIsA ]]
				-- upvalues: v1131 (copy), v3486 (copy), v3487 (copy), v545 (ref)
				if v1131.smart_var_level >= 3 then
					local l_var_num_10 = v3543.var_num;
					assert(l_var_num_10);
					if l_var_num_10 > 1 then
						return v3486;
					end;
				end;
				local l_args_8 = v3544.args;
				if v1131.smart_var_level >= 3 and #l_args_8 == 0 then
					return (v3487 and "instance_" or "") .. "NEVER";
				else
					local v3547 = nil;
					local v3548 = l_args_8[1];
					if v3548.t == "constant" and v1131.smart_var_level >= 2 then
						local l_const_4 = v3548.const;
						if l_const_4.type == 3 then
							return (v3487 and "instance_which_is_a_" or "") .. "class_" .. v545(l_const_4.value, true, true);
						elseif v1131.smart_var_level >= 3 then
							v3547 = true;
						end;
					end;
					if v3547 then
						return (v3487 and "instance_" or "") .. "NEVER";
					elseif v1131.smart_var_level >= 2 then
						return "instance";
					else
						return;
					end;
				end;
			end, 
			GetAttribute = function(v3550, v3551) --[[ Line: 9413 ]] --[[ Name: GetAttribute ]]
				-- upvalues: v1131 (copy), v3486 (copy), v3487 (copy), v545 (ref)
				if v1131.smart_var_level >= 3 then
					local l_var_num_11 = v3550.var_num;
					assert(l_var_num_11);
					if l_var_num_11 > 1 then
						return v3486;
					end;
				end;
				local l_args_9 = v3551.args;
				if v1131.smart_var_level >= 3 and #l_args_9 == 0 then
					return "NEVER";
				else
					local v3554 = nil;
					local v3555 = l_args_9[1];
					if v3555.t == "constant" and v1131.smart_var_level >= 2 then
						local l_const_5 = v3555.const;
						if l_const_5.type == 3 then
							return (v3487 and "attribute_" or "") .. v545(l_const_5.value, true, true);
						elseif v1131.smart_var_level >= 3 then
							v3554 = true;
						end;
					end;
					if v3554 then
						return "NEVER";
					elseif v1131.smart_var_level >= 2 then
						return "attribute";
					else
						return;
					end;
				end;
			end, 
			GetAttributeChangedSignal = function(v3557, v3558) --[[ Line: 9439 ]] --[[ Name: GetAttributeChangedSignal ]]
				-- upvalues: v1131 (copy), v3486 (copy), v3487 (copy), v545 (ref)
				if v1131.smart_var_level >= 3 then
					local l_var_num_12 = v3557.var_num;
					assert(l_var_num_12);
					if l_var_num_12 > 1 then
						return v3486;
					end;
				end;
				local l_args_10 = v3558.args;
				if v1131.smart_var_level >= 3 and #l_args_10 == 0 then
					return "NEVER";
				else
					local v3561 = nil;
					local v3562 = l_args_10[1];
					if v3562.t == "constant" and v1131.smart_var_level >= 2 then
						local l_const_6 = v3562.const;
						if l_const_6.type == 3 then
							return (v3487 and "attribute_" or "") .. v545(l_const_6.value, true, true) .. "_changed_signal";
						elseif v1131.smart_var_level >= 3 then
							v3561 = true;
						end;
					end;
					if v3561 then
						return "NEVER";
					elseif v1131.smart_var_level >= 2 then
						return "attribute_changed_signal";
					else
						return;
					end;
				end;
			end, 
			GetPropertyChangedSignal = function(v3564, v3565) --[[ Line: 9465 ]] --[[ Name: GetPropertyChangedSignal ]]
				-- upvalues: v1131 (copy), v3486 (copy), v3487 (copy), v545 (ref)
				if v1131.smart_var_level >= 3 then
					local l_var_num_13 = v3564.var_num;
					assert(l_var_num_13);
					if l_var_num_13 > 1 then
						return v3486;
					end;
				end;
				local l_args_11 = v3565.args;
				if v1131.smart_var_level >= 3 and #l_args_11 == 0 then
					return "NEVER";
				else
					local v3568 = nil;
					local v3569 = l_args_11[1];
					if v3569.t == "constant" and v1131.smart_var_level >= 2 then
						local l_const_7 = v3569.const;
						if l_const_7.type == 3 then
							return (v3487 and "property_" or "") .. v545(l_const_7.value, true, true) .. "_changed_signal";
						elseif v1131.smart_var_level >= 3 then
							v3568 = true;
						end;
					end;
					if v3568 then
						return "NEVER";
					elseif v1131.smart_var_level >= 2 then
						return "property_changed_signal";
					else
						return;
					end;
				end;
			end
		};
		local function _(v3572, v3573) --[[ Line: 9492 ]] --[[ Name: map_smart_name_func_call_case ]]
			-- upvalues: v3571 (copy)
			local v3574 = v3571[v3573];
			assert(v3574);
			v3571[v3572] = v3574;
		end;
		local l_Clone_0 = v3571.Clone;
		assert(l_Clone_0);
		v3571.clone = l_Clone_0;
		l_Clone_0 = v3571.GetChildren;
		assert(l_Clone_0);
		v3571.getChildren = l_Clone_0;
		l_Clone_0 = v3571.GetChildren;
		assert(l_Clone_0);
		v3571.children = l_Clone_0;
		l_Clone_0 = v3571.WaitForChild;
		assert(l_Clone_0);
		v3571.FindFirstChild = l_Clone_0;
		l_Clone_0 = v3571.FindFirstChild;
		assert(l_Clone_0);
		v3571.findFirstChild = l_Clone_0;
		l_Clone_0 = v3571.FindFirstChild;
		assert(l_Clone_0);
		v3571.FindFirstAncestor = l_Clone_0;
		l_Clone_0 = v3571.FindFirstChildOfClass;
		assert(l_Clone_0);
		v3571.FindFirstAncestorOfClass = l_Clone_0;
		l_Clone_0 = v3571.FindFirstChildWhichIsA;
		assert(l_Clone_0);
		v3571.FindFirstAncestorWhichIsA = l_Clone_0;
		l_Clone_0 = v3571.FindFirstChild;
		assert(l_Clone_0);
		v3571.FindFirstDescendant = l_Clone_0;
		l_Clone_0 = {
			["Instance.new"] = function(v3577, v3578) --[[ Line: 9507 ]]
				-- upvalues: v3486 (copy), v3487 (copy), v1131 (copy), v550 (ref), v545 (ref)
				local l_var_num_14 = v3577.var_num;
				assert(l_var_num_14);
				if l_var_num_14 > 1 then
					return v3486;
				else
					local l_args_12 = v3578.args;
					if #l_args_12 == 0 then
						return (v3487 and "instance_" or "") .. "NEVER";
					else
						l_var_num_14 = nil;
						if #l_args_12 > 1 and v1131.smart_var_level >= 2 and l_args_12[2].t ~= "nil" then
							l_var_num_14 = true;
						end;
						local v3581 = nil;
						local v3582 = l_args_12[1];
						if v3582.t == "constant" then
							local v3583 = v550(v3582.const, v1131.string_quotes_behavior, true);
							v3581 = v545(v3583, true, true);
						else
							v3581 = "any";
						end;
						if l_var_num_14 then
							return (v3487 and "instance_" or "") .. v3581 .. (v3487 and "_parented" or "");
						else
							return (v3487 and "instance_" or "") .. v3581;
						end;
					end;
				end;
			end, 
			["math.random"] = function(v3584, v3585) --[[ Line: 9536 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_15 = v3584.var_num;
				assert(l_var_num_15);
				if l_var_num_15 > 1 then
					return v3486;
				else
					local v3587 = #v3585.args;
					if v3587 == 0 and v1131.smart_var_level >= 2 then
						return "seed";
					elseif v1131.smart_var_level >= 3 then
						if v3587 == 1 then
							return "randint_from_1";
						else
							return "randint";
						end;
					else
						return "randint";
					end;
				end;
			end, 
			["math.sqrt"] = function(v3588, v3589) --[[ Line: 9555 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_16 = v3588.var_num;
				assert(l_var_num_16);
				if l_var_num_16 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3589.args == 0 then
						return "NEVER";
					else
						return "squareroot";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "root";
				else
					return "num";
				end;
			end, 
			["math.abs"] = function(v3591, v3592) --[[ Line: 9571 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_17 = v3591.var_num;
				assert(l_var_num_17);
				if l_var_num_17 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3592.args == 0 then
						return "NEVER";
					else
						return "absolute";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "absolute";
				else
					return "num";
				end;
			end, 
			["math.floor"] = function(v3594, v3595) --[[ Line: 9587 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_18 = v3594.var_num;
				assert(l_var_num_18);
				if l_var_num_18 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					local v3597 = v3595.args[1];
					if v3597 then
						if v3597.t == "addition" then
							l_var_num_18 = {
								v3597.lhs, 
								v3597.rhs
							};
							local v3598 = 0;
							for _, v3600 in ipairs(l_var_num_18) do
								if v3600.t == "constant" then
									local l_const_8 = v3600.const;
									if l_const_8.type == 2 and l_const_8.value == 0.5 then
										v3598 = v3598 + 1;
									end;
								end;
							end;
							if v3598 == 2 then
								return "one";
							elseif v3598 == 1 then
								return "rounded";
							else
								return "floored";
							end;
						else
							return "floored";
						end;
					else
						return "NEVER";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "floored";
				else
					return "num";
				end;
			end, 
			["math.ceil"] = function(v3602, v3603) --[[ Line: 9623 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_19 = v3602.var_num;
				assert(l_var_num_19);
				if l_var_num_19 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3603.args == 0 then
						return "NEVER";
					else
						return "ceiled";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "ceiled";
				else
					return "num";
				end;
			end, 
			["math.round"] = function(v3605, v3606) --[[ Line: 9639 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_20 = v3605.var_num;
				assert(l_var_num_20);
				if l_var_num_20 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3606.args == 0 then
						return "NEVER";
					else
						return "rounded";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "rounded";
				else
					return "num";
				end;
			end, 
			["math.sin"] = function(v3608, v3609) --[[ Line: 9655 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_21 = v3608.var_num;
				assert(l_var_num_21);
				if l_var_num_21 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3609.args == 0 then
						return "NEVER";
					else
						return "sine";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "sine";
				else
					return "num";
				end;
			end, 
			["math.sinh"] = function(v3611, v3612) --[[ Line: 9671 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_22 = v3611.var_num;
				assert(l_var_num_22);
				if l_var_num_22 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3612.args == 0 then
						return "NEVER";
					else
						return "hypsine";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "hypsine";
				else
					return "num";
				end;
			end, 
			["math.asin"] = function(v3614, v3615) --[[ Line: 9687 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_23 = v3614.var_num;
				assert(l_var_num_23);
				if l_var_num_23 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3615.args == 0 then
						return "NEVER";
					else
						return "arcsine";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "arcsine";
				else
					return "num";
				end;
			end, 
			["math.cos"] = function(v3617, v3618) --[[ Line: 9703 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_24 = v3617.var_num;
				assert(l_var_num_24);
				if l_var_num_24 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3618.args == 0 then
						return "NEVER";
					else
						return "cosine";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "cosine";
				else
					return "num";
				end;
			end, 
			["math.cosh"] = function(v3620, v3621) --[[ Line: 9719 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_25 = v3620.var_num;
				assert(l_var_num_25);
				if l_var_num_25 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3621.args == 0 then
						return "NEVER";
					else
						return "hypcosine";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "hypcosine";
				else
					return "num";
				end;
			end, 
			["math.acos"] = function(v3623, v3624) --[[ Line: 9735 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_26 = v3623.var_num;
				assert(l_var_num_26);
				if l_var_num_26 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3624.args == 0 then
						return "NEVER";
					else
						return "arccosine";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "arccosine";
				else
					return "num";
				end;
			end, 
			["math.tan"] = function(v3626, v3627) --[[ Line: 9751 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_27 = v3626.var_num;
				assert(l_var_num_27);
				if l_var_num_27 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3627.args == 0 then
						return "NEVER";
					else
						return "tangent";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "tangent";
				else
					return "num";
				end;
			end, 
			["math.tanh"] = function(v3629, v3630) --[[ Line: 9767 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_28 = v3629.var_num;
				assert(l_var_num_28);
				if l_var_num_28 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3630.args == 0 then
						return "NEVER";
					else
						return "hyptangent";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "hyptangent";
				else
					return "num";
				end;
			end, 
			["math.atan"] = function(v3632, v3633) --[[ Line: 9783 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_29 = v3632.var_num;
				assert(l_var_num_29);
				if l_var_num_29 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3633.args == 0 then
						return "NEVER";
					else
						return "arctangent";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "arctangent";
				else
					return "num";
				end;
			end, 
			["math.atan2"] = function(v3635, v3636) --[[ Line: 9799 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_30 = v3635.var_num;
				assert(l_var_num_30);
				if l_var_num_30 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3636.args < 2 then
						return "NEVER";
					else
						return "arctangent";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "arctangent";
				else
					return "num";
				end;
			end, 
			["math.rad"] = function(v3638, v3639) --[[ Line: 9815 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_31 = v3638.var_num;
				assert(l_var_num_31);
				if l_var_num_31 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3639.args == 0 then
						return "NEVER";
					else
						return "radians";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "radians";
				else
					return "num";
				end;
			end, 
			["math.deg"] = function(v3641, v3642) --[[ Line: 9831 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_32 = v3641.var_num;
				assert(l_var_num_32);
				if l_var_num_32 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3642.args == 0 then
						return "NEVER";
					else
						return "degrees";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "degrees";
				else
					return "num";
				end;
			end, 
			["math.sign"] = function(v3644, v3645) --[[ Line: 9847 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_33 = v3644.var_num;
				assert(l_var_num_33);
				if l_var_num_33 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3645.args == 0 then
						return "NEVER";
					else
						return "sign";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "sign";
				else
					return "num";
				end;
			end, 
			["math.exp"] = function(v3647, v3648) --[[ Line: 9863 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_34 = v3647.var_num;
				assert(l_var_num_34);
				if l_var_num_34 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3648.args == 0 then
						return "NEVER";
					else
						return "exponentiated";
					end;
				else
					return "num";
				end;
			end, 
			["math.clamp"] = function(v3650, v3651) --[[ Line: 9877 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_35 = v3650.var_num;
				assert(l_var_num_35);
				if l_var_num_35 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3651.args < 3 then
						return "NEVER";
					else
						return "clamped";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "clamped";
				else
					return "num";
				end;
			end, 
			["math.min"] = function(v3653, v3654) --[[ Line: 9893 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_36 = v3653.var_num;
				assert(l_var_num_36);
				if l_var_num_36 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3654.args == 0 then
						return "NEVER";
					else
						return "minimum";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "minimum";
				else
					return "num";
				end;
			end, 
			["math.max"] = function(v3656, v3657) --[[ Line: 9909 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_37 = v3656.var_num;
				assert(l_var_num_37);
				if l_var_num_37 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3657.args == 0 then
						return "NEVER";
					else
						return "maximum";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "maximum";
				else
					return "num";
				end;
			end, 
			["Random.new"] = function(v3659, _) --[[ Line: 9925 ]]
				-- upvalues: v3486 (copy)
				local l_var_num_38 = v3659.var_num;
				assert(l_var_num_38);
				if l_var_num_38 > 1 then
					return v3486;
				else
					return "random_state";
				end;
			end, 
			["bit32.lshift"] = function(v3662, v3663) --[[ Line: 9931 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_39 = v3662.var_num;
				assert(l_var_num_39);
				if l_var_num_39 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3663.args < 2 then
						return "NEVER";
					else
						return "lshifted";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "shifted";
				else
					return "num";
				end;
			end, 
			["bit32.rshift"] = function(v3665, v3666) --[[ Line: 9947 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_40 = v3665.var_num;
				assert(l_var_num_40);
				if l_var_num_40 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3666.args < 2 then
						return "NEVER";
					else
						return "rshifted";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "shifted";
				else
					return "num";
				end;
			end, 
			["bit32.arshift"] = function(v3668, v3669) --[[ Line: 9963 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_41 = v3668.var_num;
				assert(l_var_num_41);
				if l_var_num_41 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3669.args < 2 then
						return "NEVER";
					else
						return "arshifted";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "shifted";
				else
					return "num";
				end;
			end, 
			["bit32.lrotate"] = function(v3671, v3672) --[[ Line: 9979 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_42 = v3671.var_num;
				assert(l_var_num_42);
				if l_var_num_42 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3672.args < 2 then
						return "NEVER";
					else
						return "lrotated";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "rotated";
				else
					return "num";
				end;
			end, 
			["bit32.rrotate"] = function(v3674, v3675) --[[ Line: 9995 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_43 = v3674.var_num;
				assert(l_var_num_43);
				if l_var_num_43 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3675.args < 2 then
						return "NEVER";
					else
						return "rrotated";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "rotated";
				else
					return "num";
				end;
			end, 
			["bit32.band"] = function(v3677, v3678) --[[ Line: 10011 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_44 = v3677.var_num;
				assert(l_var_num_44);
				if l_var_num_44 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3678.args == 0 then
						return "bit32_max";
					else
						return "masked";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "masked";
				else
					return "num";
				end;
			end, 
			["bit32.bor"] = function(v3680, v3681) --[[ Line: 10027 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_45 = v3680.var_num;
				assert(l_var_num_45);
				if l_var_num_45 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3681.args == 0 then
						return "zero";
					else
						return "flags";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "flags";
				else
					return "num";
				end;
			end, 
			["bit32.bxor"] = function(v3683, v3684) --[[ Line: 10043 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_46 = v3683.var_num;
				assert(l_var_num_46);
				if l_var_num_46 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3684.args == 0 then
						return "zero";
					else
						return "xored";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "xored";
				else
					return "num";
				end;
			end, 
			["bit32.bnot"] = function(v3686, v3687) --[[ Line: 10059 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_47 = v3686.var_num;
				assert(l_var_num_47);
				if l_var_num_47 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3687.args == 0 then
						return "NEVER";
					else
						return "inverted";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "inverted";
				else
					return "num";
				end;
			end, 
			["bit32.btest"] = function(v3689, v3690) --[[ Line: 10075 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_48 = v3689.var_num;
				assert(l_var_num_48);
				if l_var_num_48 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3690.args == 0 then
						return "true_";
					else
						return "found_common_bit";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "found_common_bit";
				else
					return "num";
				end;
			end, 
			["bit32.countlz"] = function(v3692, v3693) --[[ Line: 10091 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_49 = v3692.var_num;
				assert(l_var_num_49);
				if l_var_num_49 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3693.args == 0 then
						return "NEVER";
					else
						return "zero_count_left";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "zero_count";
				else
					return "num";
				end;
			end, 
			["bit32.countrz"] = function(v3695, v3696) --[[ Line: 10107 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_50 = v3695.var_num;
				assert(l_var_num_50);
				if l_var_num_50 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3696.args == 0 then
						return "NEVER";
					else
						return "zero_count_right";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "zero_count";
				else
					return "num";
				end;
			end, 
			["bit32.extract"] = function(v3698, v3699) --[[ Line: 10123 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_51 = v3698.var_num;
				assert(l_var_num_51);
				if l_var_num_51 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3699.args < 2 then
						return "NEVER";
					else
						return "extracted";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "extracted";
				else
					return "num";
				end;
			end, 
			["bit32.replace"] = function(v3701, v3702) --[[ Line: 10139 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_52 = v3701.var_num;
				assert(l_var_num_52);
				if l_var_num_52 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3702.args < 3 then
						return "NEVER";
					else
						return "replaced";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "replaced";
				else
					return "num";
				end;
			end, 
			["debug.traceback"] = function(v3704, _) --[[ Line: 10155 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_53 = v3704.var_num;
				assert(l_var_num_53);
				if l_var_num_53 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 2 then
					return "call_stack";
				else
					return "num";
				end;
			end, 
			["debug.info"] = function(v3707, v3708) --[[ Line: 10165 ]]
				-- upvalues: v1131 (copy), v3486 (copy)
				if v1131.smart_var_level >= 2 then
					if #v3708.args < 2 then
						return "NEVER";
					else
						local v3709 = if #v3708.args == 2 then v3708.args[2] else v3708.args[3];
						if v3709.t == "constant" then
							local l_const_9 = v3709.const;
							if l_const_9.type == 3 then
								local l_value_12 = l_const_9.value;
								if l_value_12 == "s" then
									local l_var_num_54 = v3707.var_num;
									assert(l_var_num_54);
									if l_var_num_54 == 1 then
										return "func_source";
									end;
								elseif l_value_12 == "l" then
									local l_var_num_55 = v3707.var_num;
									assert(l_var_num_55);
									if l_var_num_55 == 1 then
										return "line_defined";
									end;
								elseif l_value_12 == "n" then
									local l_var_num_56 = v3707.var_num;
									assert(l_var_num_56);
									if l_var_num_56 == 1 then
										return "func_name";
									end;
								elseif l_value_12 == "a" then
									local l_var_num_57 = v3707.var_num;
									assert(l_var_num_57);
									local l_l_var_num_57_0 = l_var_num_57;
									if l_l_var_num_57_0 == 1 then
										return "parameter_count";
									elseif l_l_var_num_57_0 == 2 then
										return "is_vararg";
									else
										return v3486;
									end;
								elseif l_value_12 == "f" then
									local l_var_num_58 = v3707.var_num;
									assert(l_var_num_58);
									if l_var_num_58 == 1 then
										return "func";
									end;
								end;
							end;
							return "NEVER";
						else
							local l_var_num_59 = v3707.var_num;
							assert(l_var_num_59);
							if l_var_num_59 == 1 then
								return "info";
							end;
						end;
					end;
				else
					local l_var_num_60 = v3707.var_num;
					assert(l_var_num_60);
					if l_var_num_60 == 1 then
						return "num";
					end;
				end;
				return v3486;
			end, 
			["Vector3.new"] = function(v3720, v3721) --[[ Line: 10212 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_61 = v3720.var_num;
				assert(l_var_num_61);
				if l_var_num_61 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3721.args == 0 then
						return "zero_vector3";
					else
						return "vector3";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "vector3";
				else
					return "vector";
				end;
			end, 
			["Vector2.new"] = function(v3723, v3724) --[[ Line: 10228 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_62 = v3723.var_num;
				assert(l_var_num_62);
				if l_var_num_62 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3724.args == 0 then
						return "zero_vector2";
					else
						return "vector2";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "vector2";
				else
					return "vector";
				end;
			end, 
			["UDim.new"] = function(v3726, v3727) --[[ Line: 10244 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_63 = v3726.var_num;
				assert(l_var_num_63);
				if l_var_num_63 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3727.args == 0 then
						return "zero_udim";
					else
						return "udim";
					end;
				else
					return "udim";
				end;
			end, 
			["UDim2.new"] = function(v3729, v3730) --[[ Line: 10258 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_64 = v3729.var_num;
				assert(l_var_num_64);
				if l_var_num_64 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3730.args == 0 then
						return "zero_udim2";
					else
						return "udim2";
					end;
				else
					return "udim2";
				end;
			end, 
			["UDim2.fromOffset"] = function(v3732, v3733) --[[ Line: 10272 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_65 = v3732.var_num;
				assert(l_var_num_65);
				if l_var_num_65 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3733.args == 0 then
						return "zero_udim2";
					else
						return "udim2";
					end;
				else
					return "udim2";
				end;
			end, 
			["UDim2.fromScale"] = function(v3735, v3736) --[[ Line: 10286 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_66 = v3735.var_num;
				assert(l_var_num_66);
				if l_var_num_66 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3736.args == 0 then
						return "zero_udim2";
					else
						return "udim2";
					end;
				else
					return "udim2";
				end;
			end, 
			["CFrame.new"] = function(v3738, v3739) --[[ Line: 10300 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_67 = v3738.var_num;
				assert(l_var_num_67);
				if l_var_num_67 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 and #v3739.args == 0 then
					return "zero_cframe";
				else
					return "cframe";
				end;
			end, 
			["CFrame.Angles"] = function(v3741, v3742) --[[ Line: 10311 ]]
				-- upvalues: v3486 (copy), v1131 (copy), v3487 (copy)
				local l_var_num_68 = v3741.var_num;
				assert(l_var_num_68);
				if l_var_num_68 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 and #v3742.args < 3 then
					return "NEVER" .. (v3487 and "_cframe" or "");
				else
					return "cframe";
				end;
			end, 
			["CFrame.fromEulerAnglesXYZ"] = function(v3744, v3745) --[[ Line: 10322 ]]
				-- upvalues: v3486 (copy), v1131 (copy), v3487 (copy)
				local l_var_num_69 = v3744.var_num;
				assert(l_var_num_69);
				if l_var_num_69 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 and #v3745.args < 3 then
					return "NEVER" .. (v3487 and "_cframe" or "");
				else
					return "cframe";
				end;
			end, 
			["CFrame.fromEulerAnglesYXZ"] = function(v3747, v3748) --[[ Line: 10333 ]]
				-- upvalues: v3486 (copy), v1131 (copy), v3487 (copy)
				local l_var_num_70 = v3747.var_num;
				assert(l_var_num_70);
				if l_var_num_70 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 and #v3748.args < 3 then
					return "NEVER" .. (v3487 and "_cframe" or "");
				else
					return "cframe";
				end;
			end, 
			["CFrame.fromEulerAngles"] = function(v3750, v3751) --[[ Line: 10344 ]]
				-- upvalues: v3486 (copy), v1131 (copy), v3487 (copy)
				local l_var_num_71 = v3750.var_num;
				assert(l_var_num_71);
				if l_var_num_71 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 and #v3751.args < 3 then
					return "NEVER" .. (v3487 and "_cframe" or "");
				else
					return "cframe";
				end;
			end, 
			["CFrame.fromOrientation"] = function(v3753, v3754) --[[ Line: 10355 ]]
				-- upvalues: v3486 (copy), v1131 (copy), v3487 (copy)
				local l_var_num_72 = v3753.var_num;
				assert(l_var_num_72);
				if l_var_num_72 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 and #v3754.args < 3 then
					return "NEVER" .. (v3487 and "_cframe" or "");
				else
					return "cframe";
				end;
			end, 
			["CFrame.lookAt"] = function(v3756, v3757) --[[ Line: 10366 ]]
				-- upvalues: v3486 (copy), v1131 (copy), v3487 (copy)
				local l_var_num_73 = v3756.var_num;
				assert(l_var_num_73);
				if l_var_num_73 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 and #v3757.args < 2 then
					return "NEVER" .. (v3487 and "_cframe_looking_at" or "");
				elseif v1131.smart_var_level >= 2 then
					return "cframe_looking_at";
				else
					return "cframe";
				end;
			end, 
			["CFrame.lookAlong"] = function(v3759, v3760) --[[ Line: 10380 ]]
				-- upvalues: v3486 (copy), v1131 (copy), v3487 (copy)
				local l_var_num_74 = v3759.var_num;
				assert(l_var_num_74);
				if l_var_num_74 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 and #v3760.args < 2 then
					return "NEVER" .. (v3487 and "_cframe_looking_along" or "");
				elseif v1131.smart_var_level >= 2 then
					return "cframe_looking_along";
				else
					return "cframe";
				end;
			end, 
			["CFrame.fromMatrix"] = function(v3762, v3763) --[[ Line: 10394 ]]
				-- upvalues: v3486 (copy), v1131 (copy), v3487 (copy)
				local l_var_num_75 = v3762.var_num;
				assert(l_var_num_75);
				if l_var_num_75 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 and #v3763.args < 3 then
					return "NEVER" .. (v3487 and "_cframe_matrix" or "");
				elseif v1131.smart_var_level >= 2 then
					return "cframe_matrix";
				else
					return "cframe";
				end;
			end, 
			["CFrame.fromAxisAngle"] = function(v3765, v3766) --[[ Line: 10408 ]]
				-- upvalues: v3486 (copy), v1131 (copy), v3487 (copy)
				local l_var_num_76 = v3765.var_num;
				assert(l_var_num_76);
				if l_var_num_76 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 and #v3766.args < 2 then
					return "NEVER" .. (v3487 and "_cframe_axis_angle" or "");
				elseif v1131.smart_var_level >= 2 then
					return "cframe_axis_angle";
				else
					return "cframe";
				end;
			end, 
			["game.GetService"] = function(v3768, v3769) --[[ Line: 10422 ]]
				-- upvalues: v3486 (copy), v1131 (copy), v3487 (copy)
				local l_var_num_77 = v3768.var_num;
				assert(l_var_num_77);
				if l_var_num_77 > 1 then
					return v3486;
				else
					local l_args_13 = v3769.args;
					if v1131.smart_var_level >= 3 and #l_args_13 == 0 then
						return "NEVER" .. (v3487 and "_service" or "");
					else
						l_var_num_77 = if v1131.smart_var_level >= 3 then l_args_13 else {
							l_args_13[1]
						};
						local v3772 = nil;
						for _, v3774 in ipairs(l_var_num_77) do
							if v3774.t == "constant" and v1131.smart_var_level >= 2 then
								local l_const_10 = v3774.const;
								if l_const_10.type == 3 then
									return l_const_10.value .. (v3487 and "_service" or "");
								elseif v1131.smart_var_level >= 3 then
									v3772 = true;
								end;
							end;
						end;
						if v3772 then
							return "NEVER" .. (v3487 and "_service" or "");
						elseif v1131.smart_var_level >= 2 then
							return "service";
						else
							return;
						end;
					end;
				end;
			end, 
			select = function(v3776, v3777) --[[ Line: 10450 ]]
				-- upvalues: v3486 (copy), v1131 (copy)
				local l_var_num_78 = v3776.var_num;
				assert(l_var_num_78);
				if l_var_num_78 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 2 then
					local l_args_14 = v3777.args;
					l_var_num_78 = l_args_14[1];
					if l_var_num_78 then
						if l_var_num_78.t == "constant" then
							local l_const_11 = l_var_num_78.const;
							if l_const_11.type == 3 and l_const_11.value == "#" then
								if #l_args_14 == 2 and l_args_14[2].t == "varargs" then
									return "arg_count";
								else
									return "len";
								end;
							end;
						end;
						if #l_args_14 == 2 and l_args_14[2].t == "varargs" then
							return "selected_arg";
						else
							return "selected";
						end;
					else
						return "NEVER";
					end;
				else
					return;
				end;
			end, 
			require = function(v3781, v3782) --[[ Line: 10483 ]]
				-- upvalues: v3486 (copy), v1131 (copy), v3501 (copy), v3487 (copy), v545 (ref)
				local l_var_num_79 = v3781.var_num;
				assert(l_var_num_79);
				if l_var_num_79 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 2 then
					l_var_num_79 = v3782.args[1];
					if l_var_num_79 then
						local v3784 = nil;
						if l_var_num_79.t == "constant index" or l_var_num_79.t == "get table" then
							local _ = l_var_num_79.const;
							local v3786, _ = v3501(l_var_num_79);
							local _ = nil;
							local v3789 = string.reverse(v3786);
							local v3790 = string.find(v3789, "%.");
							v3784 = if v3790 then string.sub(v3786, #v3786 - v3790 + 2, #v3786) else v3786;
						elseif l_var_num_79.t == "name" or l_var_num_79.t == "global" then
							v3784 = if l_var_num_79.t == "name" then l_var_num_79.name.name else if l_var_num_79.name.type == 3 then l_var_num_79.name.value else "INVALIDGLOBAL";
						end;
						if v3784 then
							return (v3487 and "module_" or "") .. v3784;
						elseif l_var_num_79.t == "constant" then
							local l_const_13 = l_var_num_79.const;
							if l_const_13.type == 2 then
								return "external_module";
							elseif l_const_13.type == 3 then
								return (v3487 and "module_" or "") .. v545(l_const_13.value, true, true);
							end;
						else
							return "module";
						end;
					end;
					return "NEVER";
				else
					return;
				end;
			end, 
			["table.clear"] = function(_, _) --[[ Line: 10527 ]]
				-- upvalues: v3486 (copy)
				return v3486;
			end, 
			["table.foreach"] = function(_, _) --[[ Line: 10530 ]]
				-- upvalues: v3486 (copy)
				return v3486;
			end, 
			["table.foreachi"] = function(_, _) --[[ Line: 10533 ]]
				-- upvalues: v3486 (copy)
				return v3486;
			end, 
			["table.insert"] = function(_, _) --[[ Line: 10536 ]]
				-- upvalues: v3486 (copy)
				return v3486;
			end, 
			["table.sort"] = function(_, _) --[[ Line: 10539 ]]
				-- upvalues: v3486 (copy)
				return v3486;
			end, 
			["table.clone"] = function(v3802, v3803) --[[ Line: 10542 ]]
				-- upvalues: v3486 (copy), v1131 (copy), v3487 (copy)
				local l_var_num_80 = v3802.var_num;
				assert(l_var_num_80);
				if l_var_num_80 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3803.args == 0 then
						return "NEVER";
					else
						return "cloned" .. (v3487 and "_tbl" or "");
					end;
				elseif v1131.smart_var_level >= 2 then
					return "cloned";
				else
					return "tbl";
				end;
			end, 
			["table.concat"] = function(v3805, v3806) --[[ Line: 10558 ]]
				-- upvalues: v3486 (copy), v1131 (copy), v3487 (copy)
				local l_var_num_81 = v3805.var_num;
				assert(l_var_num_81);
				if l_var_num_81 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3806.args < 2 then
						return "NEVER";
					else
						return "concatenated" .. (v3487 and "_tbl" or "");
					end;
				elseif v1131.smart_var_level >= 2 then
					return "concatenated";
				else
					return "str";
				end;
			end, 
			["table.getn"] = function(v3808, v3809) --[[ Line: 10574 ]]
				-- upvalues: v3486 (copy), v1131 (copy), v3487 (copy)
				local l_var_num_82 = v3808.var_num;
				assert(l_var_num_82);
				if l_var_num_82 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3809.args == 0 then
						return "NEVER";
					else
						return (v3487 and "tbl_" or "") .. "len";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "len";
				else
					return "num";
				end;
			end, 
			["table.maxn"] = function(v3811, v3812) --[[ Line: 10590 ]]
				-- upvalues: v3486 (copy), v1131 (copy), v3487 (copy)
				local l_var_num_83 = v3811.var_num;
				assert(l_var_num_83);
				if l_var_num_83 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3812.args == 0 then
						return "NEVER";
					else
						return (v3487 and "tbl_" or "") .. "highest_value";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "highest_value";
				else
					return "num";
				end;
			end, 
			["table.isfrozen"] = function(v3814, v3815) --[[ Line: 10606 ]]
				-- upvalues: v3486 (copy), v1131 (copy), v3487 (copy)
				local l_var_num_84 = v3814.var_num;
				assert(l_var_num_84);
				if l_var_num_84 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3815.args == 0 then
						return "NEVER";
					else
						return (v3487 and "tbl_" or "") .. "is_frozen";
					end;
				elseif v1131.smart_var_level >= 2 then
					return "is_frozen";
				else
					return "bool";
				end;
			end, 
			["table.pack"] = function(v3817, _) --[[ Line: 10622 ]]
				-- upvalues: v3486 (copy), v1131 (copy), v3487 (copy)
				local l_var_num_85 = v3817.var_num;
				assert(l_var_num_85);
				if l_var_num_85 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					return "packed" .. (v3487 and "_tbl" or "");
				elseif v1131.smart_var_level >= 2 then
					return "packed";
				else
					return "tbl";
				end;
			end, 
			["table.unpack"] = function(v3820, _) --[[ Line: 10634 ]]
				-- upvalues: v1131 (copy)
				if v1131.smart_var_level >= 2 then
					local v3822 = "unpacked_value_";
					local l_var_num_86 = v3820.var_num;
					assert(l_var_num_86);
					return v3822 .. l_var_num_86;
				else
					return;
				end;
			end, 
			["table.remove"] = function(v3824, v3825) --[[ Line: 10641 ]]
				-- upvalues: v3486 (copy), v1131 (copy), v3487 (copy)
				local l_var_num_87 = v3824.var_num;
				assert(l_var_num_87);
				if l_var_num_87 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3825.args == 0 then
						return "NEVER";
					elseif #v3825.args == 1 then
						return "popped" .. (v3487 and "_last_value" or "");
					else
						return "popped" .. (v3487 and "_value" or "");
					end;
				elseif v1131.smart_var_level >= 2 then
					return "popped";
				else
					return;
				end;
			end, 
			["table.move"] = function(v3827, v3828) --[[ Line: 10659 ]]
				-- upvalues: v3486 (copy), v1131 (copy), v3487 (copy)
				local l_var_num_88 = v3827.var_num;
				assert(l_var_num_88);
				if l_var_num_88 > 1 then
					return v3486;
				elseif v1131.smart_var_level >= 3 then
					if #v3828.args < 4 then
						return "NEVER";
					else
						return "moved" .. (v3487 and "_tbl" or "");
					end;
				elseif v1131.smart_var_level >= 2 then
					return "moved";
				else
					return "tbl";
				end;
			end, 
			["coroutine.running"] = function(v3830, _) --[[ Line: 10675 ]]
				-- upvalues: v3486 (copy)
				local l_var_num_89 = v3830.var_num;
				assert(l_var_num_89);
				if l_var_num_89 > 1 then
					return v3486;
				else
					return "current_thread";
				end;
			end
		};
		if v1131.smart_var_level >= 3 then
			local _ = function(v3833) --[[ Line: 10684 ]] --[[ Name: map_path ]]
				-- upvalues: l_Clone_0 (copy), v3571 (copy)
				local v3834 = l_Clone_0[v3833];
				assert(v3834);
				local l_v3571_0 = v3571;
				local _ = nil;
				local v3837 = string.reverse(v3833);
				local v3838 = string.find(v3837, "%.");
				l_v3571_0[if v3838 then string.sub(v3833, #v3833 - v3838 + 2, #v3833) else v3833] = v3834;
			end;
			local _ = function(v3840) --[[ Line: 10689 ]] --[[ Name: map_path_no_never ]]
				-- upvalues: l_Clone_0 (copy), v1131 (copy), v3571 (copy)
				local v3841 = l_Clone_0[v3840];
				assert(v3841);
				if v1131.smart_var_level >= 4 then
					local l_v3571_1 = v3571;
					local _ = nil;
					local v3844 = string.reverse(v3840);
					local v3845 = string.find(v3844, "%.");
					l_v3571_1[if v3845 then string.sub(v3840, #v3840 - v3845 + 2, #v3840) else v3840] = v3841;
					return;
				else
					local l_v3571_2 = v3571;
					local _ = nil;
					local v3848 = string.reverse(v3840);
					local v3849 = string.find(v3848, "%.");
					l_v3571_2[if v3849 then string.sub(v3840, #v3840 - v3849 + 2, #v3840) else v3840] = function(v3850, v3851) --[[ Line: 10696 ]]
						-- upvalues: v3841 (copy)
						local v3852 = v3841(v3850, v3851);
						if v3852 then
							if string.match(v3852, "NEVER") then
								return;
							else
								return v3852;
							end;
						else
							return;
						end;
					end;
					return;
				end;
			end;
			local v3854 = l_Clone_0["game.GetService"];
			assert(v3854);
			if v1131.smart_var_level >= 4 then
				local _ = nil;
				local v3856 = string.reverse("game.GetService");
				local v3857 = string.find(v3856, "%.");
				v3571[if v3857 then string.sub("game.GetService", 15 - v3857 + 2, 15) else "game.GetService"] = v3854;
			else
				local _ = nil;
				local v3859 = string.reverse("game.GetService");
				local v3860 = string.find(v3859, "%.");
				local l_v3854_0 = v3854 --[[ copy: 114 -> 161 ]];
				v3571[if v3860 then string.sub("game.GetService", 15 - v3860 + 2, 15) else "game.GetService"] = function(v3862, v3863) --[[ Line: 10696 ]]
					-- upvalues: l_v3854_0 (copy)
					local v3864 = l_v3854_0(v3862, v3863);
					if v3864 then
						if string.match(v3864, "NEVER") then
							return;
						else
							return v3864;
						end;
					else
						return;
					end;
				end;
			end;
		end;
		local v3865 = nil;
		v3865 = {
			call = function(v3866, v3867, _) --[[ Line: 10714 ]]
				-- upvalues: v3501 (copy), v1131 (copy), v3571 (copy), l_Clone_0 (copy), v545 (ref)
				local l_func_0 = v3867.func;
				if l_func_0.t == "constant index" or l_func_0.t == "get table" then
					local v3870, v3871 = v3501(l_func_0);
					if v3871 and v1131.smart_var_level < 2 then
						return;
					else
						if v1131.smart_var_level >= 2 then
							local l_v3571_3 = v3571;
							local _ = nil;
							local v3874 = string.reverse(v3870);
							local v3875 = string.find(v3874, "%.");
							local v3876 = l_v3571_3[if v3875 then string.sub(v3870, #v3870 - v3875 + 2, #v3870) else v3870];
							if v3876 then
								l_v3571_3 = v3876(v3866, v3867);
								if l_v3571_3 then
									return l_v3571_3;
								end;
							end;
						end;
						local v3877 = l_Clone_0[v3870];
						if v3877 then
							return v3877(v3866, v3867);
						elseif v1131.smart_var_level >= 3 then
							return v545(v3870, nil, true) .. "_result" .. (v3866.var_num or "");
						end;
					end;
				elseif l_func_0.t == "name" or l_func_0.t == "global" then
					local v3878 = nil;
					v3878 = if l_func_0.t == "name" then l_func_0.name.name else if l_func_0.name.type == 3 then l_func_0.name.value else "INVALIDGLOBAL";
					local v3879 = l_Clone_0[v3878];
					if v3879 then
						return v3879(v3866, v3867);
					elseif v1131.smart_var_level >= 3 then
						return v545(v3878, nil, true) .. "_result" .. (v3866.var_num or "");
					end;
				end;
			end, 
			["new table"] = function(v3880, v3881, _) --[[ Line: 10760 ]]
				-- upvalues: v1131 (copy), v3487 (copy)
				local v3883 = false;
				local l_initializers_0 = v3881.initializers;
				local v3885 = "";
				if v1131.smart_var_level >= 2 then
					if #l_initializers_0 == 0 then
						if next(l_initializers_0) then
							v3885 = v3487 and "_dict" or "";
						end;
					else
						v3885 = if next(l_initializers_0) then v3487 and "_mixed" or "" else v3487 and "_list" or "";
					end;
				end;
				local v3886 = "";
				if v1131.smart_var_usage_analysis then
					local v3887 = true;
					for _, v3889 in ipairs(v3880.reads) do
						if v3889.t == "set table" then
							v3887 = false;
							break;
						end;
					end;
					if v3887 then
						v3886 = v3487 and "const_" or "";
					end;
				end;
				for _, v3891 in ipairs(l_initializers_0) do
					if v3891.t == "varargs" then
						if v1131.smart_var_level >= 2 then
							v3885 = v3885 .. "_varargs";
						end;
						if #l_initializers_0 == 1 then
							if v1131.smart_var_level >= 3 then
								return "args_list";
							else
								return "args";
							end;
						else
							break;
						end;
					end;
				end;
				local l_reads_2 = v3880.reads;
				local v3893 = l_reads_2[#l_reads_2];
				local v3894;
				if v3893 and v3893.t == "return" then
					local v3895 = {};
					local l_values_1 = v3893.values;
					if v1131.smart_var_level == 3 then
						v3894 = true;
						v3883 = true;
					elseif #v3895 == 1 then
						v3895 = l_values_1;
					else
						v3894 = nil;
						v3883 = true;
					end;
				end;
				if not v3883 then
					if not v3883 then
						v3894 = nil;
					end;
				end;
				v3883 = false;
				if v3894 then
					return v3886 .. "module" .. v3885;
				else
					return v3886 .. "tbl" .. v3885;
				end;
			end, 
			["constant index"] = function(_, v3898, _) --[[ Line: 10808 ]]
				-- upvalues: v1131 (copy), v545 (ref), v550 (ref)
				if v1131.smart_var_level >= 2 then
					return (v545(v550(v3898.index, v1131.string_quotes_behavior, true)));
				else
					return;
				end;
			end, 
			["get table"] = function(_, v3901, _) --[[ Line: 10814 ]]
				-- upvalues: v1131 (copy), v550 (ref), v545 (ref)
				if v1131.smart_var_level >= 2 then
					local l_index_5 = v3901.index;
					if l_index_5.t == "constant" then
						local v3904 = v550(l_index_5.const, v1131.string_quotes_behavior, true);
						if l_index_5.const.type ~= 3 then
							v3904 = "_" .. v3904;
						end;
						return (v545(v3904));
					end;
				end;
			end, 
			constant = function(v3905, v3906, _) --[[ Line: 10827 ]]
				-- upvalues: v1131 (copy)
				if not v1131.smart_var_usage_analysis then
					return;
				else
					local v3908 = #v3905.writes <= 1;
					if v3908 then
						for _, v3910 in ipairs(v3905.reads) do
							if v3910.t == "set table" then
								v3908 = false;
								break;
							end;
						end;
					end;
					if v3908 then
						local l_type_9 = v3906.const.type;
						if l_type_9 == 1 then
							return "const_boolean";
						elseif l_type_9 == 6 then
							return "const_function";
						elseif l_type_9 == 4 then
							return "const_import";
						elseif l_type_9 == 0 then
							return "const_nil";
						elseif l_type_9 == 3 then
							return "const_string";
						elseif l_type_9 == 2 then
							return "const_number";
						elseif l_type_9 == 5 then
							return "const_table";
						elseif l_type_9 == 7 then
							return "const_vector";
						else
							return "const_unknown";
						end;
					else
						return;
					end;
				end;
			end, 
			length = function(_, v3913, _) --[[ Line: 10864 ]]
				-- upvalues: v1131 (copy)
				if v1131.smart_var_level >= 2 then
					local l_rhs_8 = v3913.rhs;
					while l_rhs_8.t == "name" do
						local l_override_expr_18 = l_rhs_8.name.override_expr;
						if l_override_expr_18 then
							l_rhs_8 = l_override_expr_18;
						else
							break;
						end;
					end;
					local l_l_rhs_8_0 = l_rhs_8;
					if l_l_rhs_8_0.t == "name" then
						l_rhs_8 = l_l_rhs_8_0.name.name;
						if l_rhs_8 == "args" or l_rhs_8 == "args_list" then
							return "arg_count";
						end;
					elseif l_l_rhs_8_0.t == "new table" then
						l_rhs_8 = l_l_rhs_8_0.initializers;
						if #l_rhs_8 == 1 and l_rhs_8[1].t == "varargs" then
							return "arg_count";
						end;
					end;
					return "len";
				else
					return;
				end;
			end, 
			global = function(_, v3919, _) --[[ Line: 10884 ]]
				-- upvalues: v545 (ref), v550 (ref), v1131 (copy)
				return (v545(v550(v3919.name, v1131.string_quotes_behavior, true)));
			end
		};
		local function _(v3921, v3922) --[[ Line: 10888 ]] --[[ Name: find_smart_name ]]
			-- upvalues: v3865 (ref)
			local v3923 = v3865[v3922.t];
			if v3923 then
				local v3924 = v3923(v3921, v3922, true);
				if v3924 then
					return v3924;
				end;
			end;
		end;
		for _, v3927 in pairs(table.clone(v1208)) do
			local l_attributes_1 = v3927.attributes;
			local l_name_16 = v3927.name;
			local l_l_name_16_0 = l_name_16;
			local l_init_expr_2 = v3927.init_expr;
			if l_init_expr_2 then
				if v1131.smart_var_level > 0 then
					local v3932 = v3865[l_init_expr_2.t];
					l_name_16 = v3932 and v3932(v3927, l_init_expr_2, true) or nil or l_name_16;
				end;
				if l_name_16 ~= l_l_name_16_0 then
					local l_l_name_16_1 = l_name_16;
					local v3934 = v1215[l_l_name_16_1];
					local l_l_l_name_16_1_0 = l_l_name_16_1;
					local v3936 = v3934 or 1;
					while v1208[l_l_l_name_16_1_0] or v1143[l_l_l_name_16_1_0] do
						v3936 = v3936 + 1;
						l_l_l_name_16_1_0 = l_l_name_16_1 .. "_" .. v3936;
					end;
					v1215[l_l_name_16_1] = v3936;
					l_name_16 = l_l_l_name_16_1_0;
				end;
				if l_attributes_1.is_upvalue and v1131.mark_upvalues then
					local v3937 = if v1131.mark_upvalues == "extra" then if l_attributes_1.is_upvalue == "read" then l_name_16 .. "_upvr" else l_name_16 .. "_upvw" else l_name_16 .. "_upv";
						local v3938 = v1215[v3937];
						local l_v3937_0 = v3937;
						local v3940 = v3938 or 1;
						while v1208[l_v3937_0] or v1143[l_v3937_0] do
							v3940 = v3940 + 1;
							l_v3937_0 = v3937 .. "_" .. v3940;
						end;
						v1215[v3937] = v3940;
						l_name_16 = l_v3937_0;
					end;
					local l_l_name_16_2 = l_name_16;
					local l_name_17 = v3927.name;
					if not v1208[l_name_17] then
						error((("[write] Variable %* not allocated"):format(l_name_17)));
					end;
					v1208[l_name_17] = nil;
					v3927.name = l_l_name_16_2;
					v1208[l_l_name_16_2] = v3927;
					v3927.attributes.renamed = true;
				end;
			end;
			v1130:end_benchmark("Smart Naming");
			v1130:start_benchmark("Global AST To String");
			local v3943 = ("-- Successfully decompiled with Ratware\n");
			if type(v1127) ~= "string" and l_getscripthash_0 then
				v3943 = v3943 .. ("-- Script hash: %*\n"):format((string.upper(l_getscripthash_0(v1127))));
			end;
			v3943 = (v3943 .. ("-- Decompiled on %*\n"):format((os.date("%Y-%m-%d %H:%M:%S")))) .. ("-- Luau version %*%*\n"):format(string.byte(v1127, 1, 1), if v1142 then (", Types version %*"):format(v1142) else "");
			local v3944 = if v1131.spaces_in_indentation then string.rep(" ", v1131.spaces_in_indentation) else string.char(9);
			local function v3946(v3945) --[[ Line: 10945 ]] --[[ Name: indent ]]
				-- upvalues: v3944 (copy)
				return string.rep(v3944, #v3945 / #v3944 + 1);
			end;
			local v3947 = nil;
			local v3948 = nil;
			local v3949 = nil;
			local v3950 = {};
			local v3951 = 0;
			local function _() --[[ Line: 10954 ]] --[[ Name: flush_output ]]
				-- upvalues: v3951 (ref), v3943 (ref), v3950 (ref)
				v3951 = v3951 + #v3943;
				table.insert(v3950, v3943);
				v3943 = "";
			end;
			local function _(v3953, v3954) --[[ Line: 10959 ]] --[[ Name: insert_chunk ]]
				-- upvalues: v3951 (ref), v3950 (ref)
				v3951 = v3951 + #v3953;
				table.insert(v3950, v3954, v3953);
			end;
			local function _(v3956) --[[ Line: 10963 ]] --[[ Name: insert_output ]]
				-- upvalues: v3943 (ref), v3951 (ref), v3950 (ref)
				local l_v3943_0 = v3943;
				v3951 = v3951 + #l_v3943_0;
				table.insert(v3950, v3956, l_v3943_0);
				v3943 = "";
			end;
			local function _() --[[ Line: 10967 ]] --[[ Name: flush_output_if_needed ]]
				-- upvalues: v3943 (ref), v3951 (ref), v3950 (ref)
				if #v3943 > 20 then
					v3951 = v3951 + #v3943;
					table.insert(v3950, v3943);
					v3943 = "";
				end;
			end;
			v3951 = v3951 + #v3943;
			table.insert(v3950, v3943);
			v3943 = "";
			local function _(v3960) --[[ Line: 10973 ]] --[[ Name: luau_type_to_str ]]
				local v3961 = nil;
				local l_type_10 = v3960.type;
				v3961 = l_type_10 == "table" and "{[any]: any}" or l_type_10 == "function" and "_function_" or l_type_10 == "thread" and "_thread_" or l_type_10 == "userdata" and "_userdata_" or l_type_10 == "invalid" and "_invalid_" or l_type_10;
				if v3960.optional then
					return v3961 .. "?";
				else
					return v3961;
				end;
			end;
			local function v3975(v3964, _) --[[ Line: 10995 ]] --[[ Name: write_func_args ]]
				-- upvalues: v3943 (ref)
				local l_is_vararg_0 = v3964.is_vararg;
				local l_args_15 = v3964.args;
				for v3968, v3969 in ipairs(l_args_15) do
					v3943 = v3943 .. v3969.name;
					if v3969.luau_type then
						local l_v3943_1 = v3943;
						local v3971 = ": ";
						local l_luau_type_0 = v3969.luau_type;
						local v3973 = nil;
						local l_type_11 = l_luau_type_0.type;
						v3973 = l_type_11 == "table" and "{[any]: any}" or l_type_11 == "function" and "_function_" or l_type_11 == "thread" and "_thread_" or l_type_11 == "userdata" and "_userdata_" or l_type_11 == "invalid" and "_invalid_" or l_type_11;
						v3943 = l_v3943_1 .. v3971 .. if l_luau_type_0.optional then v3973 .. "?" else v3973;
					end;
					if v3968 < #l_args_15 then
						v3943 = v3943 .. ", ";
					end;
				end;
				if l_is_vararg_0 then
					if #l_args_15 > 0 then
						v3943 = v3943 .. ", ";
					end;
					v3943 = v3943 .. "...";
				end;
			end;
			local function _(v3976) --[[ Line: 11014 ]] --[[ Name: precedence ]]
				return v3976 and v3976.precedence or -100;
			end;
			local function _(v3978, v3979) --[[ Line: 11017 ]] --[[ Name: are_exprs_equal ]]
				local l_t_4 = v3978.t;
				if l_t_4 ~= v3979.t then
					return false;
				elseif l_t_4 == "constant" then
					return v3978.const.value == v3979.const.value;
				elseif l_t_4 == "name" then
					return v3978.name == v3979.name;
				else
					return true;
				end;
			end;
			local function _(v3982, v3983) --[[ Line: 11029 ]] --[[ Name: write_varname ]]
				-- upvalues: v3947 (ref), v3943 (ref)
				local l_override_expr_19 = v3982.override_expr;
				if l_override_expr_19 then
					v3947(l_override_expr_19, v3983);
					return;
				else
					v3943 = v3943 .. v3982.name;
					return;
				end;
			end;
			local _ = function(v3986, v3987, _) --[[ Line: 11037 ]] --[[ Name: write_func_inline_hints ]]
				-- upvalues: v3943 (ref), v1131 (copy)
				local v3989 = " -- ";
				local l_line_defined_0 = v3986.line_defined;
				if l_line_defined_0 then
					if l_line_defined_0 == -1 then
						v3943 = v3943 .. " -- Internal function, doesn't exist in bytecode";
						v3989 = ", ";
					elseif v1131.show_proto_line_defined then
						v3943 = v3943 .. " -- Line " .. l_line_defined_0;
						v3989 = ", ";
					end;
				end;
				if v3986.name_known and v3986.name ~= v3987 then
					v3943 = v3943 .. v3989 .. "Named \"" .. v3986.name .. "\"";
				end;
			end;
			local function v3998(v3992, v3993) --[[ Line: 11055 ]] --[[ Name: write_func_headers ]]
				-- upvalues: v1131 (copy), v3944 (copy), v3943 (ref)
				if v1131.show_proto_upvalues then
					local l_upvalues_count_0 = v3992.upvalues_count;
					if l_upvalues_count_0 > 0 then
						local v3995 = string.rep(v3944, #v3993 / #v3944 + 1);
						v3943 = v3943 .. v3993 .. "--[[ Upvalues[" .. l_upvalues_count_0 .. "]:\n";
						local l_upvalues_0 = v3992.upvalues;
						for v3997 = 0, l_upvalues_count_0 - 1 do
							v3943 = v3943 .. v3995 .. "[" .. v3997 + 1 .. "]: " .. l_upvalues_0[v3997].name.name .. " (";
							if l_upvalues_0[v3997].name.name == v3992.name.name then
								v3943 = v3943 .. "self-reference, ";
							end;
							v3943 = v3943 .. l_upvalues_0[v3997].access .. ")\n";
						end;
						v3943 = v3943 .. v3993 .. "]]\n";
					end;
				end;
			end;
			local function v4004(v3999, v4000) --[[ Line: 11073 ]] --[[ Name: write_func ]]
				-- upvalues: v3951 (ref), v3943 (ref), v3950 (ref), v3944 (copy), v3998 (copy), v3948 (ref)
				v3951 = v3951 + #v3943;
				table.insert(v3950, v3943);
				v3943 = "";
				local v4001 = string.rep(v3944, #v4000 / #v3944 + 1);
				v3998(v3999, v4001);
				v3951 = v3951 + #v3943;
				table.insert(v3950, v3943);
				v3943 = "";
				local l_v3950_0 = v3950;
				local l_ast_0 = v3999.ast;
				v3950 = table.create(#l_ast_0 * 5);
				v3948(l_ast_0, v4001);
				table.move(v3950, 1, #v3950, #l_v3950_0 + 1, l_v3950_0);
				v3950 = l_v3950_0;
				v3951 = v3951 + #v3943;
				table.insert(v3950, v3943);
				v3943 = "";
			end;
			local function v4009(v4005, v4006, v4007, _) --[[ Line: 11086 ]] --[[ Name: get_read_write_hint ]]
				if v4006 > 0 then
					if v4007 == 0 then
						return v4005 .. " reads: " .. v4006;
					else
						return v4005 .. " reads: " .. v4006 .. ", writes: " .. v4007;
					end;
				elseif v4007 ~= 0 then
					return v4005 .. " writes: " .. v4007;
				else
					return v4005 .. " unused";
				end;
			end;
			local function v4018(v4010, v4011) --[[ Line: 11101 ]] --[[ Name: write_varname_reads_and_writes ]]
				-- upvalues: v3943 (ref)
				for v4012, v4013 in ipairs(v4010) do
					local l_v3943_2 = v3943;
					local v4015 = #v4010 == 1 and "-- Variable" or "-- Variables[" .. v4012 .. "]";
					local v4016 = #v4013.reads;
					local v4017 = #v4013.writes - 1;
					v3943 = l_v3943_2 .. (if v4016 > 0 then if v4017 == 0 then v4015 .. " reads: " .. v4016 else v4015 .. " reads: " .. v4016 .. ", writes: " .. v4017 else if v4017 ~= 0 then v4015 .. " writes: " .. v4017 else v4015 .. " unused") .. "\n" .. v4011;
				end;
			end;
			local v4133 = {
				nothing = function(_, _) --[[ Line: 11110 ]]
					error("Shouldn't happen !!!!!!!!!!");
				end, 
				comment = function(v4021, _) --[[ Line: 11113 ]]
					-- upvalues: v3943 (ref)
					v3943 = v3943 .. "-- " .. v4021.text;
				end, 
				["break"] = function(_, _) --[[ Line: 11116 ]]
					-- upvalues: v3943 (ref)
					v3943 = v3943 .. "break";
				end, 
				continue = function(_, _) --[[ Line: 11119 ]]
					-- upvalues: v3943 (ref)
					v3943 = v3943 .. "continue";
				end, 
				["unknown jump"] = function(v4027, _) --[[ Line: 11122 ]]
					-- upvalues: v1148 (copy), v3943 (ref), l_prefix_warning_1 (copy)
					local v4029 = v1148[v4027];
					if v4029 then
						local v4030 = v4029[v4027.destination];
						if v4030 then
							v3943 = v3943 .. ("-- %*: GOTO [%*] #%*"):format(l_prefix_warning_1, v4030.actual_code_index, v4030.actual_index);
							return;
						else
							v3943 = v3943 .. ("-- %*: GOTO UNK2"):format(l_prefix_warning_1);
							return;
						end;
					else
						v3943 = v3943 .. ("-- %*: GOTO UNK1"):format(l_prefix_warning_1);
						return;
					end;
				end, 
				["if"] = function(v4031, v4032) --[[ Line: 11135 ]]
					-- upvalues: v3943 (ref), v3947 (ref), v3944 (copy), v1131 (copy), v3948 (ref)
					v3943 = v3943 .. "if ";
					v3947(v4031.expr, v4032);
					local v4033 = string.rep(v3944, #v4032 / #v3944 + 1);
					local v4034 = nil;
					if v1131.minify_if_statements and not v4031.else_ and #v4031.elseifs == 0 and #v4031.pass == 1 then
						local v4035 = v4031.pass[1];
						local l_t_5 = v4035.t;
						if l_t_5 == "return" then
							if #v4035.values == 0 then
								v4034 = l_t_5;
							end;
						elseif l_t_5 == "continue" or l_t_5 == "break" then
							v4034 = l_t_5;
						end;
					end;
					if v4034 then
						v3943 = v3943 .. " then " .. v4034 .. " end";
						return;
					else
						v3943 = v3943 .. " then\n";
						v3948(v4031.pass, v4033);
						for _, v4038 in ipairs(v4031.elseifs) do
							v3943 = v3943 .. v4032 .. "elseif ";
							v3947(v4038.expr, v4032);
							v3943 = v3943 .. " then\n";
							v3948(v4038.code, v4033);
						end;
						if v4031.else_ then
							v3943 = v3943 .. v4032 .. "else\n";
							v3948(v4031.else_, v4033);
						end;
						v3943 = v3943 .. v4032 .. "end";
						return;
					end;
				end, 
				["for"] = function(v4039, v4040) --[[ Line: 11169 ]]
					-- upvalues: v1131 (copy), v4018 (copy), v3943 (ref), v3947 (ref), v219 (ref), v1285 (copy), v3948 (ref), v3946 (copy)
					local v4041 = false;
					local l_for_info_3 = v4039.for_info;
					local l_variables_2 = l_for_info_3.variables;
					assert(l_variables_2);
					if v1131.mark_reads_and_writes then
						v4018(l_variables_2, v4040);
					end;
					local v4044 = #l_variables_2;
					v3943 = v3943 .. "for ";
					for v4045, v4046 in ipairs(l_variables_2) do
						v3943 = v3943 .. v4046.name;
						if v4045 ~= v4044 then
							v3943 = v3943 .. ", ";
						end;
					end;
					local l_type_12 = l_for_info_3.type;
					if l_type_12 == "numeric" then
						v3943 = v3943 .. " = ";
						local l_args_16 = l_for_info_3.args;
						assert(l_args_16.index_expr);
						assert(l_args_16.end_expr);
						assert(l_args_16.step_expr);
						v3947(l_args_16.index_expr, v4040);
						v3943 = v3943 .. ", ";
						v3947(l_args_16.end_expr, v4040);
						local l_step_expr_1 = l_args_16.step_expr;
						while l_step_expr_1.t == "name" do
							local l_override_expr_20 = l_step_expr_1.name.override_expr;
							if l_override_expr_20 then
								l_step_expr_1 = l_override_expr_20;
							else
								break;
							end;
						end;
						local l_l_step_expr_1_0 = l_step_expr_1;
						assert(l_l_step_expr_1_0);
						if l_l_step_expr_1_0.t == "constant" then
							l_step_expr_1 = l_l_step_expr_1_0.const;
							v4041 = l_step_expr_1.type == 2 and l_step_expr_1.value == 1;
						end;
						if not v4041 then
							v3943 = v3943 .. ", ";
							v3947(l_l_step_expr_1_0, v4040);
						end;
					elseif l_type_12 == "generic" then
						v3943 = v3943 .. " in ";
						local l_args_17 = l_for_info_3.args;
						local l_generator_expr_2 = l_args_17.generator_expr;
						assert(l_generator_expr_2);
						local v4054 = nil;
						local l_state_expr_1 = l_args_17.state_expr;
						local l_index_expr_2 = l_args_17.index_expr;
						local v4057 = nil;
						if not l_index_expr_2 or l_index_expr_2.t == "nil" then
							v4057 = if not l_state_expr_1 or l_state_expr_1.t == "nil" then not v219[l_generator_expr_2.t] else not v219[l_state_expr_1.t];
						end;
						v4054 = if l_index_expr_2 then if l_state_expr_1 then if l_state_expr_1.t == "nil" and l_index_expr_2.t == "nil" then {
								l_generator_expr_2, 
								l_state_expr_1
								} else {
									l_generator_expr_2, 
									l_state_expr_1, 
									l_index_expr_2
								} else {
								l_generator_expr_2, 
								v1285(), 
								l_index_expr_2
								} else if l_state_expr_1 then {
								l_generator_expr_2, 
								l_state_expr_1
								} else {
								l_generator_expr_2
								};
								if v4057 then
									while #v4054 > 1 and v4054[#v4054].t == "nil" do
										table.remove(v4054);
									end;
								end;
								local v4058 = #v4054;
								for v4059, v4060 in ipairs(v4054) do
									if type(v4060) == "number" then
										v3943 = v3943 .. "nil";
									else
										v3947(v4060, v4040);
									end;
									if v4059 < v4058 then
										v3943 = v3943 .. ", ";
									end;
								end;
					else
						error((("Unknown for_type \"%*\""):format(l_type_12)));
					end;
					v4041 = false;
					v3943 = v3943 .. " do\n";
					v3948(v4039.code, v3946(v4040));
					v3943 = v3943 .. v4040 .. "end";
				end, 
				["while"] = function(v4061, v4062) --[[ Line: 11263 ]]
					-- upvalues: v3943 (ref), v3947 (ref), v1131 (copy), v3948 (ref), v3946 (copy)
					if v4061.expr then
						v3943 = v3943 .. "while ";
						v3947(v4061.expr, v4062);
						v3943 = v3943 .. " do\n";
					elseif v1131.do_while_1 then
						v3943 = v3943 .. "while 1 do\n";
					else
						v3943 = v3943 .. "while true do\n";
					end;
					v3948(v4061.code, v3946(v4062));
					v3943 = v3943 .. v4062 .. "end";
				end, 
				["repeat"] = function(v4063, v4064) --[[ Line: 11276 ]]
					-- upvalues: v3943 (ref), v3948 (ref), v3946 (copy), v3947 (ref)
					v3943 = v3943 .. "repeat\n";
					v3948(v4063.code, v3946(v4064));
					if v4063.expr then
						v3943 = v3943 .. v4064 .. "until ";
						v3947(v4063.expr, v4064);
						return;
					else
						v3943 = v3943 .. v4064 .. "until nil";
						return;
					end;
				end, 
				["do"] = function(v4065, v4066) --[[ Line: 11286 ]]
					-- upvalues: v3943 (ref), v3948 (ref), v3946 (copy)
					v3943 = v3943 .. "do\n";
					v3948(v4065.content, v3946(v4066));
					v3943 = v3943 .. v4066 .. "end";
				end, 
				call = function(v4067, v4068) --[[ Line: 11291 ]]
					-- upvalues: v3943 (ref), v3951 (ref), v3950 (ref), v460 (ref), v1131 (copy), v3947 (ref)
					local l_func_1 = v4067.func;
					while l_func_1.t == "name" do
						local l_override_expr_21 = l_func_1.name.override_expr;
						if l_override_expr_21 then
							l_func_1 = l_override_expr_21;
						else
							break;
						end;
					end;
					local l_l_func_1_0 = l_func_1;
					if l_l_func_1_0.t == "constant index" then
						l_func_1 = l_l_func_1_0.table;
						if l_func_1.t == "constant" then
							local l_const_14 = l_func_1.const;
							if l_const_14.type == 3 then
								local function _(v4073) --[[ Line: 11299 ]] --[[ Name: fmt_string_slice ]]
									return (string.gsub(v4073, "%%%%", "%%"));
								end;
								local l_value_13 = l_const_14.value;
								local v4076 = buffer.fromstring(l_value_13);
								local v4077 = {};
								local v4078 = 1;
								local v4079 = false;
								for v4080 = 0, #l_value_13 - 1 do
									local v4081 = buffer.readu8(v4076, v4080);
									if v4081 == 37 then
										v4079 = not v4079;
									else
										if v4081 == 42 and v4079 then
											local v4082 = string.sub(l_value_13, v4078, v4080 - 1);
											table.insert(v4077, (string.gsub(v4082, "%%%%", "%%")));
											v4078 = v4080 + 2;
										end;
										v4079 = false;
									end;
								end;
								local v4083 = string.sub(l_value_13, v4078, #l_value_13);
								table.insert(v4077, (string.gsub(v4083, "%%%%", "%%")));
								if #v4077 - 1 == #v4067.args then
									v3943 = v3943 .. "`";
									v3951 = v3951 + #v3943;
									table.insert(v3950, v3943);
									v3943 = "";
									for v4084, v4085 in ipairs(v4077) do
										v3943 = v3943 .. v460(v1131.string_quotes_behavior, v4085, true);
										v3951 = v3951 + #v3943;
										table.insert(v3950, v3943);
										v3943 = "";
										if v4084 < #v4077 then
											v3943 = v3943 .. "{";
											v3947(v4067.args[v4084], v4068);
											v3943 = v3943 .. "}";
											v3951 = v3951 + #v3943;
											table.insert(v3950, v3943);
											v3943 = "";
										end;
									end;
									v3943 = v3943 .. "`";
									return;
								end;
							end;
						end;
					end;
					l_func_1 = v3947;
					local l_l_l_func_1_0_0 = l_l_func_1_0;
					local l_v4068_0 = v4068;
					local v4088 = true;
					if l_l_func_1_0.t ~= "concatenation" then
						v4088 = true;
						if l_l_func_1_0.t ~= "function" then
							v4088 = l_l_func_1_0.t == "constant" and l_l_func_1_0.const.type ~= 4 or (l_l_func_1_0 and l_l_func_1_0.precedence or -100) >= 0;
						end;
					end;
					l_func_1(l_l_l_func_1_0_0, l_v4068_0, v4088);
					if v4067.namecall_method then
						v3943 = v3943 .. ":" .. v4067.namecall_method .. "(";
					else
						v3943 = v3943 .. "(";
					end;
					for v4089, v4090 in ipairs(v4067.args) do
						v3947(v4090, v4068);
						if v4089 < #v4067.args then
							v3943 = v3943 .. ", ";
						end;
					end;
					v3943 = v3943 .. ")";
				end, 
				["define variable"] = function(v4091, v4092) --[[ Line: 11356 ]]
					-- upvalues: v1131 (copy), v4018 (copy), v3943 (ref), v3947 (ref)
					if v1131.mark_reads_and_writes then
						v4018(v4091.names, v4092);
					end;
					v3943 = v3943 .. "local ";
					for v4093, v4094 in ipairs(v4091.names) do
						v3943 = v3943 .. v4094.name;
						if v4093 < #v4091.names then
							v3943 = v3943 .. ", ";
						end;
					end;
					if (v1131.show_nil_definitions or v4091.value.t ~= "nil") and not v4091.value.invisible then
						v3943 = v3943 .. " = ";
						v3947(v4091.value, v4092);
					end;
				end, 
				["define function"] = function(v4095, v4096) --[[ Line: 11372 ]]
					-- upvalues: v1131 (copy), v4018 (copy), v3943 (ref), v3975 (copy), v4004 (copy)
					local l_func_2 = v4095.func;
					local l_define_function_type_0 = v4095.define_function_type;
					if v1131.mark_reads_and_writes and l_define_function_type_0 == "local" then
						v4018({
							l_func_2.varname
						}, v4096);
					end;
					if l_define_function_type_0 == "local" then
						v3943 = v3943 .. "local function " .. v4095.func_name.name .. "(";
					elseif l_define_function_type_0 == "table" then
						v3943 = v3943 .. "function ";
						local l_path_0 = v4095.path;
						for v4100, v4101 in ipairs(l_path_0) do
							if v4100 == #l_path_0 then
								v3943 = v3943 .. v4101.name;
							else
								v3943 = v3943 .. v4101.name .. ".";
							end;
						end;
						v3943 = v3943 .. "(";
					else
						v3943 = v3943 .. "function " .. v4095.func_name.name .. "(";
					end;
					v3975(l_func_2, v4096);
					v3943 = v3943 .. ")";
					local l_name_18 = v4095.func_name.name;
					local v4103 = " -- ";
					local l_line_defined_1 = l_func_2.line_defined;
					if l_line_defined_1 then
						if l_line_defined_1 == -1 then
							v3943 = v3943 .. " -- Internal function, doesn't exist in bytecode";
							v4103 = ", ";
						elseif v1131.show_proto_line_defined then
							v3943 = v3943 .. " -- Line " .. l_line_defined_1;
							v4103 = ", ";
						end;
					end;
					if l_func_2.name_known and l_func_2.name ~= l_name_18 then
						v3943 = v3943 .. v4103 .. "Named \"" .. l_func_2.name .. "\"";
					end;
					v3943 = v3943 .. "\n";
					v4004(l_func_2, v4096);
					v3943 = v3943 .. v4096 .. "end";
				end, 
				["set variable"] = function(v4105, v4106) --[[ Line: 11401 ]]
					-- upvalues: v3943 (ref), v214 (ref), v1131 (copy), v3947 (ref)
					v3943 = v3943 .. v4105.name.name;
					local v4107 = v214[v4105.value.t];
					local v4108 = false;
					if v4107 and v1131.use_compound_assignment then
						if v4105.value.t == "concatenation" then
							if #v4105.value.exprs > 1 and v4105.value.exprs[1].t == "global" and v4105.value.exprs[1].name == v4105.name then
								v4108 = true;
							end;
						elseif v4105.value.lhs.t == "name" and v4105.name.name == v4105.value.lhs.name.name then
							v4108 = true;
						end;
					end;
					if v4108 then
						v3943 = v3943 .. " " .. v4107 .. " ";
						v3947(v4105.value.rhs, v4106);
						return;
					else
						v3943 = v3943 .. " = ";
						v3947(v4105.value, v4106);
						return;
					end;
				end, 
				["set global"] = function(v4109, v4110) --[[ Line: 11422 ]]
					-- upvalues: v3943 (ref), v214 (ref), v1131 (copy), v3947 (ref)
					local _ = v4109.value;
					v3943 = v3943 .. v4109.name.value;
					local v4112 = v214[v4109.value.t];
					local v4113 = false;
					if v4112 and v1131.use_compound_assignment then
						if v4109.value.t == "concatenation" then
							if #v4109.value.exprs > 1 and v4109.value.exprs[1].t == "global" and v4109.value.exprs[1].name == v4109.name then
								v4113 = true;
							end;
						elseif v4109.value.lhs.t == "constant" and v4109.name.value == v4109.value.lhs.const.value then
							v4113 = true;
						end;
					end;
					if v4113 then
						v3943 = v3943 .. " " .. v4112 .. " ";
						if v4109.value.t == "concatenation" then
							local v4114 = table.clone(v4109.value);
							local v4115 = table.clone(v4114.exprs);
							table.remove(v4115, 1);
							v4114.exprs = v4115;
							v3947(v4114, v4110);
						else
							v3947(v4109.value.rhs, v4110);
						end;
					else
						v3943 = v3943 .. " = ";
						v3947(v4109.value, v4110);
					end;
					if v1131.mark_setglobal then
						v3943 = v3943 .. " -- Setting global";
					end;
				end, 
				["set table"] = function(v4116, v4117) --[[ Line: 11455 ]]
					-- upvalues: v3947 (ref), v538 (ref), v3943 (ref), v214 (ref), v1131 (copy)
					local l_table_2 = v4116.table;
					while l_table_2.t == "name" do
						local l_override_expr_22 = l_table_2.name.override_expr;
						if l_override_expr_22 then
							l_table_2 = l_override_expr_22;
						else
							break;
						end;
					end;
					local l_l_table_2_0 = l_table_2;
					v3947(l_l_table_2_0, v4117, l_l_table_2_0.t == "new table");
					if v4116.key.t == "constant" and v4116.key.const.type == 3 and v538(v4116.key.const.value) then
						v3943 = v3943 .. "." .. v4116.key.const.value .. " ";
					else
						v3943 = v3943 .. "[";
						v3947(v4116.key, v4117);
						v3943 = v3943 .. "] ";
					end;
					l_table_2 = v214[v4116.value.t];
					local v4121 = false;
					if l_table_2 and v1131.use_compound_assignment then
						local v4122 = nil;
						if v4116.value.t == "concatenation" then
							if l_l_table_2_0.t == "name" and v4116.value.exprs[1].t == "get table" and v4116.value.exprs[1].table.t == "name" and l_l_table_2_0.name == v4116.value.exprs[1].table.name then
								v4122 = v4116.value.exprs[1].index;
							end;
						elseif l_l_table_2_0.t == "name" and v4116.value.lhs.t == "get table" and v4116.value.lhs.table.t == "name" and l_l_table_2_0.name == v4116.value.lhs.table.name then
							v4122 = v4116.value.lhs.index;
						end;
						if v4122 then
							local l_v4122_0 = v4122;
							local l_key_2 = v4116.key;
							local l_t_6 = l_v4122_0.t;
							if l_t_6 == l_key_2.t and if l_t_6 == "constant" then l_v4122_0.const.value == l_key_2.const.value else not (l_t_6 == "name") or l_v4122_0.name == l_key_2.name then
								v4121 = true;
							end;
						end;
					end;
					if v4121 then
						v3943 = v3943 .. l_table_2 .. " ";
						if v4116.value.t == "concatenation" then
							local v4126 = table.clone(v4116.value);
							local v4127 = table.clone(v4126.exprs);
							table.remove(v4127, 1);
							v4126.exprs = v4127;
							v3947(v4126, v4117);
							return;
						else
							v3947(v4116.value.rhs, v4117);
							return;
						end;
					else
						v3943 = v3943 .. "= ";
						v3947(v4116.value, v4117);
						return;
					end;
				end, 
				["return"] = function(v4128, v4129) --[[ Line: 11499 ]]
					-- upvalues: v3943 (ref), v3947 (ref)
					v3943 = v3943 .. "return";
					local l_values_2 = v4128.values;
					local v4131 = #l_values_2;
					if v4131 > 0 then
						v3943 = v3943 .. " ";
					end;
					for v4132 = 1, v4131 do
						v3947(l_values_2[v4132], v4129);
						if v4132 < v4131 then
							v3943 = v3943 .. ", ";
						end;
					end;
				end
			};
			local v4264 = {
				global = function(v4134, v4135) --[[ Line: 11515 ]]
					-- upvalues: v3943 (ref), v3949 (ref)
					if v4134.name.type == 3 then
						v3943 = v3943 .. v4134.name.value;
						return;
					elseif v4134.name.type == 4 then
						v3949(v4134.name, v4135);
						return;
					else
						error("Corrupted global");
						return;
					end;
				end, 
				name = function(v4136, v4137) --[[ Line: 11525 ]]
					-- upvalues: v3947 (ref), v3943 (ref)
					local l_name_19 = v4136.name;
					local l_override_expr_23 = l_name_19.override_expr;
					if l_override_expr_23 then
						v3947(l_override_expr_23, v4137);
						return;
					else
						v3943 = v3943 .. l_name_19.name;
						return;
					end;
				end, 
				varargs = function(_, _) --[[ Line: 11528 ]]
					-- upvalues: v3943 (ref)
					v3943 = v3943 .. "...";
				end, 
				["nil"] = function(_, _) --[[ Line: 11531 ]]
					-- upvalues: v3943 (ref)
					v3943 = v3943 .. "nil";
				end, 
				boolean = function(v4144, _) --[[ Line: 11534 ]]
					-- upvalues: v3943 (ref)
					v3943 = v3943 .. (v4144.value and "true" or "false");
				end, 
				["new table"] = function(v4146, v4147) --[[ Line: 11537 ]]
					-- upvalues: v3943 (ref), v1131 (copy), v3944 (copy), v538 (ref), v3947 (ref), v3951 (ref), v3950 (ref)
					local l_initializers_1 = v4146.initializers;
					local v4149 = true;
					for _ in pairs(l_initializers_1) do
						v4149 = false;
						break;
					end;
					if v4149 then
						v3943 = v3943 .. "{}";
					else
						v3943 = v3943 .. "{";
						local v4151 = table.maxn(l_initializers_1);
						local v4152 = false;
						if v1131.always_use_table_keys then
							v4152 = true;
						else
							for v4153 in pairs(l_initializers_1) do
								if type(v4153) ~= "number" then
									v4152 = true;
									break;
								end;
							end;
						end;
						local l_v4152_0 = v4152;
						local l_v4147_0 = v4147;
						if l_v4152_0 then
							v4147 = string.rep(v3944, #v4147 / #v3944 + 1);
							v3943 = v3943 .. "\n" .. v4147;
						end;
						local l_initializers_order_0 = v4146.initializers_order;
						local v4157 = #l_initializers_order_0;
						for v4158, v4159 in ipairs(l_initializers_order_0) do
							local v4160 = l_initializers_1[v4159];
							if type(v4159) == "table" then
								if v1131.table_string_key_shortening and v4159.t == "constant" and v4159.const.type == 3 and v538(v4159.const.value) then
									v3943 = v3943 .. v4159.const.value .. " = ";
								else
									v3943 = v3943 .. "[";
									v3947(v4159, v4147);
									v3943 = v3943 .. "] = ";
								end;
								v3947(v4160, v4147);
								if v1131.table_dict_key_semicolons then
									v3943 = v3943 .. ";";
								else
									v3943 = v3943 .. ",";
								end;
								if v4158 ~= v4157 then
									v3943 = v3943 .. "\n" .. v4147;
								end;
							elseif v1131.always_use_table_keys then
								v3943 = v3943 .. "[" .. v4159 .. "] = ";
								v3947(v4160, v4147);
								if v1131.table_dict_key_semicolons then
									v3943 = v3943 .. ";";
								else
									v3943 = v3943 .. ",";
								end;
								if v4158 ~= v4157 then
									v3943 = v3943 .. "\n" .. v4147;
								end;
							end;
							if #v3943 > 20 then
								v3951 = v3951 + #v3943;
								table.insert(v3950, v3943);
								v3943 = "";
							end;
						end;
						if not v1131.always_use_table_keys then
							if v4152 and v4151 > 0 then
								v3943 = v3943 .. "\n" .. v4147;
							end;
							for v4161 = 1, v4151 do
								if v4161 % 10 ~= 0 or l_v4152_0 then

								end;
								v3947(l_initializers_1[v4161], v4147);
								if v4161 < v4151 then
									if v1131.table_array_value_semicolons then
										v3943 = v3943 .. "; ";
									else
										v3943 = v3943 .. ", ";
									end;
								end;
								if #v3943 > 20 then
									v3951 = v3951 + #v3943;
									table.insert(v3950, v3943);
									v3943 = "";
								end;
							end;
						end;
						v4147 = l_v4147_0;
						if l_v4152_0 then
							v3943 = v3943 .. "\n" .. v4147;
						end;
						v3943 = v3943 .. "}";
					end;
					if #v3943 > 20 then
						v3951 = v3951 + #v3943;
						table.insert(v3950, v3943);
						v3943 = "";
					end;
				end, 
				constant = function(v4162, v4163) --[[ Line: 11629 ]]
					-- upvalues: v3949 (ref)
					v3949(v4162.const, v4163);
				end, 
				call = v4133.call, 
				["constant index"] = function(v4164, v4165) --[[ Line: 11634 ]]
					-- upvalues: v3947 (ref), v538 (ref), v3943 (ref), v3949 (ref)
					v3947(v4164.table, v4165);
					if v4164.index.type == 3 and v538(v4164.index.value) then
						if v4164.namecall then
							v3943 = v3943 .. ":" .. v4164.index.value;
							return;
						else
							v3943 = v3943 .. "." .. v4164.index.value;
							return;
						end;
					else
						if v4164.namecall then
							v3943 = v3943 .. "--[[Namecall requested, but namecall method is an invalid name]]";
						end;
						v3943 = v3943 .. "[";
						v3949(v4164.index, v4165);
						v3943 = v3943 .. "]";
						return;
					end;
				end, 
				["function"] = function(v4166, v4167) --[[ Line: 11651 ]]
					-- upvalues: v3943 (ref), v3975 (copy), v1131 (copy), v3951 (ref), v3950 (ref), v4004 (copy)
					v3943 = v3943 .. "function(";
					v3975(v4166, v4167);
					v3943 = v3943 .. ")";
					local v4168 = " -- ";
					local l_line_defined_2 = v4166.line_defined;
					if l_line_defined_2 then
						if l_line_defined_2 == -1 then
							v3943 = v3943 .. " -- Internal function, doesn't exist in bytecode";
							v4168 = ", ";
						elseif v1131.show_proto_line_defined then
							v3943 = v3943 .. " -- Line " .. l_line_defined_2;
							v4168 = ", ";
						end;
					end;
					if v4166.name_known and v4166.name ~= nil then
						v3943 = v3943 .. v4168 .. "Named \"" .. v4166.name .. "\"";
					end;
					v3943 = v3943 .. "\n";
					v3951 = v3951 + #v3943;
					table.insert(v3950, v3943);
					v3943 = "";
					v4004(v4166, v4167);
					v3943 = v3943 .. v4167 .. "end";
				end, 
				["and"] = function(v4170, v4171) --[[ Line: 11661 ]]
					-- upvalues: v3947 (ref), v3943 (ref)
					local l_v3947_0 = v3947;
					local l_lhs_4 = v4170.lhs;
					local l_v4171_0 = v4171;
					local l_lhs_5 = v4170.lhs;
					l_v3947_0(l_lhs_4, l_v4171_0, (l_lhs_5 and l_lhs_5.precedence or -100) > (v4170 and v4170.precedence or -100));
					v3943 = v3943 .. " and ";
					l_v3947_0 = v3947;
					l_lhs_4 = v4170.rhs;
					l_v4171_0 = v4171;
					l_lhs_5 = v4170.rhs;
					l_v3947_0(l_lhs_4, l_v4171_0, (l_lhs_5 and l_lhs_5.precedence or -100) > (v4170 and v4170.precedence or -100));
				end, 
				["or"] = function(v4176, v4177) --[[ Line: 11666 ]]
					-- upvalues: v3947 (ref), v3943 (ref)
					local l_v3947_1 = v3947;
					local l_lhs_6 = v4176.lhs;
					local l_v4177_0 = v4177;
					local l_lhs_7 = v4176.lhs;
					l_v3947_1(l_lhs_6, l_v4177_0, (l_lhs_7 and l_lhs_7.precedence or -100) > (v4176 and v4176.precedence or -100));
					v3943 = v3943 .. " or ";
					l_v3947_1 = v3947;
					l_lhs_6 = v4176.rhs;
					l_v4177_0 = v4177;
					l_lhs_7 = v4176.rhs;
					l_v3947_1(l_lhs_6, l_v4177_0, (l_lhs_7 and l_lhs_7.precedence or -100) > (v4176 and v4176.precedence or -100));
				end, 
				condition = function(v4182, v4183) --[[ Line: 11671 ]]
					-- upvalues: v3947 (ref), v3943 (ref)
					local l_v3947_2 = v3947;
					local l_lhs_8 = v4182.lhs;
					local l_v4183_0 = v4183;
					local l_lhs_9 = v4182.lhs;
					l_v3947_2(l_lhs_8, l_v4183_0, (l_lhs_9 and l_lhs_9.precedence or -100) > (v4182 and v4182.precedence or -100));
					v3943 = v3943 .. " " .. v4182.condition .. " ";
					l_v3947_2 = v3947;
					l_lhs_8 = v4182.rhs;
					l_v4183_0 = v4183;
					l_lhs_9 = v4182.rhs;
					l_v3947_2(l_lhs_8, l_v4183_0, (l_lhs_9 and l_lhs_9.precedence or -100) > (v4182 and v4182.precedence or -100));
				end, 
				addition = function(v4188, v4189) --[[ Line: 11676 ]]
					-- upvalues: v3947 (ref), v3943 (ref)
					local l_v3947_3 = v3947;
					local l_lhs_10 = v4188.lhs;
					local l_v4189_0 = v4189;
					local v4193 = true;
					local l_lhs_11 = v4188.lhs;
					if (l_lhs_11 and l_lhs_11.precedence or -100) <= (v4188 and v4188.precedence or -100) then
						v4193 = true;
						if v4188.rhs.t ~= "addition" then
							v4193 = v4188.rhs.t == "subtraction";
						end;
					end;
					l_v3947_3(l_lhs_10, l_v4189_0, v4193);
					v3943 = v3943 .. " + ";
					l_v3947_3 = v3947;
					l_lhs_10 = v4188.rhs;
					l_v4189_0 = v4189;
					v4193 = true;
					l_lhs_11 = v4188.rhs;
					if (l_lhs_11 and l_lhs_11.precedence or -100) <= (v4188 and v4188.precedence or -100) then
						v4193 = true;
						if v4188.rhs.t ~= "addition" then
							v4193 = v4188.rhs.t == "subtraction";
						end;
					end;
					l_v3947_3(l_lhs_10, l_v4189_0, v4193);
				end, 
				subtraction = function(v4195, v4196) --[[ Line: 11681 ]]
					-- upvalues: v3947 (ref), v3943 (ref)
					local l_v3947_4 = v3947;
					local l_lhs_12 = v4195.lhs;
					local l_v4196_0 = v4196;
					local v4200 = true;
					local l_lhs_13 = v4195.lhs;
					if (l_lhs_13 and l_lhs_13.precedence or -100) <= (v4195 and v4195.precedence or -100) then
						v4200 = true;
						if v4195.rhs.t ~= "addition" then
							v4200 = v4195.rhs.t == "subtraction";
						end;
					end;
					l_v3947_4(l_lhs_12, l_v4196_0, v4200);
					v3943 = v3943 .. " - ";
					l_v3947_4 = v3947;
					l_lhs_12 = v4195.rhs;
					l_v4196_0 = v4196;
					v4200 = true;
					l_lhs_13 = v4195.rhs;
					if (l_lhs_13 and l_lhs_13.precedence or -100) <= (v4195 and v4195.precedence or -100) then
						v4200 = true;
						if v4195.rhs.t ~= "addition" then
							v4200 = v4195.rhs.t == "subtraction";
						end;
					end;
					l_v3947_4(l_lhs_12, l_v4196_0, v4200);
				end, 
				multiplication = function(v4202, v4203) --[[ Line: 11686 ]]
					-- upvalues: v3947 (ref), v3943 (ref)
					local l_v3947_5 = v3947;
					local l_lhs_14 = v4202.lhs;
					local l_v4203_0 = v4203;
					local v4207 = true;
					local l_lhs_15 = v4202.lhs;
					if (l_lhs_15 and l_lhs_15.precedence or -100) <= (v4202 and v4202.precedence or -100) then
						v4207 = true;
						if v4202.rhs.t ~= "multiplication" then
							v4207 = v4202.rhs.t == "division";
						end;
					end;
					l_v3947_5(l_lhs_14, l_v4203_0, v4207);
					v3943 = v3943 .. " * ";
					l_v3947_5 = v3947;
					l_lhs_14 = v4202.rhs;
					l_v4203_0 = v4203;
					v4207 = true;
					l_lhs_15 = v4202.rhs;
					if (l_lhs_15 and l_lhs_15.precedence or -100) <= (v4202 and v4202.precedence or -100) then
						v4207 = true;
						if v4202.rhs.t ~= "multiplication" then
							v4207 = v4202.rhs.t == "division";
						end;
					end;
					l_v3947_5(l_lhs_14, l_v4203_0, v4207);
				end, 
				division = function(v4209, v4210) --[[ Line: 11691 ]]
					-- upvalues: v3947 (ref), v3943 (ref)
					local l_v3947_6 = v3947;
					local l_lhs_16 = v4209.lhs;
					local l_v4210_0 = v4210;
					local v4214 = true;
					local l_lhs_17 = v4209.lhs;
					if (l_lhs_17 and l_lhs_17.precedence or -100) <= (v4209 and v4209.precedence or -100) then
						v4214 = true;
						if v4209.rhs.t ~= "multiplication" then
							v4214 = v4209.rhs.t == "division";
						end;
					end;
					l_v3947_6(l_lhs_16, l_v4210_0, v4214);
					v3943 = v3943 .. " / ";
					l_v3947_6 = v3947;
					l_lhs_16 = v4209.rhs;
					l_v4210_0 = v4210;
					v4214 = true;
					l_lhs_17 = v4209.rhs;
					if (l_lhs_17 and l_lhs_17.precedence or -100) <= (v4209 and v4209.precedence or -100) then
						v4214 = true;
						if v4209.rhs.t ~= "multiplication" then
							v4214 = v4209.rhs.t == "division";
						end;
					end;
					l_v3947_6(l_lhs_16, l_v4210_0, v4214);
				end, 
				["floor division"] = function(v4216, v4217) --[[ Line: 11697 ]]
					-- upvalues: v3947 (ref), v3943 (ref)
					local l_v3947_7 = v3947;
					local l_lhs_18 = v4216.lhs;
					local l_v4217_0 = v4217;
					local l_lhs_19 = v4216.lhs;
					l_v3947_7(l_lhs_18, l_v4217_0, (l_lhs_19 and l_lhs_19.precedence or -100) > (v4216 and v4216.precedence or -100));
					v3943 = v3943 .. " // ";
					l_v3947_7 = v3947;
					l_lhs_18 = v4216.rhs;
					l_v4217_0 = v4217;
					l_lhs_19 = v4216.rhs;
					l_v3947_7(l_lhs_18, l_v4217_0, (l_lhs_19 and l_lhs_19.precedence or -100) > (v4216 and v4216.precedence or -100));
				end, 
				modulus = function(v4222, v4223) --[[ Line: 11702 ]]
					-- upvalues: v3947 (ref), v3943 (ref)
					local l_v3947_8 = v3947;
					local l_lhs_20 = v4222.lhs;
					local l_v4223_0 = v4223;
					local l_lhs_21 = v4222.lhs;
					l_v3947_8(l_lhs_20, l_v4223_0, (l_lhs_21 and l_lhs_21.precedence or -100) > (v4222 and v4222.precedence or -100));
					v3943 = v3943 .. " % ";
					l_v3947_8 = v3947;
					l_lhs_20 = v4222.rhs;
					l_v4223_0 = v4223;
					l_lhs_21 = v4222.rhs;
					l_v3947_8(l_lhs_20, l_v4223_0, (l_lhs_21 and l_lhs_21.precedence or -100) > (v4222 and v4222.precedence or -100));
				end, 
				negate = function(v4228, v4229) --[[ Line: 11707 ]]
					-- upvalues: v3943 (ref), v3947 (ref)
					v3943 = v3943 .. "-";
					local l_v3947_9 = v3947;
					local l_rhs_9 = v4228.rhs;
					local l_v4229_0 = v4229;
					local l_rhs_10 = v4228.rhs;
					l_v3947_9(l_rhs_9, l_v4229_0, (l_rhs_10 and l_rhs_10.precedence or -100) >= (v4228 and v4228.precedence or -100));
				end, 
				["not"] = function(v4234, v4235) --[[ Line: 11711 ]]
					-- upvalues: v3943 (ref), v3947 (ref)
					v3943 = v3943 .. "not ";
					local l_v3947_10 = v3947;
					local l_rhs_11 = v4234.rhs;
					local l_v4235_0 = v4235;
					local l_rhs_12 = v4234.rhs;
					l_v3947_10(l_rhs_11, l_v4235_0, (l_rhs_12 and l_rhs_12.precedence or -100) > (v4234 and v4234.precedence or -100));
				end, 
				length = function(v4240, v4241) --[[ Line: 11715 ]]
					-- upvalues: v3943 (ref), v3947 (ref)
					v3943 = v3943 .. "#";
					local l_v3947_11 = v3947;
					local l_rhs_13 = v4240.rhs;
					local l_v4241_0 = v4241;
					local l_rhs_14 = v4240.rhs;
					l_v3947_11(l_rhs_13, l_v4241_0, (l_rhs_14 and l_rhs_14.precedence or -100) >= (v4240 and v4240.precedence or -100));
				end, 
				concatenation = function(v4246, v4247) --[[ Line: 11719 ]]
					-- upvalues: v3943 (ref), v3947 (ref)
					for v4248, v4249 in ipairs(v4246.exprs) do
						if v4248 > 1 then
							v3943 = v3943 .. "..";
						end;
						v3947(v4249, v4247, (v4246 and v4246.precedence or -100) < (v4249 and v4249.precedence or -100));
					end;
				end, 
				exponentiation = function(v4250, v4251) --[[ Line: 11727 ]]
					-- upvalues: v3947 (ref), v3943 (ref)
					local l_v3947_12 = v3947;
					local l_lhs_22 = v4250.lhs;
					local l_v4251_0 = v4251;
					local l_lhs_23 = v4250.lhs;
					l_v3947_12(l_lhs_22, l_v4251_0, (l_lhs_23 and l_lhs_23.precedence or -100) > (v4250 and v4250.precedence or -100));
					v3943 = v3943 .. " ^ ";
					l_v3947_12 = v3947;
					l_lhs_22 = v4250.rhs;
					l_v4251_0 = v4251;
					l_lhs_23 = v4250.rhs;
					l_v3947_12(l_lhs_22, l_v4251_0, (l_lhs_23 and l_lhs_23.precedence or -100) > (v4250 and v4250.precedence or -100));
				end, 
				["get table"] = function(v4256, v4257) --[[ Line: 11732 ]]
					-- upvalues: v3947 (ref), v538 (ref), v3943 (ref)
					local l_table_3 = v4256.table;
					while l_table_3.t == "name" do
						local l_override_expr_24 = l_table_3.name.override_expr;
						if l_override_expr_24 then
							l_table_3 = l_override_expr_24;
						else
							break;
						end;
					end;
					local l_l_table_3_0 = l_table_3;
					l_table_3 = v3947;
					local l_l_l_table_3_0_0 = l_l_table_3_0;
					local l_v4257_0 = v4257;
					local v4263 = true;
					if l_l_table_3_0.t ~= "new table" then
						v4263 = (l_l_table_3_0 and l_l_table_3_0.precedence or -100) >= 0;
					end;
					l_table_3(l_l_l_table_3_0_0, l_v4257_0, v4263);
					if v4256.index.t == "constant" and v4256.index.const.type == 3 and v538(v4256.index.const.value) then
						v3943 = v3943 .. "." .. v4256.index.const.value;
						return;
					else
						v3943 = v3943 .. "[";
						v3947(v4256.index, v4257);
						v3943 = v3943 .. "]";
						return;
					end;
				end
			};
			v523 = v1131.do_tonumber_nan;
			v3949 = function(v4265, v4266) --[[ Line: 11746 ]] --[[ Name: write_lbc_const ]]
				-- upvalues: v3943 (ref), v1334 (ref), v3951 (ref), v3950 (ref), v460 (ref), v1131 (copy), v527 (ref), v3947 (ref)
				local l_type_13 = v4265.type;
				if l_type_13 == 0 then
					v3943 = v3943 .. "nil";
					return;
				elseif l_type_13 == 1 then
					v3943 = v3943 .. (v4265.value and "true" or "false");
					return;
				elseif l_type_13 == 3 then
					local l_value_15 = v4265.value;
					local v4269 = v1334[l_value_15];
					if v4269 then
						v3943 = v3943 .. v4269;
						return;
					else
						v3951 = v3951 + #v3943;
						table.insert(v3950, v3943);
						v3943 = "";
						v3943 = v3943 .. v460(v1131.string_quotes_behavior, l_value_15);
						v3951 = v3951 + #v3943;
						table.insert(v3950, v3943);
						v3943 = "";
						return;
					end;
				elseif l_type_13 == 2 then
					v3943 = v3943 .. v527(v4265.value);
					return;
				elseif l_type_13 == 7 then
					v3943 = v3943 .. "Vector3.new(" .. v527(v4265.value.X, true) .. ", " .. v527(v4265.value.Y, true) .. ", " .. v527(v4265.value.Z, true) .. ")";
					return;
				elseif l_type_13 == 4 then
					v3947(v4265.value, v4266);
					return;
				else
					error((("Unknown const type %*"):format(l_type_13)));
					return;
				end;
			end;
			local v4270 = string.sub(v3944, 1, 1);
			v3947 = function(v4271, v4272, v4273) --[[ Line: 11774 ]] --[[ Name: write_expr_out ]]
				-- upvalues: v4264 (copy), v3950 (ref), v3943 (ref), v4270 (copy), v4133 (copy), v1207 (copy)
				local v4274 = v4264[v4271.t];
				if v4274 then
					if v4273 then
						local v4275 = false;
						if #v3950 > 1 then
							local v4276 = true;
							for v4277 = #v3943, 1, -1 do
								if string.sub(v3943, v4277, v4277) ~= v4270 then
									v4276 = false;
									break;
								end;
							end;
							if v4276 then
								local v4278 = v3950[#v3950];
								if v4278 then
									for v4279 = #v4278, 1, -1 do
										local v4280 = string.sub(v4278, v4279, v4279);
										if v4280 ~= v4270 then
											if v4280 == "\n" then
												v4275 = true;
												break;
											else
												break;
											end;
										end;
									end;
								end;
							end;
						end;
						if v4275 then
							v3943 = v3943 .. ";(";
						else
							v3943 = v3943 .. "(";
						end;
					end;
					local l_status_0, l_result_0 = pcall(v4274, v4271, v4272);
					if not l_status_0 then
						v4133.comment(v1207(": First try: " .. l_result_0 .. "\n"), v4272);
					end;
					if v4273 then
						v3943 = v3943 .. ")";
						return;
					end;
				else
					error((("Unknown AST expr type \"%*\""):format(v4271.t)));
				end;
			end;
			v3948 = function(v4283, v4284) --[[ Line: 11868 ]] --[[ Name: write_lines_out ]]
				-- upvalues: v4133 (copy), v3943 (ref), v3951 (ref), v3950 (ref)
				for _, v4286 in ipairs(v4283) do
					local v4287 = v4133[v4286.t];
					if v4287 then
						if v4286.t ~= "nothing" then
							v3943 = v3943 .. v4284;
							v4287(v4286, v4284);
							v3943 = v3943 .. "\n";
							v3951 = v3951 + #v3943;
							table.insert(v3950, v3943);
							v3943 = "";
						end;
					else
						error((("Unknown AST line type \"%*\""):format(v4286.t)));
					end;
				end;
			end;
			local v4288 = table.create(#v3204);
			for _, v4290 in ipairs(v3204) do
				if v4290.t ~= "nothing" then
					if not v4290.t then
						print(v4290);
					end;
					table.insert(v4288, v4290);
				end;
			end;
			v3948(v4288, "");
			local v4291 = l_clock_0() - v1129;
			local v4292 = 2;
			local function v4295(v4293) --[[ Line: 11901 ]] --[[ Name: insert_at_end ]]
				-- upvalues: v4292 (ref), v3951 (ref), v3950 (ref)
				local l_v4292_0 = v4292;
				v3951 = v3951 + #v4293;
				table.insert(v3950, l_v4292_0, v4293);
				v4292 = v4292 + 1;
			end;
			v4295((("-- Time taken: %* seconds\n"):format((string.format("%.6f", v4291)))));
			if #v1144 > 0 then
				v4295("\n");
				local v4296 = {};
				local v4297 = {};
				local v4298 = {};
				local v4299 = {};
				local v4300 = {};
				local v4301 = {};
				local l_v4299_0 = v4299 --[[ copy: 146 -> 155 ]];
				local l_v4296_0 = v4296 --[[ copy: 143 -> 156 ]];
				local l_v4300_0 = v4300 --[[ copy: 147 -> 157 ]];
				local l_v4297_0 = v4297 --[[ copy: 144 -> 158 ]];
				local l_v4301_0 = v4301 --[[ copy: 148 -> 159 ]];
				local l_v4298_0 = v4298 --[[ copy: 145 -> 160 ]];
				local function v4308(v4309, v4310) --[[ Line: 11910 ]] --[[ Name: insert_notice ]]
					-- upvalues: l_v4299_0 (copy), l_v4296_0 (copy), l_v4300_0 (copy), l_v4297_0 (copy), l_v4301_0 (copy), l_v4298_0 (copy), v4308 (copy)
					if v4309 == "error" then
						local v4311 = l_v4299_0[v4310];
						if v4311 then
							v4311.uses = v4311.uses + 1;
							return;
						else
							local v4312 = {
								uses = 1, 
								content = v4310
							};
							l_v4299_0[v4310] = v4312;
							table.insert(l_v4296_0, v4312);
							return;
						end;
					elseif v4309 == "warning" then
						local v4313 = l_v4300_0[v4310];
						if v4313 then
							v4313.uses = v4313.uses + 1;
							return;
						else
							local v4314 = {
								uses = 1, 
								content = v4310
							};
							l_v4300_0[v4310] = v4314;
							table.insert(l_v4297_0, v4314);
							return;
						end;
					elseif v4309 == "info" then
						local v4315 = l_v4301_0[v4310];
						if v4315 then
							v4315.uses = v4315.uses + 1;
							return;
						else
							local v4316 = {
								uses = 1, 
								content = v4310
							};
							l_v4301_0[v4310] = v4316;
							table.insert(l_v4298_0, v4316);
							return;
						end;
					else
						v4308("error", (("Unknown notice type \"%*\""):format(v4309)));
						return;
					end;
				end;
				for _, v4318 in ipairs(v1144) do
					v4308(v4318.type, v4318.content);
				end;
				local function v4336(v4319, v4320, v4321) --[[ Line: 11954 ]] --[[ Name: display ]]
					-- upvalues: v4292 (ref), v3951 (ref), v3950 (ref)
					if #v4321 > 0 then
						local v4322 = "-- " .. v4319 .. "[" .. #v4321 .. "]:\n";
						local l_v4292_1 = v4292;
						v3951 = v3951 + #v4322;
						table.insert(v3950, l_v4292_1, v4322);
						v4292 = v4292 + 1;
						for v4324, v4325 in ipairs(v4321) do
							local l_uses_0 = v4325.uses;
							local l_content_0 = v4325.content;
							if string.match(l_content_0, "\n") then
								if l_uses_0 == 1 then
									local v4328 = "--[[ " .. v4324 .. ". " .. v4320 .. ":\n" .. l_content_0 .. "\n]]\n";
									local l_v4292_2 = v4292;
									v3951 = v3951 + #v4328;
									table.insert(v3950, l_v4292_2, v4328);
									v4292 = v4292 + 1;
								else
									local v4330 = "--[[ " .. v4324 .. ". " .. v4320 .. " [x" .. l_uses_0 .. "]:n" .. l_content_0 .. "\n]]\n";
									local l_v4292_3 = v4292;
									v3951 = v3951 + #v4330;
									table.insert(v3950, l_v4292_3, v4330);
									v4292 = v4292 + 1;
								end;
							elseif l_uses_0 == 1 then
								local v4332 = "---- " .. v4324 .. ". " .. v4320 .. ": " .. l_content_0 .. "\n";
								local l_v4292_4 = v4292;
								v3951 = v3951 + #v4332;
								table.insert(v3950, l_v4292_4, v4332);
								v4292 = v4292 + 1;
							else
								local v4334 = "---- " .. v4324 .. ". " .. v4320 .. " [x" .. l_uses_0 .. "]: " .. l_content_0 .. "\n";
								local l_v4292_5 = v4292;
								v3951 = v3951 + #v4334;
								table.insert(v3950, l_v4292_5, v4334);
								v4292 = v4292 + 1;
							end;
						end;
					end;
				end;
				v4336("Global Errors", l_prefix_error_1, v4296);
				v4336("Global Warnings", l_prefix_warning_1, v4297);
				v4336("Global Information", l_prefix_information_1, v4298);
			end;
			v4295("\n");
			for _, v4338 in ipairs(v1335) do
				if v1131.mark_reads_and_writes then
					v4295("-- " .. v4009("Variable", v1336[v4338], 1, true) .. "\n");
				end;
				v4295("local " .. v1334[v4338] .. " = ");
				v4295(v460(v1131.string_quotes_behavior, v4338));
				v4295("\n");
			end;
			v1130:end_benchmark("Global AST To String");
			v1130:start_benchmark("Global String Writing");
			local v4339 = buffer.create(v3951);
			local v4340 = 0;
			for _, v4342 in ipairs(v3950) do
				buffer.copy(v4339, v4340, buffer.fromstring(v4342));
				v4340 = v4340 + #v4342;
			end;
			while buffer.readu8(v4339, buffer.len(v4339) - 1) == 10 do
				local v4343 = buffer.len(v4339) - 1;
				local v4344 = buffer.create(v4343);
				buffer.copy(v4344, 0, v4339, 0, v4343);
				v4339 = v4344;
			end;
			local v4345 = buffer.tostring(v4339);
			v1130:end_benchmark("Global String Writing");
			v1130:print_all_times();
			return v4345;
		end;
	end;
	local function _(v4347, v4348) --[[ Line: 12010 ]] --[[ Name: wrap ]]
		-- upvalues: l_getscriptbytecode_0 (copy), l_prefix_error_0 (ref)
		local function v4350(v4349) --[[ Line: 12011 ]] --[[ Name: wrapped ]]
			-- upvalues: v4347 (copy), l_getscriptbytecode_0 (ref)
			if type(v4349) == "string" then
				return v4347(v4349);
			else
				assert(l_getscriptbytecode_0, "getscriptbytecode was undefined");
				return v4347(l_getscriptbytecode_0(v4349));
			end;
		end;
		if v4348 then
			return function(...) --[[ Line: 12020 ]]
				-- upvalues: v4350 (copy), l_prefix_error_0 (ref)
				local v4352, v4353 = xpcall(v4350, function(v4351) --[[ Line: 12021 ]]
					return tostring(v4351) .. "\n" .. debug.traceback(nil, 2);
				end, ...);
				if v4352 then
					return v4353;
				else
					return l_prefix_error_0 .. ": After: " .. v4353;
				end;
			end;
		else
			return v4350;
		end;
	end;
	local function v4356(v4355) --[[ Line: 12011 ]] --[[ Name: wrapped ]]
		-- upvalues: v4346 (copy), l_getscriptbytecode_0 (copy)
		if type(v4355) == "string" then
			return v4346(v4355);
		else
			assert(l_getscriptbytecode_0, "getscriptbytecode was undefined");
			return v4346(l_getscriptbytecode_0(v4355));
		end;
	end;
	local l_v4356_0 = v4356 --[[ copy: 105 -> 109 ]];
	local function v4361(...) --[[ Line: 12020 ]]
		-- upvalues: l_v4356_0 (copy), l_prefix_error_0 (ref)
		local v4359, v4360 = xpcall(l_v4356_0, function(v4358) --[[ Line: 12021 ]]
			return tostring(v4358) .. "\n" .. debug.traceback(nil, 2);
		end, ...);
		if v4359 then
			return v4360;
		else
			return l_prefix_error_0 .. ": After: " .. v4360;
		end;
	end;
	v4356 = function(v4362) --[[ Line: 12035 ]] --[[ Name: _decompile ]]
		-- upvalues: v16 (ref), v4361 (copy), v551 (ref)
		v16 = "vanilla";
		local v4363 = v4361(v4362);
		local l_v551_0 = v551;
		v16 = "mul227";
		local v4365 = v4361(v4362);
		local l_v551_1 = v551;
		if l_v551_1 < l_v551_0 then
			return v4365;
		elseif l_v551_0 < l_v551_1 then
			return v4363;
		elseif string.match(v4363, "Unknown opcode") then
			return v4365;
		else
			return v4363;
		end;
	end;
	local function v4368(v4367) --[[ Line: 12011 ]] --[[ Name: wrapped ]]
		-- upvalues: v1123 (copy), l_getscriptbytecode_0 (copy)
		if type(v4367) == "string" then
			return v1123(v4367);
		else
			assert(l_getscriptbytecode_0, "getscriptbytecode was undefined");
			return v1123(l_getscriptbytecode_0(v4367));
		end;
	end;
	local l_v4368_0 = v4368 --[[ copy: 107 -> 110 ]];
	local function v4373(...) --[[ Line: 12020 ]]
		-- upvalues: l_v4368_0 (copy), l_prefix_error_0 (ref)
		local v4371, v4372 = xpcall(l_v4368_0, function(v4370) --[[ Line: 12021 ]]
			return tostring(v4370) .. "\n" .. debug.traceback(nil, 2);
		end, ...);
		if v4371 then
			return v4372;
		else
			return l_prefix_error_0 .. ": After: " .. v4372;
		end;
	end;
	v4368 = function(v4374) --[[ Line: 12062 ]] --[[ Name: _disassemble ]]
		-- upvalues: v16 (ref), v4373 (copy), v551 (ref)
		v16 = "vanilla";
		local v4375 = v4373(v4374);
		local l_v551_2 = v551;
		v16 = "mul227";
		local v4377 = v4373(v4374);
		local l_v551_3 = v551;
		if l_v551_3 < l_v551_2 then
			return v4377;
		elseif l_v551_2 < l_v551_3 then
			return v4375;
		elseif #v4377 >= #v4375 then
			return v4377;
		else
			return v4375;
		end;
	end;
	return v4356(ByteCode)
end)

getgenv().decompile = DecompilerKonstant
